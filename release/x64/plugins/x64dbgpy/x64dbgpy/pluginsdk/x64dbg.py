# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_x64dbg')).lstrip('.')
        return importlib.import_module(mname)
    _x64dbg = swig_import_helper()
    del swig_import_helper
elif version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_x64dbg', [dirname(__file__)])
        except ImportError:
            import _x64dbg
            return _x64dbg
        if fp is not None:
            try:
                _mod = imp.load_module('_x64dbg', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _x64dbg = swig_import_helper()
    del swig_import_helper
else:
    import _x64dbg
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class ListInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ListInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["count"] = _x64dbg.ListInfo_count_set
    __swig_getmethods__["count"] = _x64dbg.ListInfo_count_get
    if _newclass:
        count = _swig_property(_x64dbg.ListInfo_count_get, _x64dbg.ListInfo_count_set)
    __swig_setmethods__["size"] = _x64dbg.ListInfo_size_set
    __swig_getmethods__["size"] = _x64dbg.ListInfo_size_get
    if _newclass:
        size = _swig_property(_x64dbg.ListInfo_size_get, _x64dbg.ListInfo_size_set)
    __swig_setmethods__["data"] = _x64dbg.ListInfo_data_set
    __swig_getmethods__["data"] = _x64dbg.ListInfo_data_get
    if _newclass:
        data = _swig_property(_x64dbg.ListInfo_data_get, _x64dbg.ListInfo_data_set)

    def __init__(self):
        this = _x64dbg.new_ListInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_ListInfo
    __del__ = lambda self: None
ListInfo_swigregister = _x64dbg.ListInfo_swigregister
ListInfo_swigregister(ListInfo)

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _x64dbg.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _x64dbg.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _x64dbg.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _x64dbg.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _x64dbg.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _x64dbg.SwigPyIterator_equal(self, x)

    def copy(self):
        return _x64dbg.SwigPyIterator_copy(self)

    def next(self):
        return _x64dbg.SwigPyIterator_next(self)

    def __next__(self):
        return _x64dbg.SwigPyIterator___next__(self)

    def previous(self):
        return _x64dbg.SwigPyIterator_previous(self)

    def advance(self, n):
        return _x64dbg.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _x64dbg.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _x64dbg.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _x64dbg.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _x64dbg.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _x64dbg.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _x64dbg.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _x64dbg.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ThreadVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreadVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThreadVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _x64dbg.ThreadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _x64dbg.ThreadVector___nonzero__(self)

    def __bool__(self):
        return _x64dbg.ThreadVector___bool__(self)

    def __len__(self):
        return _x64dbg.ThreadVector___len__(self)

    def __getslice__(self, i, j):
        return _x64dbg.ThreadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _x64dbg.ThreadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _x64dbg.ThreadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _x64dbg.ThreadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _x64dbg.ThreadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _x64dbg.ThreadVector___setitem__(self, *args)

    def pop(self):
        return _x64dbg.ThreadVector_pop(self)

    def append(self, x):
        return _x64dbg.ThreadVector_append(self, x)

    def empty(self):
        return _x64dbg.ThreadVector_empty(self)

    def size(self):
        return _x64dbg.ThreadVector_size(self)

    def swap(self, v):
        return _x64dbg.ThreadVector_swap(self, v)

    def begin(self):
        return _x64dbg.ThreadVector_begin(self)

    def end(self):
        return _x64dbg.ThreadVector_end(self)

    def rbegin(self):
        return _x64dbg.ThreadVector_rbegin(self)

    def rend(self):
        return _x64dbg.ThreadVector_rend(self)

    def clear(self):
        return _x64dbg.ThreadVector_clear(self)

    def get_allocator(self):
        return _x64dbg.ThreadVector_get_allocator(self)

    def pop_back(self):
        return _x64dbg.ThreadVector_pop_back(self)

    def erase(self, *args):
        return _x64dbg.ThreadVector_erase(self, *args)

    def __init__(self, *args):
        this = _x64dbg.new_ThreadVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _x64dbg.ThreadVector_push_back(self, x)

    def front(self):
        return _x64dbg.ThreadVector_front(self)

    def back(self):
        return _x64dbg.ThreadVector_back(self)

    def assign(self, n, x):
        return _x64dbg.ThreadVector_assign(self, n, x)

    def resize(self, *args):
        return _x64dbg.ThreadVector_resize(self, *args)

    def insert(self, *args):
        return _x64dbg.ThreadVector_insert(self, *args)

    def reserve(self, n):
        return _x64dbg.ThreadVector_reserve(self, n)

    def capacity(self):
        return _x64dbg.ThreadVector_capacity(self)
    __swig_destroy__ = _x64dbg.delete_ThreadVector
    __del__ = lambda self: None
ThreadVector_swigregister = _x64dbg.ThreadVector_swigregister
ThreadVector_swigregister(ThreadVector)


def GetThreadInfoList(l):
    return _x64dbg.GetThreadInfoList(l)
GetThreadInfoList = _x64dbg.GetThreadInfoList
MAX_SETTING_SIZE = _x64dbg.MAX_SETTING_SIZE
DBG_VERSION = _x64dbg.DBG_VERSION

def BridgeInit():
    return _x64dbg.BridgeInit()
BridgeInit = _x64dbg.BridgeInit

def BridgeStart():
    return _x64dbg.BridgeStart()
BridgeStart = _x64dbg.BridgeStart

def BridgeAlloc(size):
    return _x64dbg.BridgeAlloc(size)
BridgeAlloc = _x64dbg.BridgeAlloc

def BridgeFree(ptr):
    return _x64dbg.BridgeFree(ptr)
BridgeFree = _x64dbg.BridgeFree

def BridgeSettingGet(section, key, value):
    return _x64dbg.BridgeSettingGet(section, key, value)
BridgeSettingGet = _x64dbg.BridgeSettingGet

def BridgeSettingGetUint(section, key, value):
    return _x64dbg.BridgeSettingGetUint(section, key, value)
BridgeSettingGetUint = _x64dbg.BridgeSettingGetUint

def BridgeSettingSet(section, key, value):
    return _x64dbg.BridgeSettingSet(section, key, value)
BridgeSettingSet = _x64dbg.BridgeSettingSet

def BridgeSettingSetUint(section, key, value):
    return _x64dbg.BridgeSettingSetUint(section, key, value)
BridgeSettingSetUint = _x64dbg.BridgeSettingSetUint

def BridgeSettingFlush():
    return _x64dbg.BridgeSettingFlush()
BridgeSettingFlush = _x64dbg.BridgeSettingFlush

def BridgeSettingRead(errorLine):
    return _x64dbg.BridgeSettingRead(errorLine)
BridgeSettingRead = _x64dbg.BridgeSettingRead

def BridgeGetDbgVersion():
    return _x64dbg.BridgeGetDbgVersion()
BridgeGetDbgVersion = _x64dbg.BridgeGetDbgVersion
MAX_LABEL_SIZE = _x64dbg.MAX_LABEL_SIZE
MAX_COMMENT_SIZE = _x64dbg.MAX_COMMENT_SIZE
MAX_MODULE_SIZE = _x64dbg.MAX_MODULE_SIZE
MAX_IMPORT_SIZE = _x64dbg.MAX_IMPORT_SIZE
MAX_BREAKPOINT_SIZE = _x64dbg.MAX_BREAKPOINT_SIZE
MAX_CONDITIONAL_EXPR_SIZE = _x64dbg.MAX_CONDITIONAL_EXPR_SIZE
MAX_CONDITIONAL_TEXT_SIZE = _x64dbg.MAX_CONDITIONAL_TEXT_SIZE
MAX_SCRIPT_LINE_SIZE = _x64dbg.MAX_SCRIPT_LINE_SIZE
MAX_THREAD_NAME_SIZE = _x64dbg.MAX_THREAD_NAME_SIZE
MAX_WATCH_NAME_SIZE = _x64dbg.MAX_WATCH_NAME_SIZE
MAX_STRING_SIZE = _x64dbg.MAX_STRING_SIZE
MAX_ERROR_SIZE = _x64dbg.MAX_ERROR_SIZE
MAX_SECTION_SIZE = _x64dbg.MAX_SECTION_SIZE
MAX_COMMAND_LINE_SIZE = _x64dbg.MAX_COMMAND_LINE_SIZE
MAX_MNEMONIC_SIZE = _x64dbg.MAX_MNEMONIC_SIZE
PAGE_SIZE = _x64dbg.PAGE_SIZE
initialized = _x64dbg.initialized
paused = _x64dbg.paused
running = _x64dbg.running
stopped = _x64dbg.stopped
SEG_DEFAULT = _x64dbg.SEG_DEFAULT
SEG_ES = _x64dbg.SEG_ES
SEG_DS = _x64dbg.SEG_DS
SEG_FS = _x64dbg.SEG_FS
SEG_GS = _x64dbg.SEG_GS
SEG_CS = _x64dbg.SEG_CS
SEG_SS = _x64dbg.SEG_SS
flagmodule = _x64dbg.flagmodule
flaglabel = _x64dbg.flaglabel
flagcomment = _x64dbg.flagcomment
flagbookmark = _x64dbg.flagbookmark
flagfunction = _x64dbg.flagfunction
flagloop = _x64dbg.flagloop
flagargs = _x64dbg.flagargs
flagNoFuncOffset = _x64dbg.flagNoFuncOffset
bp_none = _x64dbg.bp_none
bp_normal = _x64dbg.bp_normal
bp_hardware = _x64dbg.bp_hardware
bp_memory = _x64dbg.bp_memory
bp_dll = _x64dbg.bp_dll
bp_exception = _x64dbg.bp_exception
FUNC_NONE = _x64dbg.FUNC_NONE
FUNC_BEGIN = _x64dbg.FUNC_BEGIN
FUNC_MIDDLE = _x64dbg.FUNC_MIDDLE
FUNC_END = _x64dbg.FUNC_END
FUNC_SINGLE = _x64dbg.FUNC_SINGLE
LOOP_NONE = _x64dbg.LOOP_NONE
LOOP_BEGIN = _x64dbg.LOOP_BEGIN
LOOP_MIDDLE = _x64dbg.LOOP_MIDDLE
LOOP_ENTRY = _x64dbg.LOOP_ENTRY
LOOP_END = _x64dbg.LOOP_END
LOOP_SINGLE = _x64dbg.LOOP_SINGLE
XREF_NONE = _x64dbg.XREF_NONE
XREF_DATA = _x64dbg.XREF_DATA
XREF_JMP = _x64dbg.XREF_JMP
XREF_CALL = _x64dbg.XREF_CALL
ARG_NONE = _x64dbg.ARG_NONE
ARG_BEGIN = _x64dbg.ARG_BEGIN
ARG_MIDDLE = _x64dbg.ARG_MIDDLE
ARG_END = _x64dbg.ARG_END
ARG_SINGLE = _x64dbg.ARG_SINGLE
DBG_SCRIPT_LOAD = _x64dbg.DBG_SCRIPT_LOAD
DBG_SCRIPT_UNLOAD = _x64dbg.DBG_SCRIPT_UNLOAD
DBG_SCRIPT_RUN = _x64dbg.DBG_SCRIPT_RUN
DBG_SCRIPT_STEP = _x64dbg.DBG_SCRIPT_STEP
DBG_SCRIPT_BPTOGGLE = _x64dbg.DBG_SCRIPT_BPTOGGLE
DBG_SCRIPT_BPGET = _x64dbg.DBG_SCRIPT_BPGET
DBG_SCRIPT_CMDEXEC = _x64dbg.DBG_SCRIPT_CMDEXEC
DBG_SCRIPT_ABORT = _x64dbg.DBG_SCRIPT_ABORT
DBG_SCRIPT_GETLINETYPE = _x64dbg.DBG_SCRIPT_GETLINETYPE
DBG_SCRIPT_SETIP = _x64dbg.DBG_SCRIPT_SETIP
DBG_SCRIPT_GETBRANCHINFO = _x64dbg.DBG_SCRIPT_GETBRANCHINFO
DBG_SYMBOL_ENUM = _x64dbg.DBG_SYMBOL_ENUM
DBG_ASSEMBLE_AT = _x64dbg.DBG_ASSEMBLE_AT
DBG_MODBASE_FROM_NAME = _x64dbg.DBG_MODBASE_FROM_NAME
DBG_DISASM_AT = _x64dbg.DBG_DISASM_AT
DBG_STACK_COMMENT_GET = _x64dbg.DBG_STACK_COMMENT_GET
DBG_GET_THREAD_LIST = _x64dbg.DBG_GET_THREAD_LIST
DBG_SETTINGS_UPDATED = _x64dbg.DBG_SETTINGS_UPDATED
DBG_DISASM_FAST_AT = _x64dbg.DBG_DISASM_FAST_AT
DBG_MENU_ENTRY_CLICKED = _x64dbg.DBG_MENU_ENTRY_CLICKED
DBG_FUNCTION_GET = _x64dbg.DBG_FUNCTION_GET
DBG_FUNCTION_OVERLAPS = _x64dbg.DBG_FUNCTION_OVERLAPS
DBG_FUNCTION_ADD = _x64dbg.DBG_FUNCTION_ADD
DBG_FUNCTION_DEL = _x64dbg.DBG_FUNCTION_DEL
DBG_LOOP_GET = _x64dbg.DBG_LOOP_GET
DBG_LOOP_OVERLAPS = _x64dbg.DBG_LOOP_OVERLAPS
DBG_LOOP_ADD = _x64dbg.DBG_LOOP_ADD
DBG_LOOP_DEL = _x64dbg.DBG_LOOP_DEL
DBG_IS_RUN_LOCKED = _x64dbg.DBG_IS_RUN_LOCKED
DBG_IS_BP_DISABLED = _x64dbg.DBG_IS_BP_DISABLED
DBG_SET_AUTO_COMMENT_AT = _x64dbg.DBG_SET_AUTO_COMMENT_AT
DBG_DELETE_AUTO_COMMENT_RANGE = _x64dbg.DBG_DELETE_AUTO_COMMENT_RANGE
DBG_SET_AUTO_LABEL_AT = _x64dbg.DBG_SET_AUTO_LABEL_AT
DBG_DELETE_AUTO_LABEL_RANGE = _x64dbg.DBG_DELETE_AUTO_LABEL_RANGE
DBG_SET_AUTO_BOOKMARK_AT = _x64dbg.DBG_SET_AUTO_BOOKMARK_AT
DBG_DELETE_AUTO_BOOKMARK_RANGE = _x64dbg.DBG_DELETE_AUTO_BOOKMARK_RANGE
DBG_SET_AUTO_FUNCTION_AT = _x64dbg.DBG_SET_AUTO_FUNCTION_AT
DBG_DELETE_AUTO_FUNCTION_RANGE = _x64dbg.DBG_DELETE_AUTO_FUNCTION_RANGE
DBG_GET_STRING_AT = _x64dbg.DBG_GET_STRING_AT
DBG_GET_FUNCTIONS = _x64dbg.DBG_GET_FUNCTIONS
DBG_WIN_EVENT = _x64dbg.DBG_WIN_EVENT
DBG_WIN_EVENT_GLOBAL = _x64dbg.DBG_WIN_EVENT_GLOBAL
DBG_INITIALIZE_LOCKS = _x64dbg.DBG_INITIALIZE_LOCKS
DBG_DEINITIALIZE_LOCKS = _x64dbg.DBG_DEINITIALIZE_LOCKS
DBG_GET_TIME_WASTED_COUNTER = _x64dbg.DBG_GET_TIME_WASTED_COUNTER
DBG_SYMBOL_ENUM_FROMCACHE = _x64dbg.DBG_SYMBOL_ENUM_FROMCACHE
DBG_DELETE_COMMENT_RANGE = _x64dbg.DBG_DELETE_COMMENT_RANGE
DBG_DELETE_LABEL_RANGE = _x64dbg.DBG_DELETE_LABEL_RANGE
DBG_DELETE_BOOKMARK_RANGE = _x64dbg.DBG_DELETE_BOOKMARK_RANGE
DBG_GET_XREF_COUNT_AT = _x64dbg.DBG_GET_XREF_COUNT_AT
DBG_GET_XREF_TYPE_AT = _x64dbg.DBG_GET_XREF_TYPE_AT
DBG_XREF_ADD = _x64dbg.DBG_XREF_ADD
DBG_XREF_DEL_ALL = _x64dbg.DBG_XREF_DEL_ALL
DBG_XREF_GET = _x64dbg.DBG_XREF_GET
DBG_GET_ENCODE_TYPE_BUFFER = _x64dbg.DBG_GET_ENCODE_TYPE_BUFFER
DBG_ENCODE_TYPE_GET = _x64dbg.DBG_ENCODE_TYPE_GET
DBG_DELETE_ENCODE_TYPE_RANGE = _x64dbg.DBG_DELETE_ENCODE_TYPE_RANGE
DBG_ENCODE_SIZE_GET = _x64dbg.DBG_ENCODE_SIZE_GET
DBG_DELETE_ENCODE_TYPE_SEG = _x64dbg.DBG_DELETE_ENCODE_TYPE_SEG
DBG_RELEASE_ENCODE_TYPE_BUFFER = _x64dbg.DBG_RELEASE_ENCODE_TYPE_BUFFER
DBG_ARGUMENT_GET = _x64dbg.DBG_ARGUMENT_GET
DBG_ARGUMENT_OVERLAPS = _x64dbg.DBG_ARGUMENT_OVERLAPS
DBG_ARGUMENT_ADD = _x64dbg.DBG_ARGUMENT_ADD
DBG_ARGUMENT_DEL = _x64dbg.DBG_ARGUMENT_DEL
DBG_GET_WATCH_LIST = _x64dbg.DBG_GET_WATCH_LIST
DBG_SELCHANGED = _x64dbg.DBG_SELCHANGED
DBG_GET_PROCESS_HANDLE = _x64dbg.DBG_GET_PROCESS_HANDLE
DBG_GET_THREAD_HANDLE = _x64dbg.DBG_GET_THREAD_HANDLE
DBG_GET_PROCESS_ID = _x64dbg.DBG_GET_PROCESS_ID
DBG_GET_THREAD_ID = _x64dbg.DBG_GET_THREAD_ID
DBG_GET_PEB_ADDRESS = _x64dbg.DBG_GET_PEB_ADDRESS
DBG_GET_TEB_ADDRESS = _x64dbg.DBG_GET_TEB_ADDRESS
DBG_ANALYZE_FUNCTION = _x64dbg.DBG_ANALYZE_FUNCTION
DBG_MENU_PREPARE = _x64dbg.DBG_MENU_PREPARE
linecommand = _x64dbg.linecommand
linebranch = _x64dbg.linebranch
linelabel = _x64dbg.linelabel
linecomment = _x64dbg.linecomment
lineempty = _x64dbg.lineempty
scriptnobranch = _x64dbg.scriptnobranch
scriptjmp = _x64dbg.scriptjmp
scriptjnejnz = _x64dbg.scriptjnejnz
scriptjejz = _x64dbg.scriptjejz
scriptjbjl = _x64dbg.scriptjbjl
scriptjajg = _x64dbg.scriptjajg
scriptjbejle = _x64dbg.scriptjbejle
scriptjaejge = _x64dbg.scriptjaejge
scriptcall = _x64dbg.scriptcall
instr_normal = _x64dbg.instr_normal
instr_branch = _x64dbg.instr_branch
instr_stack = _x64dbg.instr_stack
arg_normal = _x64dbg.arg_normal
arg_memory = _x64dbg.arg_memory
str_none = _x64dbg.str_none
str_ascii = _x64dbg.str_ascii
str_unicode = _x64dbg.str_unicode
_PriorityIdle = _x64dbg._PriorityIdle
_PriorityAboveNormal = _x64dbg._PriorityAboveNormal
_PriorityBelowNormal = _x64dbg._PriorityBelowNormal
_PriorityHighest = _x64dbg._PriorityHighest
_PriorityLowest = _x64dbg._PriorityLowest
_PriorityNormal = _x64dbg._PriorityNormal
_PriorityTimeCritical = _x64dbg._PriorityTimeCritical
_PriorityUnknown = _x64dbg._PriorityUnknown
_Executive = _x64dbg._Executive
_FreePage = _x64dbg._FreePage
_PageIn = _x64dbg._PageIn
_PoolAllocation = _x64dbg._PoolAllocation
_DelayExecution = _x64dbg._DelayExecution
_Suspended = _x64dbg._Suspended
_UserRequest = _x64dbg._UserRequest
_WrExecutive = _x64dbg._WrExecutive
_WrFreePage = _x64dbg._WrFreePage
_WrPageIn = _x64dbg._WrPageIn
_WrPoolAllocation = _x64dbg._WrPoolAllocation
_WrDelayExecution = _x64dbg._WrDelayExecution
_WrSuspended = _x64dbg._WrSuspended
_WrUserRequest = _x64dbg._WrUserRequest
_WrEventPair = _x64dbg._WrEventPair
_WrQueue = _x64dbg._WrQueue
_WrLpcReceive = _x64dbg._WrLpcReceive
_WrLpcReply = _x64dbg._WrLpcReply
_WrVirtualMemory = _x64dbg._WrVirtualMemory
_WrPageOut = _x64dbg._WrPageOut
_WrRendezvous = _x64dbg._WrRendezvous
_Spare2 = _x64dbg._Spare2
_Spare3 = _x64dbg._Spare3
_Spare4 = _x64dbg._Spare4
_Spare5 = _x64dbg._Spare5
_WrCalloutStack = _x64dbg._WrCalloutStack
_WrKernel = _x64dbg._WrKernel
_WrResource = _x64dbg._WrResource
_WrPushLock = _x64dbg._WrPushLock
_WrMutex = _x64dbg._WrMutex
_WrQuantumEnd = _x64dbg._WrQuantumEnd
_WrDispatchInt = _x64dbg._WrDispatchInt
_WrPreempted = _x64dbg._WrPreempted
_WrYieldExecution = _x64dbg._WrYieldExecution
_WrFastMutex = _x64dbg._WrFastMutex
_WrGuardedMutex = _x64dbg._WrGuardedMutex
_WrRundown = _x64dbg._WrRundown
size_byte = _x64dbg.size_byte
size_word = _x64dbg.size_word
size_dword = _x64dbg.size_dword
size_qword = _x64dbg.size_qword
enc_unknown = _x64dbg.enc_unknown
enc_byte = _x64dbg.enc_byte
enc_word = _x64dbg.enc_word
enc_dword = _x64dbg.enc_dword
enc_fword = _x64dbg.enc_fword
enc_qword = _x64dbg.enc_qword
enc_tbyte = _x64dbg.enc_tbyte
enc_oword = _x64dbg.enc_oword
enc_mmword = _x64dbg.enc_mmword
enc_xmmword = _x64dbg.enc_xmmword
enc_ymmword = _x64dbg.enc_ymmword
enc_zmmword = _x64dbg.enc_zmmword
enc_real4 = _x64dbg.enc_real4
enc_real8 = _x64dbg.enc_real8
enc_real10 = _x64dbg.enc_real10
enc_ascii = _x64dbg.enc_ascii
enc_unicode = _x64dbg.enc_unicode
enc_code = _x64dbg.enc_code
enc_junk = _x64dbg.enc_junk
enc_middle = _x64dbg.enc_middle
TYPE_UINT = _x64dbg.TYPE_UINT
TYPE_INT = _x64dbg.TYPE_INT
TYPE_FLOAT = _x64dbg.TYPE_FLOAT
TYPE_ASCII = _x64dbg.TYPE_ASCII
TYPE_UNICODE = _x64dbg.TYPE_UNICODE
TYPE_INVALID = _x64dbg.TYPE_INVALID
MODE_DISABLED = _x64dbg.MODE_DISABLED
MODE_ISTRUE = _x64dbg.MODE_ISTRUE
MODE_ISFALSE = _x64dbg.MODE_ISFALSE
MODE_CHANGED = _x64dbg.MODE_CHANGED
MODE_UNCHANGED = _x64dbg.MODE_UNCHANGED
hw_access = _x64dbg.hw_access
hw_write = _x64dbg.hw_write
hw_execute = _x64dbg.hw_execute
mem_access = _x64dbg.mem_access
mem_read = _x64dbg.mem_read
mem_write = _x64dbg.mem_write
mem_execute = _x64dbg.mem_execute
dll_load = _x64dbg.dll_load
dll_unload = _x64dbg.dll_unload
dll_all = _x64dbg.dll_all
ex_firstchance = _x64dbg.ex_firstchance
ex_secondchance = _x64dbg.ex_secondchance
ex_all = _x64dbg.ex_all
hw_byte = _x64dbg.hw_byte
hw_word = _x64dbg.hw_word
hw_dword = _x64dbg.hw_dword
hw_qword = _x64dbg.hw_qword
class MEMPAGE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEMPAGE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEMPAGE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mbi"] = _x64dbg.MEMPAGE_mbi_set
    __swig_getmethods__["mbi"] = _x64dbg.MEMPAGE_mbi_get
    if _newclass:
        mbi = _swig_property(_x64dbg.MEMPAGE_mbi_get, _x64dbg.MEMPAGE_mbi_set)
    __swig_setmethods__["info"] = _x64dbg.MEMPAGE_info_set
    __swig_getmethods__["info"] = _x64dbg.MEMPAGE_info_get
    if _newclass:
        info = _swig_property(_x64dbg.MEMPAGE_info_get, _x64dbg.MEMPAGE_info_set)

    def __init__(self):
        this = _x64dbg.new_MEMPAGE()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_MEMPAGE
    __del__ = lambda self: None
MEMPAGE_swigregister = _x64dbg.MEMPAGE_swigregister
MEMPAGE_swigregister(MEMPAGE)

class MEMMAP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEMMAP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEMMAP, name)
    __repr__ = _swig_repr
    __swig_setmethods__["count"] = _x64dbg.MEMMAP_count_set
    __swig_getmethods__["count"] = _x64dbg.MEMMAP_count_get
    if _newclass:
        count = _swig_property(_x64dbg.MEMMAP_count_get, _x64dbg.MEMMAP_count_set)
    __swig_setmethods__["page"] = _x64dbg.MEMMAP_page_set
    __swig_getmethods__["page"] = _x64dbg.MEMMAP_page_get
    if _newclass:
        page = _swig_property(_x64dbg.MEMMAP_page_get, _x64dbg.MEMMAP_page_set)

    def __init__(self):
        this = _x64dbg.new_MEMMAP()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_MEMMAP
    __del__ = lambda self: None
MEMMAP_swigregister = _x64dbg.MEMMAP_swigregister
MEMMAP_swigregister(MEMMAP)

class BRIDGEBP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRIDGEBP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BRIDGEBP, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _x64dbg.BRIDGEBP_type_set
    __swig_getmethods__["type"] = _x64dbg.BRIDGEBP_type_get
    if _newclass:
        type = _swig_property(_x64dbg.BRIDGEBP_type_get, _x64dbg.BRIDGEBP_type_set)
    __swig_setmethods__["addr"] = _x64dbg.BRIDGEBP_addr_set
    __swig_getmethods__["addr"] = _x64dbg.BRIDGEBP_addr_get
    if _newclass:
        addr = _swig_property(_x64dbg.BRIDGEBP_addr_get, _x64dbg.BRIDGEBP_addr_set)
    __swig_setmethods__["enabled"] = _x64dbg.BRIDGEBP_enabled_set
    __swig_getmethods__["enabled"] = _x64dbg.BRIDGEBP_enabled_get
    if _newclass:
        enabled = _swig_property(_x64dbg.BRIDGEBP_enabled_get, _x64dbg.BRIDGEBP_enabled_set)
    __swig_setmethods__["singleshoot"] = _x64dbg.BRIDGEBP_singleshoot_set
    __swig_getmethods__["singleshoot"] = _x64dbg.BRIDGEBP_singleshoot_get
    if _newclass:
        singleshoot = _swig_property(_x64dbg.BRIDGEBP_singleshoot_get, _x64dbg.BRIDGEBP_singleshoot_set)
    __swig_setmethods__["active"] = _x64dbg.BRIDGEBP_active_set
    __swig_getmethods__["active"] = _x64dbg.BRIDGEBP_active_get
    if _newclass:
        active = _swig_property(_x64dbg.BRIDGEBP_active_get, _x64dbg.BRIDGEBP_active_set)
    __swig_setmethods__["name"] = _x64dbg.BRIDGEBP_name_set
    __swig_getmethods__["name"] = _x64dbg.BRIDGEBP_name_get
    if _newclass:
        name = _swig_property(_x64dbg.BRIDGEBP_name_get, _x64dbg.BRIDGEBP_name_set)
    __swig_setmethods__["mod"] = _x64dbg.BRIDGEBP_mod_set
    __swig_getmethods__["mod"] = _x64dbg.BRIDGEBP_mod_get
    if _newclass:
        mod = _swig_property(_x64dbg.BRIDGEBP_mod_get, _x64dbg.BRIDGEBP_mod_set)
    __swig_setmethods__["slot"] = _x64dbg.BRIDGEBP_slot_set
    __swig_getmethods__["slot"] = _x64dbg.BRIDGEBP_slot_get
    if _newclass:
        slot = _swig_property(_x64dbg.BRIDGEBP_slot_get, _x64dbg.BRIDGEBP_slot_set)
    __swig_setmethods__["typeEx"] = _x64dbg.BRIDGEBP_typeEx_set
    __swig_getmethods__["typeEx"] = _x64dbg.BRIDGEBP_typeEx_get
    if _newclass:
        typeEx = _swig_property(_x64dbg.BRIDGEBP_typeEx_get, _x64dbg.BRIDGEBP_typeEx_set)
    __swig_setmethods__["hwSize"] = _x64dbg.BRIDGEBP_hwSize_set
    __swig_getmethods__["hwSize"] = _x64dbg.BRIDGEBP_hwSize_get
    if _newclass:
        hwSize = _swig_property(_x64dbg.BRIDGEBP_hwSize_get, _x64dbg.BRIDGEBP_hwSize_set)
    __swig_setmethods__["hitCount"] = _x64dbg.BRIDGEBP_hitCount_set
    __swig_getmethods__["hitCount"] = _x64dbg.BRIDGEBP_hitCount_get
    if _newclass:
        hitCount = _swig_property(_x64dbg.BRIDGEBP_hitCount_get, _x64dbg.BRIDGEBP_hitCount_set)
    __swig_setmethods__["fastResume"] = _x64dbg.BRIDGEBP_fastResume_set
    __swig_getmethods__["fastResume"] = _x64dbg.BRIDGEBP_fastResume_get
    if _newclass:
        fastResume = _swig_property(_x64dbg.BRIDGEBP_fastResume_get, _x64dbg.BRIDGEBP_fastResume_set)
    __swig_setmethods__["silent"] = _x64dbg.BRIDGEBP_silent_set
    __swig_getmethods__["silent"] = _x64dbg.BRIDGEBP_silent_get
    if _newclass:
        silent = _swig_property(_x64dbg.BRIDGEBP_silent_get, _x64dbg.BRIDGEBP_silent_set)
    __swig_setmethods__["breakCondition"] = _x64dbg.BRIDGEBP_breakCondition_set
    __swig_getmethods__["breakCondition"] = _x64dbg.BRIDGEBP_breakCondition_get
    if _newclass:
        breakCondition = _swig_property(_x64dbg.BRIDGEBP_breakCondition_get, _x64dbg.BRIDGEBP_breakCondition_set)
    __swig_setmethods__["logText"] = _x64dbg.BRIDGEBP_logText_set
    __swig_getmethods__["logText"] = _x64dbg.BRIDGEBP_logText_get
    if _newclass:
        logText = _swig_property(_x64dbg.BRIDGEBP_logText_get, _x64dbg.BRIDGEBP_logText_set)
    __swig_setmethods__["logCondition"] = _x64dbg.BRIDGEBP_logCondition_set
    __swig_getmethods__["logCondition"] = _x64dbg.BRIDGEBP_logCondition_get
    if _newclass:
        logCondition = _swig_property(_x64dbg.BRIDGEBP_logCondition_get, _x64dbg.BRIDGEBP_logCondition_set)
    __swig_setmethods__["commandText"] = _x64dbg.BRIDGEBP_commandText_set
    __swig_getmethods__["commandText"] = _x64dbg.BRIDGEBP_commandText_get
    if _newclass:
        commandText = _swig_property(_x64dbg.BRIDGEBP_commandText_get, _x64dbg.BRIDGEBP_commandText_set)
    __swig_setmethods__["commandCondition"] = _x64dbg.BRIDGEBP_commandCondition_set
    __swig_getmethods__["commandCondition"] = _x64dbg.BRIDGEBP_commandCondition_get
    if _newclass:
        commandCondition = _swig_property(_x64dbg.BRIDGEBP_commandCondition_get, _x64dbg.BRIDGEBP_commandCondition_set)

    def __init__(self):
        this = _x64dbg.new_BRIDGEBP()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_BRIDGEBP
    __del__ = lambda self: None
BRIDGEBP_swigregister = _x64dbg.BRIDGEBP_swigregister
BRIDGEBP_swigregister(BRIDGEBP)

class BPMAP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BPMAP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BPMAP, name)
    __repr__ = _swig_repr
    __swig_setmethods__["count"] = _x64dbg.BPMAP_count_set
    __swig_getmethods__["count"] = _x64dbg.BPMAP_count_get
    if _newclass:
        count = _swig_property(_x64dbg.BPMAP_count_get, _x64dbg.BPMAP_count_set)
    __swig_setmethods__["bp"] = _x64dbg.BPMAP_bp_set
    __swig_getmethods__["bp"] = _x64dbg.BPMAP_bp_get
    if _newclass:
        bp = _swig_property(_x64dbg.BPMAP_bp_get, _x64dbg.BPMAP_bp_set)

    def __init__(self):
        this = _x64dbg.new_BPMAP()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_BPMAP
    __del__ = lambda self: None
BPMAP_swigregister = _x64dbg.BPMAP_swigregister
BPMAP_swigregister(BPMAP)

class WATCHINFO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WATCHINFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WATCHINFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["WatchName"] = _x64dbg.WATCHINFO_WatchName_set
    __swig_getmethods__["WatchName"] = _x64dbg.WATCHINFO_WatchName_get
    if _newclass:
        WatchName = _swig_property(_x64dbg.WATCHINFO_WatchName_get, _x64dbg.WATCHINFO_WatchName_set)
    __swig_setmethods__["Expression"] = _x64dbg.WATCHINFO_Expression_set
    __swig_getmethods__["Expression"] = _x64dbg.WATCHINFO_Expression_get
    if _newclass:
        Expression = _swig_property(_x64dbg.WATCHINFO_Expression_get, _x64dbg.WATCHINFO_Expression_set)
    __swig_setmethods__["window"] = _x64dbg.WATCHINFO_window_set
    __swig_getmethods__["window"] = _x64dbg.WATCHINFO_window_get
    if _newclass:
        window = _swig_property(_x64dbg.WATCHINFO_window_get, _x64dbg.WATCHINFO_window_set)
    __swig_setmethods__["id"] = _x64dbg.WATCHINFO_id_set
    __swig_getmethods__["id"] = _x64dbg.WATCHINFO_id_get
    if _newclass:
        id = _swig_property(_x64dbg.WATCHINFO_id_get, _x64dbg.WATCHINFO_id_set)
    __swig_setmethods__["varType"] = _x64dbg.WATCHINFO_varType_set
    __swig_getmethods__["varType"] = _x64dbg.WATCHINFO_varType_get
    if _newclass:
        varType = _swig_property(_x64dbg.WATCHINFO_varType_get, _x64dbg.WATCHINFO_varType_set)
    __swig_setmethods__["watchdogMode"] = _x64dbg.WATCHINFO_watchdogMode_set
    __swig_getmethods__["watchdogMode"] = _x64dbg.WATCHINFO_watchdogMode_get
    if _newclass:
        watchdogMode = _swig_property(_x64dbg.WATCHINFO_watchdogMode_get, _x64dbg.WATCHINFO_watchdogMode_set)
    __swig_setmethods__["value"] = _x64dbg.WATCHINFO_value_set
    __swig_getmethods__["value"] = _x64dbg.WATCHINFO_value_get
    if _newclass:
        value = _swig_property(_x64dbg.WATCHINFO_value_get, _x64dbg.WATCHINFO_value_set)
    __swig_setmethods__["watchdogTriggered"] = _x64dbg.WATCHINFO_watchdogTriggered_set
    __swig_getmethods__["watchdogTriggered"] = _x64dbg.WATCHINFO_watchdogTriggered_get
    if _newclass:
        watchdogTriggered = _swig_property(_x64dbg.WATCHINFO_watchdogTriggered_get, _x64dbg.WATCHINFO_watchdogTriggered_set)

    def __init__(self):
        this = _x64dbg.new_WATCHINFO()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_WATCHINFO
    __del__ = lambda self: None
WATCHINFO_swigregister = _x64dbg.WATCHINFO_swigregister
WATCHINFO_swigregister(WATCHINFO)

class FUNCTION(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FUNCTION, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FUNCTION, name)
    __repr__ = _swig_repr
    __swig_setmethods__["start"] = _x64dbg.FUNCTION_start_set
    __swig_getmethods__["start"] = _x64dbg.FUNCTION_start_get
    if _newclass:
        start = _swig_property(_x64dbg.FUNCTION_start_get, _x64dbg.FUNCTION_start_set)
    __swig_setmethods__["end"] = _x64dbg.FUNCTION_end_set
    __swig_getmethods__["end"] = _x64dbg.FUNCTION_end_get
    if _newclass:
        end = _swig_property(_x64dbg.FUNCTION_end_get, _x64dbg.FUNCTION_end_set)
    __swig_setmethods__["instrcount"] = _x64dbg.FUNCTION_instrcount_set
    __swig_getmethods__["instrcount"] = _x64dbg.FUNCTION_instrcount_get
    if _newclass:
        instrcount = _swig_property(_x64dbg.FUNCTION_instrcount_get, _x64dbg.FUNCTION_instrcount_set)

    def __init__(self):
        this = _x64dbg.new_FUNCTION()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_FUNCTION
    __del__ = lambda self: None
FUNCTION_swigregister = _x64dbg.FUNCTION_swigregister
FUNCTION_swigregister(FUNCTION)

class LOOP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LOOP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LOOP, name)
    __repr__ = _swig_repr
    __swig_setmethods__["depth"] = _x64dbg.LOOP_depth_set
    __swig_getmethods__["depth"] = _x64dbg.LOOP_depth_get
    if _newclass:
        depth = _swig_property(_x64dbg.LOOP_depth_get, _x64dbg.LOOP_depth_set)
    __swig_setmethods__["start"] = _x64dbg.LOOP_start_set
    __swig_getmethods__["start"] = _x64dbg.LOOP_start_get
    if _newclass:
        start = _swig_property(_x64dbg.LOOP_start_get, _x64dbg.LOOP_start_set)
    __swig_setmethods__["end"] = _x64dbg.LOOP_end_set
    __swig_getmethods__["end"] = _x64dbg.LOOP_end_get
    if _newclass:
        end = _swig_property(_x64dbg.LOOP_end_get, _x64dbg.LOOP_end_set)
    __swig_setmethods__["instrcount"] = _x64dbg.LOOP_instrcount_set
    __swig_getmethods__["instrcount"] = _x64dbg.LOOP_instrcount_get
    if _newclass:
        instrcount = _swig_property(_x64dbg.LOOP_instrcount_get, _x64dbg.LOOP_instrcount_set)

    def __init__(self):
        this = _x64dbg.new_LOOP()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_LOOP
    __del__ = lambda self: None
LOOP_swigregister = _x64dbg.LOOP_swigregister
LOOP_swigregister(LOOP)

class BRIDGE_ADDRINFO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRIDGE_ADDRINFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BRIDGE_ADDRINFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flags"] = _x64dbg.BRIDGE_ADDRINFO_flags_set
    __swig_getmethods__["flags"] = _x64dbg.BRIDGE_ADDRINFO_flags_get
    if _newclass:
        flags = _swig_property(_x64dbg.BRIDGE_ADDRINFO_flags_get, _x64dbg.BRIDGE_ADDRINFO_flags_set)
    __swig_setmethods__["module"] = _x64dbg.BRIDGE_ADDRINFO_module_set
    __swig_getmethods__["module"] = _x64dbg.BRIDGE_ADDRINFO_module_get
    if _newclass:
        module = _swig_property(_x64dbg.BRIDGE_ADDRINFO_module_get, _x64dbg.BRIDGE_ADDRINFO_module_set)
    __swig_setmethods__["label"] = _x64dbg.BRIDGE_ADDRINFO_label_set
    __swig_getmethods__["label"] = _x64dbg.BRIDGE_ADDRINFO_label_get
    if _newclass:
        label = _swig_property(_x64dbg.BRIDGE_ADDRINFO_label_get, _x64dbg.BRIDGE_ADDRINFO_label_set)
    __swig_setmethods__["comment"] = _x64dbg.BRIDGE_ADDRINFO_comment_set
    __swig_getmethods__["comment"] = _x64dbg.BRIDGE_ADDRINFO_comment_get
    if _newclass:
        comment = _swig_property(_x64dbg.BRIDGE_ADDRINFO_comment_get, _x64dbg.BRIDGE_ADDRINFO_comment_set)
    __swig_setmethods__["isbookmark"] = _x64dbg.BRIDGE_ADDRINFO_isbookmark_set
    __swig_getmethods__["isbookmark"] = _x64dbg.BRIDGE_ADDRINFO_isbookmark_get
    if _newclass:
        isbookmark = _swig_property(_x64dbg.BRIDGE_ADDRINFO_isbookmark_get, _x64dbg.BRIDGE_ADDRINFO_isbookmark_set)
    __swig_setmethods__["function"] = _x64dbg.BRIDGE_ADDRINFO_function_set
    __swig_getmethods__["function"] = _x64dbg.BRIDGE_ADDRINFO_function_get
    if _newclass:
        function = _swig_property(_x64dbg.BRIDGE_ADDRINFO_function_get, _x64dbg.BRIDGE_ADDRINFO_function_set)
    __swig_setmethods__["loop"] = _x64dbg.BRIDGE_ADDRINFO_loop_set
    __swig_getmethods__["loop"] = _x64dbg.BRIDGE_ADDRINFO_loop_get
    if _newclass:
        loop = _swig_property(_x64dbg.BRIDGE_ADDRINFO_loop_get, _x64dbg.BRIDGE_ADDRINFO_loop_set)
    __swig_setmethods__["args"] = _x64dbg.BRIDGE_ADDRINFO_args_set
    __swig_getmethods__["args"] = _x64dbg.BRIDGE_ADDRINFO_args_get
    if _newclass:
        args = _swig_property(_x64dbg.BRIDGE_ADDRINFO_args_get, _x64dbg.BRIDGE_ADDRINFO_args_set)

    def __init__(self):
        this = _x64dbg.new_BRIDGE_ADDRINFO()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_BRIDGE_ADDRINFO
    __del__ = lambda self: None
BRIDGE_ADDRINFO_swigregister = _x64dbg.BRIDGE_ADDRINFO_swigregister
BRIDGE_ADDRINFO_swigregister(BRIDGE_ADDRINFO)

class SYMBOLINFO_(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SYMBOLINFO_, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SYMBOLINFO_, name)
    __repr__ = _swig_repr
    __swig_setmethods__["addr"] = _x64dbg.SYMBOLINFO__addr_set
    __swig_getmethods__["addr"] = _x64dbg.SYMBOLINFO__addr_get
    if _newclass:
        addr = _swig_property(_x64dbg.SYMBOLINFO__addr_get, _x64dbg.SYMBOLINFO__addr_set)
    __swig_setmethods__["decoratedSymbol"] = _x64dbg.SYMBOLINFO__decoratedSymbol_set
    __swig_getmethods__["decoratedSymbol"] = _x64dbg.SYMBOLINFO__decoratedSymbol_get
    if _newclass:
        decoratedSymbol = _swig_property(_x64dbg.SYMBOLINFO__decoratedSymbol_get, _x64dbg.SYMBOLINFO__decoratedSymbol_set)
    __swig_setmethods__["undecoratedSymbol"] = _x64dbg.SYMBOLINFO__undecoratedSymbol_set
    __swig_getmethods__["undecoratedSymbol"] = _x64dbg.SYMBOLINFO__undecoratedSymbol_get
    if _newclass:
        undecoratedSymbol = _swig_property(_x64dbg.SYMBOLINFO__undecoratedSymbol_get, _x64dbg.SYMBOLINFO__undecoratedSymbol_set)
    __swig_setmethods__["isImported"] = _x64dbg.SYMBOLINFO__isImported_set
    __swig_getmethods__["isImported"] = _x64dbg.SYMBOLINFO__isImported_get
    if _newclass:
        isImported = _swig_property(_x64dbg.SYMBOLINFO__isImported_get, _x64dbg.SYMBOLINFO__isImported_set)

    def __init__(self):
        this = _x64dbg.new_SYMBOLINFO_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_SYMBOLINFO_
    __del__ = lambda self: None
SYMBOLINFO__swigregister = _x64dbg.SYMBOLINFO__swigregister
SYMBOLINFO__swigregister(SYMBOLINFO_)

class SYMBOLMODULEINFO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SYMBOLMODULEINFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SYMBOLMODULEINFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["base"] = _x64dbg.SYMBOLMODULEINFO_base_set
    __swig_getmethods__["base"] = _x64dbg.SYMBOLMODULEINFO_base_get
    if _newclass:
        base = _swig_property(_x64dbg.SYMBOLMODULEINFO_base_get, _x64dbg.SYMBOLMODULEINFO_base_set)
    __swig_setmethods__["name"] = _x64dbg.SYMBOLMODULEINFO_name_set
    __swig_getmethods__["name"] = _x64dbg.SYMBOLMODULEINFO_name_get
    if _newclass:
        name = _swig_property(_x64dbg.SYMBOLMODULEINFO_name_get, _x64dbg.SYMBOLMODULEINFO_name_set)

    def __init__(self):
        this = _x64dbg.new_SYMBOLMODULEINFO()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_SYMBOLMODULEINFO
    __del__ = lambda self: None
SYMBOLMODULEINFO_swigregister = _x64dbg.SYMBOLMODULEINFO_swigregister
SYMBOLMODULEINFO_swigregister(SYMBOLMODULEINFO)

class SYMBOLCBINFO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SYMBOLCBINFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SYMBOLCBINFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["base"] = _x64dbg.SYMBOLCBINFO_base_set
    __swig_getmethods__["base"] = _x64dbg.SYMBOLCBINFO_base_get
    if _newclass:
        base = _swig_property(_x64dbg.SYMBOLCBINFO_base_get, _x64dbg.SYMBOLCBINFO_base_set)
    __swig_setmethods__["cbSymbolEnum"] = _x64dbg.SYMBOLCBINFO_cbSymbolEnum_set
    __swig_getmethods__["cbSymbolEnum"] = _x64dbg.SYMBOLCBINFO_cbSymbolEnum_get
    if _newclass:
        cbSymbolEnum = _swig_property(_x64dbg.SYMBOLCBINFO_cbSymbolEnum_get, _x64dbg.SYMBOLCBINFO_cbSymbolEnum_set)
    __swig_setmethods__["user"] = _x64dbg.SYMBOLCBINFO_user_set
    __swig_getmethods__["user"] = _x64dbg.SYMBOLCBINFO_user_get
    if _newclass:
        user = _swig_property(_x64dbg.SYMBOLCBINFO_user_get, _x64dbg.SYMBOLCBINFO_user_set)

    def __init__(self):
        this = _x64dbg.new_SYMBOLCBINFO()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_SYMBOLCBINFO
    __del__ = lambda self: None
SYMBOLCBINFO_swigregister = _x64dbg.SYMBOLCBINFO_swigregister
SYMBOLCBINFO_swigregister(SYMBOLCBINFO)

class FLAGS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FLAGS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FLAGS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["c"] = _x64dbg.FLAGS_c_set
    __swig_getmethods__["c"] = _x64dbg.FLAGS_c_get
    if _newclass:
        c = _swig_property(_x64dbg.FLAGS_c_get, _x64dbg.FLAGS_c_set)
    __swig_setmethods__["p"] = _x64dbg.FLAGS_p_set
    __swig_getmethods__["p"] = _x64dbg.FLAGS_p_get
    if _newclass:
        p = _swig_property(_x64dbg.FLAGS_p_get, _x64dbg.FLAGS_p_set)
    __swig_setmethods__["a"] = _x64dbg.FLAGS_a_set
    __swig_getmethods__["a"] = _x64dbg.FLAGS_a_get
    if _newclass:
        a = _swig_property(_x64dbg.FLAGS_a_get, _x64dbg.FLAGS_a_set)
    __swig_setmethods__["z"] = _x64dbg.FLAGS_z_set
    __swig_getmethods__["z"] = _x64dbg.FLAGS_z_get
    if _newclass:
        z = _swig_property(_x64dbg.FLAGS_z_get, _x64dbg.FLAGS_z_set)
    __swig_setmethods__["s"] = _x64dbg.FLAGS_s_set
    __swig_getmethods__["s"] = _x64dbg.FLAGS_s_get
    if _newclass:
        s = _swig_property(_x64dbg.FLAGS_s_get, _x64dbg.FLAGS_s_set)
    __swig_setmethods__["t"] = _x64dbg.FLAGS_t_set
    __swig_getmethods__["t"] = _x64dbg.FLAGS_t_get
    if _newclass:
        t = _swig_property(_x64dbg.FLAGS_t_get, _x64dbg.FLAGS_t_set)
    __swig_setmethods__["i"] = _x64dbg.FLAGS_i_set
    __swig_getmethods__["i"] = _x64dbg.FLAGS_i_get
    if _newclass:
        i = _swig_property(_x64dbg.FLAGS_i_get, _x64dbg.FLAGS_i_set)
    __swig_setmethods__["d"] = _x64dbg.FLAGS_d_set
    __swig_getmethods__["d"] = _x64dbg.FLAGS_d_get
    if _newclass:
        d = _swig_property(_x64dbg.FLAGS_d_get, _x64dbg.FLAGS_d_set)
    __swig_setmethods__["o"] = _x64dbg.FLAGS_o_set
    __swig_getmethods__["o"] = _x64dbg.FLAGS_o_get
    if _newclass:
        o = _swig_property(_x64dbg.FLAGS_o_get, _x64dbg.FLAGS_o_set)

    def __init__(self):
        this = _x64dbg.new_FLAGS()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_FLAGS
    __del__ = lambda self: None
FLAGS_swigregister = _x64dbg.FLAGS_swigregister
FLAGS_swigregister(FLAGS)

class MXCSRFIELDS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MXCSRFIELDS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MXCSRFIELDS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["FZ"] = _x64dbg.MXCSRFIELDS_FZ_set
    __swig_getmethods__["FZ"] = _x64dbg.MXCSRFIELDS_FZ_get
    if _newclass:
        FZ = _swig_property(_x64dbg.MXCSRFIELDS_FZ_get, _x64dbg.MXCSRFIELDS_FZ_set)
    __swig_setmethods__["PM"] = _x64dbg.MXCSRFIELDS_PM_set
    __swig_getmethods__["PM"] = _x64dbg.MXCSRFIELDS_PM_get
    if _newclass:
        PM = _swig_property(_x64dbg.MXCSRFIELDS_PM_get, _x64dbg.MXCSRFIELDS_PM_set)
    __swig_setmethods__["UM"] = _x64dbg.MXCSRFIELDS_UM_set
    __swig_getmethods__["UM"] = _x64dbg.MXCSRFIELDS_UM_get
    if _newclass:
        UM = _swig_property(_x64dbg.MXCSRFIELDS_UM_get, _x64dbg.MXCSRFIELDS_UM_set)
    __swig_setmethods__["OM"] = _x64dbg.MXCSRFIELDS_OM_set
    __swig_getmethods__["OM"] = _x64dbg.MXCSRFIELDS_OM_get
    if _newclass:
        OM = _swig_property(_x64dbg.MXCSRFIELDS_OM_get, _x64dbg.MXCSRFIELDS_OM_set)
    __swig_setmethods__["ZM"] = _x64dbg.MXCSRFIELDS_ZM_set
    __swig_getmethods__["ZM"] = _x64dbg.MXCSRFIELDS_ZM_get
    if _newclass:
        ZM = _swig_property(_x64dbg.MXCSRFIELDS_ZM_get, _x64dbg.MXCSRFIELDS_ZM_set)
    __swig_setmethods__["IM"] = _x64dbg.MXCSRFIELDS_IM_set
    __swig_getmethods__["IM"] = _x64dbg.MXCSRFIELDS_IM_get
    if _newclass:
        IM = _swig_property(_x64dbg.MXCSRFIELDS_IM_get, _x64dbg.MXCSRFIELDS_IM_set)
    __swig_setmethods__["DM"] = _x64dbg.MXCSRFIELDS_DM_set
    __swig_getmethods__["DM"] = _x64dbg.MXCSRFIELDS_DM_get
    if _newclass:
        DM = _swig_property(_x64dbg.MXCSRFIELDS_DM_get, _x64dbg.MXCSRFIELDS_DM_set)
    __swig_setmethods__["DAZ"] = _x64dbg.MXCSRFIELDS_DAZ_set
    __swig_getmethods__["DAZ"] = _x64dbg.MXCSRFIELDS_DAZ_get
    if _newclass:
        DAZ = _swig_property(_x64dbg.MXCSRFIELDS_DAZ_get, _x64dbg.MXCSRFIELDS_DAZ_set)
    __swig_setmethods__["PE"] = _x64dbg.MXCSRFIELDS_PE_set
    __swig_getmethods__["PE"] = _x64dbg.MXCSRFIELDS_PE_get
    if _newclass:
        PE = _swig_property(_x64dbg.MXCSRFIELDS_PE_get, _x64dbg.MXCSRFIELDS_PE_set)
    __swig_setmethods__["UE"] = _x64dbg.MXCSRFIELDS_UE_set
    __swig_getmethods__["UE"] = _x64dbg.MXCSRFIELDS_UE_get
    if _newclass:
        UE = _swig_property(_x64dbg.MXCSRFIELDS_UE_get, _x64dbg.MXCSRFIELDS_UE_set)
    __swig_setmethods__["OE"] = _x64dbg.MXCSRFIELDS_OE_set
    __swig_getmethods__["OE"] = _x64dbg.MXCSRFIELDS_OE_get
    if _newclass:
        OE = _swig_property(_x64dbg.MXCSRFIELDS_OE_get, _x64dbg.MXCSRFIELDS_OE_set)
    __swig_setmethods__["ZE"] = _x64dbg.MXCSRFIELDS_ZE_set
    __swig_getmethods__["ZE"] = _x64dbg.MXCSRFIELDS_ZE_get
    if _newclass:
        ZE = _swig_property(_x64dbg.MXCSRFIELDS_ZE_get, _x64dbg.MXCSRFIELDS_ZE_set)
    __swig_setmethods__["DE"] = _x64dbg.MXCSRFIELDS_DE_set
    __swig_getmethods__["DE"] = _x64dbg.MXCSRFIELDS_DE_get
    if _newclass:
        DE = _swig_property(_x64dbg.MXCSRFIELDS_DE_get, _x64dbg.MXCSRFIELDS_DE_set)
    __swig_setmethods__["IE"] = _x64dbg.MXCSRFIELDS_IE_set
    __swig_getmethods__["IE"] = _x64dbg.MXCSRFIELDS_IE_get
    if _newclass:
        IE = _swig_property(_x64dbg.MXCSRFIELDS_IE_get, _x64dbg.MXCSRFIELDS_IE_set)
    __swig_setmethods__["RC"] = _x64dbg.MXCSRFIELDS_RC_set
    __swig_getmethods__["RC"] = _x64dbg.MXCSRFIELDS_RC_get
    if _newclass:
        RC = _swig_property(_x64dbg.MXCSRFIELDS_RC_get, _x64dbg.MXCSRFIELDS_RC_set)

    def __init__(self):
        this = _x64dbg.new_MXCSRFIELDS()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_MXCSRFIELDS
    __del__ = lambda self: None
MXCSRFIELDS_swigregister = _x64dbg.MXCSRFIELDS_swigregister
MXCSRFIELDS_swigregister(MXCSRFIELDS)

class X87STATUSWORDFIELDS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, X87STATUSWORDFIELDS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, X87STATUSWORDFIELDS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["B"] = _x64dbg.X87STATUSWORDFIELDS_B_set
    __swig_getmethods__["B"] = _x64dbg.X87STATUSWORDFIELDS_B_get
    if _newclass:
        B = _swig_property(_x64dbg.X87STATUSWORDFIELDS_B_get, _x64dbg.X87STATUSWORDFIELDS_B_set)
    __swig_setmethods__["C3"] = _x64dbg.X87STATUSWORDFIELDS_C3_set
    __swig_getmethods__["C3"] = _x64dbg.X87STATUSWORDFIELDS_C3_get
    if _newclass:
        C3 = _swig_property(_x64dbg.X87STATUSWORDFIELDS_C3_get, _x64dbg.X87STATUSWORDFIELDS_C3_set)
    __swig_setmethods__["C2"] = _x64dbg.X87STATUSWORDFIELDS_C2_set
    __swig_getmethods__["C2"] = _x64dbg.X87STATUSWORDFIELDS_C2_get
    if _newclass:
        C2 = _swig_property(_x64dbg.X87STATUSWORDFIELDS_C2_get, _x64dbg.X87STATUSWORDFIELDS_C2_set)
    __swig_setmethods__["C1"] = _x64dbg.X87STATUSWORDFIELDS_C1_set
    __swig_getmethods__["C1"] = _x64dbg.X87STATUSWORDFIELDS_C1_get
    if _newclass:
        C1 = _swig_property(_x64dbg.X87STATUSWORDFIELDS_C1_get, _x64dbg.X87STATUSWORDFIELDS_C1_set)
    __swig_setmethods__["C0"] = _x64dbg.X87STATUSWORDFIELDS_C0_set
    __swig_getmethods__["C0"] = _x64dbg.X87STATUSWORDFIELDS_C0_get
    if _newclass:
        C0 = _swig_property(_x64dbg.X87STATUSWORDFIELDS_C0_get, _x64dbg.X87STATUSWORDFIELDS_C0_set)
    __swig_setmethods__["ES"] = _x64dbg.X87STATUSWORDFIELDS_ES_set
    __swig_getmethods__["ES"] = _x64dbg.X87STATUSWORDFIELDS_ES_get
    if _newclass:
        ES = _swig_property(_x64dbg.X87STATUSWORDFIELDS_ES_get, _x64dbg.X87STATUSWORDFIELDS_ES_set)
    __swig_setmethods__["SF"] = _x64dbg.X87STATUSWORDFIELDS_SF_set
    __swig_getmethods__["SF"] = _x64dbg.X87STATUSWORDFIELDS_SF_get
    if _newclass:
        SF = _swig_property(_x64dbg.X87STATUSWORDFIELDS_SF_get, _x64dbg.X87STATUSWORDFIELDS_SF_set)
    __swig_setmethods__["P"] = _x64dbg.X87STATUSWORDFIELDS_P_set
    __swig_getmethods__["P"] = _x64dbg.X87STATUSWORDFIELDS_P_get
    if _newclass:
        P = _swig_property(_x64dbg.X87STATUSWORDFIELDS_P_get, _x64dbg.X87STATUSWORDFIELDS_P_set)
    __swig_setmethods__["U"] = _x64dbg.X87STATUSWORDFIELDS_U_set
    __swig_getmethods__["U"] = _x64dbg.X87STATUSWORDFIELDS_U_get
    if _newclass:
        U = _swig_property(_x64dbg.X87STATUSWORDFIELDS_U_get, _x64dbg.X87STATUSWORDFIELDS_U_set)
    __swig_setmethods__["O"] = _x64dbg.X87STATUSWORDFIELDS_O_set
    __swig_getmethods__["O"] = _x64dbg.X87STATUSWORDFIELDS_O_get
    if _newclass:
        O = _swig_property(_x64dbg.X87STATUSWORDFIELDS_O_get, _x64dbg.X87STATUSWORDFIELDS_O_set)
    __swig_setmethods__["Z"] = _x64dbg.X87STATUSWORDFIELDS_Z_set
    __swig_getmethods__["Z"] = _x64dbg.X87STATUSWORDFIELDS_Z_get
    if _newclass:
        Z = _swig_property(_x64dbg.X87STATUSWORDFIELDS_Z_get, _x64dbg.X87STATUSWORDFIELDS_Z_set)
    __swig_setmethods__["D"] = _x64dbg.X87STATUSWORDFIELDS_D_set
    __swig_getmethods__["D"] = _x64dbg.X87STATUSWORDFIELDS_D_get
    if _newclass:
        D = _swig_property(_x64dbg.X87STATUSWORDFIELDS_D_get, _x64dbg.X87STATUSWORDFIELDS_D_set)
    __swig_setmethods__["I"] = _x64dbg.X87STATUSWORDFIELDS_I_set
    __swig_getmethods__["I"] = _x64dbg.X87STATUSWORDFIELDS_I_get
    if _newclass:
        I = _swig_property(_x64dbg.X87STATUSWORDFIELDS_I_get, _x64dbg.X87STATUSWORDFIELDS_I_set)
    __swig_setmethods__["TOP"] = _x64dbg.X87STATUSWORDFIELDS_TOP_set
    __swig_getmethods__["TOP"] = _x64dbg.X87STATUSWORDFIELDS_TOP_get
    if _newclass:
        TOP = _swig_property(_x64dbg.X87STATUSWORDFIELDS_TOP_get, _x64dbg.X87STATUSWORDFIELDS_TOP_set)

    def __init__(self):
        this = _x64dbg.new_X87STATUSWORDFIELDS()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_X87STATUSWORDFIELDS
    __del__ = lambda self: None
X87STATUSWORDFIELDS_swigregister = _x64dbg.X87STATUSWORDFIELDS_swigregister
X87STATUSWORDFIELDS_swigregister(X87STATUSWORDFIELDS)

class X87CONTROLWORDFIELDS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, X87CONTROLWORDFIELDS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, X87CONTROLWORDFIELDS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["IC"] = _x64dbg.X87CONTROLWORDFIELDS_IC_set
    __swig_getmethods__["IC"] = _x64dbg.X87CONTROLWORDFIELDS_IC_get
    if _newclass:
        IC = _swig_property(_x64dbg.X87CONTROLWORDFIELDS_IC_get, _x64dbg.X87CONTROLWORDFIELDS_IC_set)
    __swig_setmethods__["IEM"] = _x64dbg.X87CONTROLWORDFIELDS_IEM_set
    __swig_getmethods__["IEM"] = _x64dbg.X87CONTROLWORDFIELDS_IEM_get
    if _newclass:
        IEM = _swig_property(_x64dbg.X87CONTROLWORDFIELDS_IEM_get, _x64dbg.X87CONTROLWORDFIELDS_IEM_set)
    __swig_setmethods__["PM"] = _x64dbg.X87CONTROLWORDFIELDS_PM_set
    __swig_getmethods__["PM"] = _x64dbg.X87CONTROLWORDFIELDS_PM_get
    if _newclass:
        PM = _swig_property(_x64dbg.X87CONTROLWORDFIELDS_PM_get, _x64dbg.X87CONTROLWORDFIELDS_PM_set)
    __swig_setmethods__["UM"] = _x64dbg.X87CONTROLWORDFIELDS_UM_set
    __swig_getmethods__["UM"] = _x64dbg.X87CONTROLWORDFIELDS_UM_get
    if _newclass:
        UM = _swig_property(_x64dbg.X87CONTROLWORDFIELDS_UM_get, _x64dbg.X87CONTROLWORDFIELDS_UM_set)
    __swig_setmethods__["OM"] = _x64dbg.X87CONTROLWORDFIELDS_OM_set
    __swig_getmethods__["OM"] = _x64dbg.X87CONTROLWORDFIELDS_OM_get
    if _newclass:
        OM = _swig_property(_x64dbg.X87CONTROLWORDFIELDS_OM_get, _x64dbg.X87CONTROLWORDFIELDS_OM_set)
    __swig_setmethods__["ZM"] = _x64dbg.X87CONTROLWORDFIELDS_ZM_set
    __swig_getmethods__["ZM"] = _x64dbg.X87CONTROLWORDFIELDS_ZM_get
    if _newclass:
        ZM = _swig_property(_x64dbg.X87CONTROLWORDFIELDS_ZM_get, _x64dbg.X87CONTROLWORDFIELDS_ZM_set)
    __swig_setmethods__["DM"] = _x64dbg.X87CONTROLWORDFIELDS_DM_set
    __swig_getmethods__["DM"] = _x64dbg.X87CONTROLWORDFIELDS_DM_get
    if _newclass:
        DM = _swig_property(_x64dbg.X87CONTROLWORDFIELDS_DM_get, _x64dbg.X87CONTROLWORDFIELDS_DM_set)
    __swig_setmethods__["IM"] = _x64dbg.X87CONTROLWORDFIELDS_IM_set
    __swig_getmethods__["IM"] = _x64dbg.X87CONTROLWORDFIELDS_IM_get
    if _newclass:
        IM = _swig_property(_x64dbg.X87CONTROLWORDFIELDS_IM_get, _x64dbg.X87CONTROLWORDFIELDS_IM_set)
    __swig_setmethods__["RC"] = _x64dbg.X87CONTROLWORDFIELDS_RC_set
    __swig_getmethods__["RC"] = _x64dbg.X87CONTROLWORDFIELDS_RC_get
    if _newclass:
        RC = _swig_property(_x64dbg.X87CONTROLWORDFIELDS_RC_get, _x64dbg.X87CONTROLWORDFIELDS_RC_set)
    __swig_setmethods__["PC"] = _x64dbg.X87CONTROLWORDFIELDS_PC_set
    __swig_getmethods__["PC"] = _x64dbg.X87CONTROLWORDFIELDS_PC_get
    if _newclass:
        PC = _swig_property(_x64dbg.X87CONTROLWORDFIELDS_PC_get, _x64dbg.X87CONTROLWORDFIELDS_PC_set)

    def __init__(self):
        this = _x64dbg.new_X87CONTROLWORDFIELDS()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_X87CONTROLWORDFIELDS
    __del__ = lambda self: None
X87CONTROLWORDFIELDS_swigregister = _x64dbg.X87CONTROLWORDFIELDS_swigregister
X87CONTROLWORDFIELDS_swigregister(X87CONTROLWORDFIELDS)

class XMMREGISTER(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMMREGISTER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMMREGISTER, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Low"] = _x64dbg.XMMREGISTER_Low_set
    __swig_getmethods__["Low"] = _x64dbg.XMMREGISTER_Low_get
    if _newclass:
        Low = _swig_property(_x64dbg.XMMREGISTER_Low_get, _x64dbg.XMMREGISTER_Low_set)
    __swig_setmethods__["High"] = _x64dbg.XMMREGISTER_High_set
    __swig_getmethods__["High"] = _x64dbg.XMMREGISTER_High_get
    if _newclass:
        High = _swig_property(_x64dbg.XMMREGISTER_High_get, _x64dbg.XMMREGISTER_High_set)

    def __init__(self):
        this = _x64dbg.new_XMMREGISTER()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_XMMREGISTER
    __del__ = lambda self: None
XMMREGISTER_swigregister = _x64dbg.XMMREGISTER_swigregister
XMMREGISTER_swigregister(XMMREGISTER)

class YMMREGISTER(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, YMMREGISTER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, YMMREGISTER, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Low"] = _x64dbg.YMMREGISTER_Low_set
    __swig_getmethods__["Low"] = _x64dbg.YMMREGISTER_Low_get
    if _newclass:
        Low = _swig_property(_x64dbg.YMMREGISTER_Low_get, _x64dbg.YMMREGISTER_Low_set)
    __swig_setmethods__["High"] = _x64dbg.YMMREGISTER_High_set
    __swig_getmethods__["High"] = _x64dbg.YMMREGISTER_High_get
    if _newclass:
        High = _swig_property(_x64dbg.YMMREGISTER_High_get, _x64dbg.YMMREGISTER_High_set)

    def __init__(self):
        this = _x64dbg.new_YMMREGISTER()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_YMMREGISTER
    __del__ = lambda self: None
YMMREGISTER_swigregister = _x64dbg.YMMREGISTER_swigregister
YMMREGISTER_swigregister(YMMREGISTER)

class X87FPUREGISTER(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, X87FPUREGISTER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, X87FPUREGISTER, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _x64dbg.X87FPUREGISTER_data_set
    __swig_getmethods__["data"] = _x64dbg.X87FPUREGISTER_data_get
    if _newclass:
        data = _swig_property(_x64dbg.X87FPUREGISTER_data_get, _x64dbg.X87FPUREGISTER_data_set)
    __swig_setmethods__["st_value"] = _x64dbg.X87FPUREGISTER_st_value_set
    __swig_getmethods__["st_value"] = _x64dbg.X87FPUREGISTER_st_value_get
    if _newclass:
        st_value = _swig_property(_x64dbg.X87FPUREGISTER_st_value_get, _x64dbg.X87FPUREGISTER_st_value_set)
    __swig_setmethods__["tag"] = _x64dbg.X87FPUREGISTER_tag_set
    __swig_getmethods__["tag"] = _x64dbg.X87FPUREGISTER_tag_get
    if _newclass:
        tag = _swig_property(_x64dbg.X87FPUREGISTER_tag_get, _x64dbg.X87FPUREGISTER_tag_set)

    def __init__(self):
        this = _x64dbg.new_X87FPUREGISTER()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_X87FPUREGISTER
    __del__ = lambda self: None
X87FPUREGISTER_swigregister = _x64dbg.X87FPUREGISTER_swigregister
X87FPUREGISTER_swigregister(X87FPUREGISTER)

class X87FPU(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, X87FPU, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, X87FPU, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ControlWord"] = _x64dbg.X87FPU_ControlWord_set
    __swig_getmethods__["ControlWord"] = _x64dbg.X87FPU_ControlWord_get
    if _newclass:
        ControlWord = _swig_property(_x64dbg.X87FPU_ControlWord_get, _x64dbg.X87FPU_ControlWord_set)
    __swig_setmethods__["StatusWord"] = _x64dbg.X87FPU_StatusWord_set
    __swig_getmethods__["StatusWord"] = _x64dbg.X87FPU_StatusWord_get
    if _newclass:
        StatusWord = _swig_property(_x64dbg.X87FPU_StatusWord_get, _x64dbg.X87FPU_StatusWord_set)
    __swig_setmethods__["TagWord"] = _x64dbg.X87FPU_TagWord_set
    __swig_getmethods__["TagWord"] = _x64dbg.X87FPU_TagWord_get
    if _newclass:
        TagWord = _swig_property(_x64dbg.X87FPU_TagWord_get, _x64dbg.X87FPU_TagWord_set)
    __swig_setmethods__["ErrorOffset"] = _x64dbg.X87FPU_ErrorOffset_set
    __swig_getmethods__["ErrorOffset"] = _x64dbg.X87FPU_ErrorOffset_get
    if _newclass:
        ErrorOffset = _swig_property(_x64dbg.X87FPU_ErrorOffset_get, _x64dbg.X87FPU_ErrorOffset_set)
    __swig_setmethods__["ErrorSelector"] = _x64dbg.X87FPU_ErrorSelector_set
    __swig_getmethods__["ErrorSelector"] = _x64dbg.X87FPU_ErrorSelector_get
    if _newclass:
        ErrorSelector = _swig_property(_x64dbg.X87FPU_ErrorSelector_get, _x64dbg.X87FPU_ErrorSelector_set)
    __swig_setmethods__["DataOffset"] = _x64dbg.X87FPU_DataOffset_set
    __swig_getmethods__["DataOffset"] = _x64dbg.X87FPU_DataOffset_get
    if _newclass:
        DataOffset = _swig_property(_x64dbg.X87FPU_DataOffset_get, _x64dbg.X87FPU_DataOffset_set)
    __swig_setmethods__["DataSelector"] = _x64dbg.X87FPU_DataSelector_set
    __swig_getmethods__["DataSelector"] = _x64dbg.X87FPU_DataSelector_get
    if _newclass:
        DataSelector = _swig_property(_x64dbg.X87FPU_DataSelector_get, _x64dbg.X87FPU_DataSelector_set)
    __swig_setmethods__["Cr0NpxState"] = _x64dbg.X87FPU_Cr0NpxState_set
    __swig_getmethods__["Cr0NpxState"] = _x64dbg.X87FPU_Cr0NpxState_get
    if _newclass:
        Cr0NpxState = _swig_property(_x64dbg.X87FPU_Cr0NpxState_get, _x64dbg.X87FPU_Cr0NpxState_set)

    def __init__(self):
        this = _x64dbg.new_X87FPU()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_X87FPU
    __del__ = lambda self: None
X87FPU_swigregister = _x64dbg.X87FPU_swigregister
X87FPU_swigregister(X87FPU)

class REGISTERCONTEXT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, REGISTERCONTEXT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, REGISTERCONTEXT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cax"] = _x64dbg.REGISTERCONTEXT_cax_set
    __swig_getmethods__["cax"] = _x64dbg.REGISTERCONTEXT_cax_get
    if _newclass:
        cax = _swig_property(_x64dbg.REGISTERCONTEXT_cax_get, _x64dbg.REGISTERCONTEXT_cax_set)
    __swig_setmethods__["ccx"] = _x64dbg.REGISTERCONTEXT_ccx_set
    __swig_getmethods__["ccx"] = _x64dbg.REGISTERCONTEXT_ccx_get
    if _newclass:
        ccx = _swig_property(_x64dbg.REGISTERCONTEXT_ccx_get, _x64dbg.REGISTERCONTEXT_ccx_set)
    __swig_setmethods__["cdx"] = _x64dbg.REGISTERCONTEXT_cdx_set
    __swig_getmethods__["cdx"] = _x64dbg.REGISTERCONTEXT_cdx_get
    if _newclass:
        cdx = _swig_property(_x64dbg.REGISTERCONTEXT_cdx_get, _x64dbg.REGISTERCONTEXT_cdx_set)
    __swig_setmethods__["cbx"] = _x64dbg.REGISTERCONTEXT_cbx_set
    __swig_getmethods__["cbx"] = _x64dbg.REGISTERCONTEXT_cbx_get
    if _newclass:
        cbx = _swig_property(_x64dbg.REGISTERCONTEXT_cbx_get, _x64dbg.REGISTERCONTEXT_cbx_set)
    __swig_setmethods__["csp"] = _x64dbg.REGISTERCONTEXT_csp_set
    __swig_getmethods__["csp"] = _x64dbg.REGISTERCONTEXT_csp_get
    if _newclass:
        csp = _swig_property(_x64dbg.REGISTERCONTEXT_csp_get, _x64dbg.REGISTERCONTEXT_csp_set)
    __swig_setmethods__["cbp"] = _x64dbg.REGISTERCONTEXT_cbp_set
    __swig_getmethods__["cbp"] = _x64dbg.REGISTERCONTEXT_cbp_get
    if _newclass:
        cbp = _swig_property(_x64dbg.REGISTERCONTEXT_cbp_get, _x64dbg.REGISTERCONTEXT_cbp_set)
    __swig_setmethods__["csi"] = _x64dbg.REGISTERCONTEXT_csi_set
    __swig_getmethods__["csi"] = _x64dbg.REGISTERCONTEXT_csi_get
    if _newclass:
        csi = _swig_property(_x64dbg.REGISTERCONTEXT_csi_get, _x64dbg.REGISTERCONTEXT_csi_set)
    __swig_setmethods__["cdi"] = _x64dbg.REGISTERCONTEXT_cdi_set
    __swig_getmethods__["cdi"] = _x64dbg.REGISTERCONTEXT_cdi_get
    if _newclass:
        cdi = _swig_property(_x64dbg.REGISTERCONTEXT_cdi_get, _x64dbg.REGISTERCONTEXT_cdi_set)
    __swig_setmethods__["r8"] = _x64dbg.REGISTERCONTEXT_r8_set
    __swig_getmethods__["r8"] = _x64dbg.REGISTERCONTEXT_r8_get
    if _newclass:
        r8 = _swig_property(_x64dbg.REGISTERCONTEXT_r8_get, _x64dbg.REGISTERCONTEXT_r8_set)
    __swig_setmethods__["r9"] = _x64dbg.REGISTERCONTEXT_r9_set
    __swig_getmethods__["r9"] = _x64dbg.REGISTERCONTEXT_r9_get
    if _newclass:
        r9 = _swig_property(_x64dbg.REGISTERCONTEXT_r9_get, _x64dbg.REGISTERCONTEXT_r9_set)
    __swig_setmethods__["r10"] = _x64dbg.REGISTERCONTEXT_r10_set
    __swig_getmethods__["r10"] = _x64dbg.REGISTERCONTEXT_r10_get
    if _newclass:
        r10 = _swig_property(_x64dbg.REGISTERCONTEXT_r10_get, _x64dbg.REGISTERCONTEXT_r10_set)
    __swig_setmethods__["r11"] = _x64dbg.REGISTERCONTEXT_r11_set
    __swig_getmethods__["r11"] = _x64dbg.REGISTERCONTEXT_r11_get
    if _newclass:
        r11 = _swig_property(_x64dbg.REGISTERCONTEXT_r11_get, _x64dbg.REGISTERCONTEXT_r11_set)
    __swig_setmethods__["r12"] = _x64dbg.REGISTERCONTEXT_r12_set
    __swig_getmethods__["r12"] = _x64dbg.REGISTERCONTEXT_r12_get
    if _newclass:
        r12 = _swig_property(_x64dbg.REGISTERCONTEXT_r12_get, _x64dbg.REGISTERCONTEXT_r12_set)
    __swig_setmethods__["r13"] = _x64dbg.REGISTERCONTEXT_r13_set
    __swig_getmethods__["r13"] = _x64dbg.REGISTERCONTEXT_r13_get
    if _newclass:
        r13 = _swig_property(_x64dbg.REGISTERCONTEXT_r13_get, _x64dbg.REGISTERCONTEXT_r13_set)
    __swig_setmethods__["r14"] = _x64dbg.REGISTERCONTEXT_r14_set
    __swig_getmethods__["r14"] = _x64dbg.REGISTERCONTEXT_r14_get
    if _newclass:
        r14 = _swig_property(_x64dbg.REGISTERCONTEXT_r14_get, _x64dbg.REGISTERCONTEXT_r14_set)
    __swig_setmethods__["r15"] = _x64dbg.REGISTERCONTEXT_r15_set
    __swig_getmethods__["r15"] = _x64dbg.REGISTERCONTEXT_r15_get
    if _newclass:
        r15 = _swig_property(_x64dbg.REGISTERCONTEXT_r15_get, _x64dbg.REGISTERCONTEXT_r15_set)
    __swig_setmethods__["cip"] = _x64dbg.REGISTERCONTEXT_cip_set
    __swig_getmethods__["cip"] = _x64dbg.REGISTERCONTEXT_cip_get
    if _newclass:
        cip = _swig_property(_x64dbg.REGISTERCONTEXT_cip_get, _x64dbg.REGISTERCONTEXT_cip_set)
    __swig_setmethods__["eflags"] = _x64dbg.REGISTERCONTEXT_eflags_set
    __swig_getmethods__["eflags"] = _x64dbg.REGISTERCONTEXT_eflags_get
    if _newclass:
        eflags = _swig_property(_x64dbg.REGISTERCONTEXT_eflags_get, _x64dbg.REGISTERCONTEXT_eflags_set)
    __swig_setmethods__["gs"] = _x64dbg.REGISTERCONTEXT_gs_set
    __swig_getmethods__["gs"] = _x64dbg.REGISTERCONTEXT_gs_get
    if _newclass:
        gs = _swig_property(_x64dbg.REGISTERCONTEXT_gs_get, _x64dbg.REGISTERCONTEXT_gs_set)
    __swig_setmethods__["fs"] = _x64dbg.REGISTERCONTEXT_fs_set
    __swig_getmethods__["fs"] = _x64dbg.REGISTERCONTEXT_fs_get
    if _newclass:
        fs = _swig_property(_x64dbg.REGISTERCONTEXT_fs_get, _x64dbg.REGISTERCONTEXT_fs_set)
    __swig_setmethods__["es"] = _x64dbg.REGISTERCONTEXT_es_set
    __swig_getmethods__["es"] = _x64dbg.REGISTERCONTEXT_es_get
    if _newclass:
        es = _swig_property(_x64dbg.REGISTERCONTEXT_es_get, _x64dbg.REGISTERCONTEXT_es_set)
    __swig_setmethods__["ds"] = _x64dbg.REGISTERCONTEXT_ds_set
    __swig_getmethods__["ds"] = _x64dbg.REGISTERCONTEXT_ds_get
    if _newclass:
        ds = _swig_property(_x64dbg.REGISTERCONTEXT_ds_get, _x64dbg.REGISTERCONTEXT_ds_set)
    __swig_setmethods__["cs"] = _x64dbg.REGISTERCONTEXT_cs_set
    __swig_getmethods__["cs"] = _x64dbg.REGISTERCONTEXT_cs_get
    if _newclass:
        cs = _swig_property(_x64dbg.REGISTERCONTEXT_cs_get, _x64dbg.REGISTERCONTEXT_cs_set)
    __swig_setmethods__["ss"] = _x64dbg.REGISTERCONTEXT_ss_set
    __swig_getmethods__["ss"] = _x64dbg.REGISTERCONTEXT_ss_get
    if _newclass:
        ss = _swig_property(_x64dbg.REGISTERCONTEXT_ss_get, _x64dbg.REGISTERCONTEXT_ss_set)
    __swig_setmethods__["dr0"] = _x64dbg.REGISTERCONTEXT_dr0_set
    __swig_getmethods__["dr0"] = _x64dbg.REGISTERCONTEXT_dr0_get
    if _newclass:
        dr0 = _swig_property(_x64dbg.REGISTERCONTEXT_dr0_get, _x64dbg.REGISTERCONTEXT_dr0_set)
    __swig_setmethods__["dr1"] = _x64dbg.REGISTERCONTEXT_dr1_set
    __swig_getmethods__["dr1"] = _x64dbg.REGISTERCONTEXT_dr1_get
    if _newclass:
        dr1 = _swig_property(_x64dbg.REGISTERCONTEXT_dr1_get, _x64dbg.REGISTERCONTEXT_dr1_set)
    __swig_setmethods__["dr2"] = _x64dbg.REGISTERCONTEXT_dr2_set
    __swig_getmethods__["dr2"] = _x64dbg.REGISTERCONTEXT_dr2_get
    if _newclass:
        dr2 = _swig_property(_x64dbg.REGISTERCONTEXT_dr2_get, _x64dbg.REGISTERCONTEXT_dr2_set)
    __swig_setmethods__["dr3"] = _x64dbg.REGISTERCONTEXT_dr3_set
    __swig_getmethods__["dr3"] = _x64dbg.REGISTERCONTEXT_dr3_get
    if _newclass:
        dr3 = _swig_property(_x64dbg.REGISTERCONTEXT_dr3_get, _x64dbg.REGISTERCONTEXT_dr3_set)
    __swig_setmethods__["dr6"] = _x64dbg.REGISTERCONTEXT_dr6_set
    __swig_getmethods__["dr6"] = _x64dbg.REGISTERCONTEXT_dr6_get
    if _newclass:
        dr6 = _swig_property(_x64dbg.REGISTERCONTEXT_dr6_get, _x64dbg.REGISTERCONTEXT_dr6_set)
    __swig_setmethods__["dr7"] = _x64dbg.REGISTERCONTEXT_dr7_set
    __swig_getmethods__["dr7"] = _x64dbg.REGISTERCONTEXT_dr7_get
    if _newclass:
        dr7 = _swig_property(_x64dbg.REGISTERCONTEXT_dr7_get, _x64dbg.REGISTERCONTEXT_dr7_set)
    __swig_setmethods__["RegisterArea"] = _x64dbg.REGISTERCONTEXT_RegisterArea_set
    __swig_getmethods__["RegisterArea"] = _x64dbg.REGISTERCONTEXT_RegisterArea_get
    if _newclass:
        RegisterArea = _swig_property(_x64dbg.REGISTERCONTEXT_RegisterArea_get, _x64dbg.REGISTERCONTEXT_RegisterArea_set)
    __swig_setmethods__["x87fpu"] = _x64dbg.REGISTERCONTEXT_x87fpu_set
    __swig_getmethods__["x87fpu"] = _x64dbg.REGISTERCONTEXT_x87fpu_get
    if _newclass:
        x87fpu = _swig_property(_x64dbg.REGISTERCONTEXT_x87fpu_get, _x64dbg.REGISTERCONTEXT_x87fpu_set)
    __swig_setmethods__["MxCsr"] = _x64dbg.REGISTERCONTEXT_MxCsr_set
    __swig_getmethods__["MxCsr"] = _x64dbg.REGISTERCONTEXT_MxCsr_get
    if _newclass:
        MxCsr = _swig_property(_x64dbg.REGISTERCONTEXT_MxCsr_get, _x64dbg.REGISTERCONTEXT_MxCsr_set)
    __swig_setmethods__["XmmRegisters"] = _x64dbg.REGISTERCONTEXT_XmmRegisters_set
    __swig_getmethods__["XmmRegisters"] = _x64dbg.REGISTERCONTEXT_XmmRegisters_get
    if _newclass:
        XmmRegisters = _swig_property(_x64dbg.REGISTERCONTEXT_XmmRegisters_get, _x64dbg.REGISTERCONTEXT_XmmRegisters_set)
    __swig_setmethods__["YmmRegisters"] = _x64dbg.REGISTERCONTEXT_YmmRegisters_set
    __swig_getmethods__["YmmRegisters"] = _x64dbg.REGISTERCONTEXT_YmmRegisters_get
    if _newclass:
        YmmRegisters = _swig_property(_x64dbg.REGISTERCONTEXT_YmmRegisters_get, _x64dbg.REGISTERCONTEXT_YmmRegisters_set)

    def __init__(self):
        this = _x64dbg.new_REGISTERCONTEXT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_REGISTERCONTEXT
    __del__ = lambda self: None
REGISTERCONTEXT_swigregister = _x64dbg.REGISTERCONTEXT_swigregister
REGISTERCONTEXT_swigregister(REGISTERCONTEXT)

class LASTERROR(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LASTERROR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LASTERROR, name)
    __repr__ = _swig_repr
    __swig_setmethods__["code"] = _x64dbg.LASTERROR_code_set
    __swig_getmethods__["code"] = _x64dbg.LASTERROR_code_get
    if _newclass:
        code = _swig_property(_x64dbg.LASTERROR_code_get, _x64dbg.LASTERROR_code_set)
    __swig_setmethods__["name"] = _x64dbg.LASTERROR_name_set
    __swig_getmethods__["name"] = _x64dbg.LASTERROR_name_get
    if _newclass:
        name = _swig_property(_x64dbg.LASTERROR_name_get, _x64dbg.LASTERROR_name_set)

    def __init__(self):
        this = _x64dbg.new_LASTERROR()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_LASTERROR
    __del__ = lambda self: None
LASTERROR_swigregister = _x64dbg.LASTERROR_swigregister
LASTERROR_swigregister(LASTERROR)

class REGDUMP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, REGDUMP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, REGDUMP, name)
    __repr__ = _swig_repr
    __swig_setmethods__["regcontext"] = _x64dbg.REGDUMP_regcontext_set
    __swig_getmethods__["regcontext"] = _x64dbg.REGDUMP_regcontext_get
    if _newclass:
        regcontext = _swig_property(_x64dbg.REGDUMP_regcontext_get, _x64dbg.REGDUMP_regcontext_set)
    __swig_setmethods__["flags"] = _x64dbg.REGDUMP_flags_set
    __swig_getmethods__["flags"] = _x64dbg.REGDUMP_flags_get
    if _newclass:
        flags = _swig_property(_x64dbg.REGDUMP_flags_get, _x64dbg.REGDUMP_flags_set)
    __swig_setmethods__["x87FPURegisters"] = _x64dbg.REGDUMP_x87FPURegisters_set
    __swig_getmethods__["x87FPURegisters"] = _x64dbg.REGDUMP_x87FPURegisters_get
    if _newclass:
        x87FPURegisters = _swig_property(_x64dbg.REGDUMP_x87FPURegisters_get, _x64dbg.REGDUMP_x87FPURegisters_set)
    __swig_setmethods__["mmx"] = _x64dbg.REGDUMP_mmx_set
    __swig_getmethods__["mmx"] = _x64dbg.REGDUMP_mmx_get
    if _newclass:
        mmx = _swig_property(_x64dbg.REGDUMP_mmx_get, _x64dbg.REGDUMP_mmx_set)
    __swig_setmethods__["MxCsrFields"] = _x64dbg.REGDUMP_MxCsrFields_set
    __swig_getmethods__["MxCsrFields"] = _x64dbg.REGDUMP_MxCsrFields_get
    if _newclass:
        MxCsrFields = _swig_property(_x64dbg.REGDUMP_MxCsrFields_get, _x64dbg.REGDUMP_MxCsrFields_set)
    __swig_setmethods__["x87StatusWordFields"] = _x64dbg.REGDUMP_x87StatusWordFields_set
    __swig_getmethods__["x87StatusWordFields"] = _x64dbg.REGDUMP_x87StatusWordFields_get
    if _newclass:
        x87StatusWordFields = _swig_property(_x64dbg.REGDUMP_x87StatusWordFields_get, _x64dbg.REGDUMP_x87StatusWordFields_set)
    __swig_setmethods__["x87ControlWordFields"] = _x64dbg.REGDUMP_x87ControlWordFields_set
    __swig_getmethods__["x87ControlWordFields"] = _x64dbg.REGDUMP_x87ControlWordFields_get
    if _newclass:
        x87ControlWordFields = _swig_property(_x64dbg.REGDUMP_x87ControlWordFields_get, _x64dbg.REGDUMP_x87ControlWordFields_set)
    __swig_setmethods__["lastError"] = _x64dbg.REGDUMP_lastError_set
    __swig_getmethods__["lastError"] = _x64dbg.REGDUMP_lastError_get
    if _newclass:
        lastError = _swig_property(_x64dbg.REGDUMP_lastError_get, _x64dbg.REGDUMP_lastError_set)

    def __init__(self):
        this = _x64dbg.new_REGDUMP()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_REGDUMP
    __del__ = lambda self: None
REGDUMP_swigregister = _x64dbg.REGDUMP_swigregister
REGDUMP_swigregister(REGDUMP)

class DISASM_ARG(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DISASM_ARG, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DISASM_ARG, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _x64dbg.DISASM_ARG_type_set
    __swig_getmethods__["type"] = _x64dbg.DISASM_ARG_type_get
    if _newclass:
        type = _swig_property(_x64dbg.DISASM_ARG_type_get, _x64dbg.DISASM_ARG_type_set)
    __swig_setmethods__["segment"] = _x64dbg.DISASM_ARG_segment_set
    __swig_getmethods__["segment"] = _x64dbg.DISASM_ARG_segment_get
    if _newclass:
        segment = _swig_property(_x64dbg.DISASM_ARG_segment_get, _x64dbg.DISASM_ARG_segment_set)
    __swig_setmethods__["mnemonic"] = _x64dbg.DISASM_ARG_mnemonic_set
    __swig_getmethods__["mnemonic"] = _x64dbg.DISASM_ARG_mnemonic_get
    if _newclass:
        mnemonic = _swig_property(_x64dbg.DISASM_ARG_mnemonic_get, _x64dbg.DISASM_ARG_mnemonic_set)
    __swig_setmethods__["constant"] = _x64dbg.DISASM_ARG_constant_set
    __swig_getmethods__["constant"] = _x64dbg.DISASM_ARG_constant_get
    if _newclass:
        constant = _swig_property(_x64dbg.DISASM_ARG_constant_get, _x64dbg.DISASM_ARG_constant_set)
    __swig_setmethods__["value"] = _x64dbg.DISASM_ARG_value_set
    __swig_getmethods__["value"] = _x64dbg.DISASM_ARG_value_get
    if _newclass:
        value = _swig_property(_x64dbg.DISASM_ARG_value_get, _x64dbg.DISASM_ARG_value_set)
    __swig_setmethods__["memvalue"] = _x64dbg.DISASM_ARG_memvalue_set
    __swig_getmethods__["memvalue"] = _x64dbg.DISASM_ARG_memvalue_get
    if _newclass:
        memvalue = _swig_property(_x64dbg.DISASM_ARG_memvalue_get, _x64dbg.DISASM_ARG_memvalue_set)

    def __init__(self):
        this = _x64dbg.new_DISASM_ARG()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_DISASM_ARG
    __del__ = lambda self: None
DISASM_ARG_swigregister = _x64dbg.DISASM_ARG_swigregister
DISASM_ARG_swigregister(DISASM_ARG)

class DISASM_INSTR(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DISASM_INSTR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DISASM_INSTR, name)
    __repr__ = _swig_repr
    __swig_setmethods__["instruction"] = _x64dbg.DISASM_INSTR_instruction_set
    __swig_getmethods__["instruction"] = _x64dbg.DISASM_INSTR_instruction_get
    if _newclass:
        instruction = _swig_property(_x64dbg.DISASM_INSTR_instruction_get, _x64dbg.DISASM_INSTR_instruction_set)
    __swig_setmethods__["type"] = _x64dbg.DISASM_INSTR_type_set
    __swig_getmethods__["type"] = _x64dbg.DISASM_INSTR_type_get
    if _newclass:
        type = _swig_property(_x64dbg.DISASM_INSTR_type_get, _x64dbg.DISASM_INSTR_type_set)
    __swig_setmethods__["argcount"] = _x64dbg.DISASM_INSTR_argcount_set
    __swig_getmethods__["argcount"] = _x64dbg.DISASM_INSTR_argcount_get
    if _newclass:
        argcount = _swig_property(_x64dbg.DISASM_INSTR_argcount_get, _x64dbg.DISASM_INSTR_argcount_set)
    __swig_setmethods__["instr_size"] = _x64dbg.DISASM_INSTR_instr_size_set
    __swig_getmethods__["instr_size"] = _x64dbg.DISASM_INSTR_instr_size_get
    if _newclass:
        instr_size = _swig_property(_x64dbg.DISASM_INSTR_instr_size_get, _x64dbg.DISASM_INSTR_instr_size_set)
    __swig_setmethods__["arg"] = _x64dbg.DISASM_INSTR_arg_set
    __swig_getmethods__["arg"] = _x64dbg.DISASM_INSTR_arg_get
    if _newclass:
        arg = _swig_property(_x64dbg.DISASM_INSTR_arg_get, _x64dbg.DISASM_INSTR_arg_set)

    def __init__(self):
        this = _x64dbg.new_DISASM_INSTR()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_DISASM_INSTR
    __del__ = lambda self: None
DISASM_INSTR_swigregister = _x64dbg.DISASM_INSTR_swigregister
DISASM_INSTR_swigregister(DISASM_INSTR)

class STACK_COMMENT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STACK_COMMENT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STACK_COMMENT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["color"] = _x64dbg.STACK_COMMENT_color_set
    __swig_getmethods__["color"] = _x64dbg.STACK_COMMENT_color_get
    if _newclass:
        color = _swig_property(_x64dbg.STACK_COMMENT_color_get, _x64dbg.STACK_COMMENT_color_set)
    __swig_setmethods__["comment"] = _x64dbg.STACK_COMMENT_comment_set
    __swig_getmethods__["comment"] = _x64dbg.STACK_COMMENT_comment_get
    if _newclass:
        comment = _swig_property(_x64dbg.STACK_COMMENT_comment_get, _x64dbg.STACK_COMMENT_comment_set)

    def __init__(self):
        this = _x64dbg.new_STACK_COMMENT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_STACK_COMMENT
    __del__ = lambda self: None
STACK_COMMENT_swigregister = _x64dbg.STACK_COMMENT_swigregister
STACK_COMMENT_swigregister(STACK_COMMENT)

class THREADINFO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, THREADINFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, THREADINFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ThreadNumber"] = _x64dbg.THREADINFO_ThreadNumber_set
    __swig_getmethods__["ThreadNumber"] = _x64dbg.THREADINFO_ThreadNumber_get
    if _newclass:
        ThreadNumber = _swig_property(_x64dbg.THREADINFO_ThreadNumber_get, _x64dbg.THREADINFO_ThreadNumber_set)
    __swig_setmethods__["Handle"] = _x64dbg.THREADINFO_Handle_set
    __swig_getmethods__["Handle"] = _x64dbg.THREADINFO_Handle_get
    if _newclass:
        Handle = _swig_property(_x64dbg.THREADINFO_Handle_get, _x64dbg.THREADINFO_Handle_set)
    __swig_setmethods__["ThreadId"] = _x64dbg.THREADINFO_ThreadId_set
    __swig_getmethods__["ThreadId"] = _x64dbg.THREADINFO_ThreadId_get
    if _newclass:
        ThreadId = _swig_property(_x64dbg.THREADINFO_ThreadId_get, _x64dbg.THREADINFO_ThreadId_set)
    __swig_setmethods__["ThreadStartAddress"] = _x64dbg.THREADINFO_ThreadStartAddress_set
    __swig_getmethods__["ThreadStartAddress"] = _x64dbg.THREADINFO_ThreadStartAddress_get
    if _newclass:
        ThreadStartAddress = _swig_property(_x64dbg.THREADINFO_ThreadStartAddress_get, _x64dbg.THREADINFO_ThreadStartAddress_set)
    __swig_setmethods__["ThreadLocalBase"] = _x64dbg.THREADINFO_ThreadLocalBase_set
    __swig_getmethods__["ThreadLocalBase"] = _x64dbg.THREADINFO_ThreadLocalBase_get
    if _newclass:
        ThreadLocalBase = _swig_property(_x64dbg.THREADINFO_ThreadLocalBase_get, _x64dbg.THREADINFO_ThreadLocalBase_set)
    __swig_setmethods__["threadName"] = _x64dbg.THREADINFO_threadName_set
    __swig_getmethods__["threadName"] = _x64dbg.THREADINFO_threadName_get
    if _newclass:
        threadName = _swig_property(_x64dbg.THREADINFO_threadName_get, _x64dbg.THREADINFO_threadName_set)

    def __init__(self):
        this = _x64dbg.new_THREADINFO()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_THREADINFO
    __del__ = lambda self: None
THREADINFO_swigregister = _x64dbg.THREADINFO_swigregister
THREADINFO_swigregister(THREADINFO)

class THREADALLINFO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, THREADALLINFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, THREADALLINFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BasicInfo"] = _x64dbg.THREADALLINFO_BasicInfo_set
    __swig_getmethods__["BasicInfo"] = _x64dbg.THREADALLINFO_BasicInfo_get
    if _newclass:
        BasicInfo = _swig_property(_x64dbg.THREADALLINFO_BasicInfo_get, _x64dbg.THREADALLINFO_BasicInfo_set)
    __swig_setmethods__["ThreadCip"] = _x64dbg.THREADALLINFO_ThreadCip_set
    __swig_getmethods__["ThreadCip"] = _x64dbg.THREADALLINFO_ThreadCip_get
    if _newclass:
        ThreadCip = _swig_property(_x64dbg.THREADALLINFO_ThreadCip_get, _x64dbg.THREADALLINFO_ThreadCip_set)
    __swig_setmethods__["SuspendCount"] = _x64dbg.THREADALLINFO_SuspendCount_set
    __swig_getmethods__["SuspendCount"] = _x64dbg.THREADALLINFO_SuspendCount_get
    if _newclass:
        SuspendCount = _swig_property(_x64dbg.THREADALLINFO_SuspendCount_get, _x64dbg.THREADALLINFO_SuspendCount_set)
    __swig_setmethods__["Priority"] = _x64dbg.THREADALLINFO_Priority_set
    __swig_getmethods__["Priority"] = _x64dbg.THREADALLINFO_Priority_get
    if _newclass:
        Priority = _swig_property(_x64dbg.THREADALLINFO_Priority_get, _x64dbg.THREADALLINFO_Priority_set)
    __swig_setmethods__["WaitReason"] = _x64dbg.THREADALLINFO_WaitReason_set
    __swig_getmethods__["WaitReason"] = _x64dbg.THREADALLINFO_WaitReason_get
    if _newclass:
        WaitReason = _swig_property(_x64dbg.THREADALLINFO_WaitReason_get, _x64dbg.THREADALLINFO_WaitReason_set)
    __swig_setmethods__["LastError"] = _x64dbg.THREADALLINFO_LastError_set
    __swig_getmethods__["LastError"] = _x64dbg.THREADALLINFO_LastError_get
    if _newclass:
        LastError = _swig_property(_x64dbg.THREADALLINFO_LastError_get, _x64dbg.THREADALLINFO_LastError_set)
    __swig_setmethods__["UserTime"] = _x64dbg.THREADALLINFO_UserTime_set
    __swig_getmethods__["UserTime"] = _x64dbg.THREADALLINFO_UserTime_get
    if _newclass:
        UserTime = _swig_property(_x64dbg.THREADALLINFO_UserTime_get, _x64dbg.THREADALLINFO_UserTime_set)
    __swig_setmethods__["KernelTime"] = _x64dbg.THREADALLINFO_KernelTime_set
    __swig_getmethods__["KernelTime"] = _x64dbg.THREADALLINFO_KernelTime_get
    if _newclass:
        KernelTime = _swig_property(_x64dbg.THREADALLINFO_KernelTime_get, _x64dbg.THREADALLINFO_KernelTime_set)
    __swig_setmethods__["CreationTime"] = _x64dbg.THREADALLINFO_CreationTime_set
    __swig_getmethods__["CreationTime"] = _x64dbg.THREADALLINFO_CreationTime_get
    if _newclass:
        CreationTime = _swig_property(_x64dbg.THREADALLINFO_CreationTime_get, _x64dbg.THREADALLINFO_CreationTime_set)
    __swig_setmethods__["Cycles"] = _x64dbg.THREADALLINFO_Cycles_set
    __swig_getmethods__["Cycles"] = _x64dbg.THREADALLINFO_Cycles_get
    if _newclass:
        Cycles = _swig_property(_x64dbg.THREADALLINFO_Cycles_get, _x64dbg.THREADALLINFO_Cycles_set)

    def __init__(self):
        this = _x64dbg.new_THREADALLINFO()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_THREADALLINFO
    __del__ = lambda self: None
THREADALLINFO_swigregister = _x64dbg.THREADALLINFO_swigregister
THREADALLINFO_swigregister(THREADALLINFO)

class THREADLIST(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, THREADLIST, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, THREADLIST, name)
    __repr__ = _swig_repr
    __swig_setmethods__["count"] = _x64dbg.THREADLIST_count_set
    __swig_getmethods__["count"] = _x64dbg.THREADLIST_count_get
    if _newclass:
        count = _swig_property(_x64dbg.THREADLIST_count_get, _x64dbg.THREADLIST_count_set)
    __swig_setmethods__["list"] = _x64dbg.THREADLIST_list_set
    __swig_getmethods__["list"] = _x64dbg.THREADLIST_list_get
    if _newclass:
        list = _swig_property(_x64dbg.THREADLIST_list_get, _x64dbg.THREADLIST_list_set)
    __swig_setmethods__["CurrentThread"] = _x64dbg.THREADLIST_CurrentThread_set
    __swig_getmethods__["CurrentThread"] = _x64dbg.THREADLIST_CurrentThread_get
    if _newclass:
        CurrentThread = _swig_property(_x64dbg.THREADLIST_CurrentThread_get, _x64dbg.THREADLIST_CurrentThread_set)

    def __init__(self):
        this = _x64dbg.new_THREADLIST()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_THREADLIST
    __del__ = lambda self: None
THREADLIST_swigregister = _x64dbg.THREADLIST_swigregister
THREADLIST_swigregister(THREADLIST)

class MEMORY_INFO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEMORY_INFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEMORY_INFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _x64dbg.MEMORY_INFO_value_set
    __swig_getmethods__["value"] = _x64dbg.MEMORY_INFO_value_get
    if _newclass:
        value = _swig_property(_x64dbg.MEMORY_INFO_value_get, _x64dbg.MEMORY_INFO_value_set)
    __swig_setmethods__["size"] = _x64dbg.MEMORY_INFO_size_set
    __swig_getmethods__["size"] = _x64dbg.MEMORY_INFO_size_get
    if _newclass:
        size = _swig_property(_x64dbg.MEMORY_INFO_size_get, _x64dbg.MEMORY_INFO_size_set)
    __swig_setmethods__["mnemonic"] = _x64dbg.MEMORY_INFO_mnemonic_set
    __swig_getmethods__["mnemonic"] = _x64dbg.MEMORY_INFO_mnemonic_get
    if _newclass:
        mnemonic = _swig_property(_x64dbg.MEMORY_INFO_mnemonic_get, _x64dbg.MEMORY_INFO_mnemonic_set)

    def __init__(self):
        this = _x64dbg.new_MEMORY_INFO()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_MEMORY_INFO
    __del__ = lambda self: None
MEMORY_INFO_swigregister = _x64dbg.MEMORY_INFO_swigregister
MEMORY_INFO_swigregister(MEMORY_INFO)

class VALUE_INFO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VALUE_INFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VALUE_INFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _x64dbg.VALUE_INFO_value_set
    __swig_getmethods__["value"] = _x64dbg.VALUE_INFO_value_get
    if _newclass:
        value = _swig_property(_x64dbg.VALUE_INFO_value_get, _x64dbg.VALUE_INFO_value_set)
    __swig_setmethods__["size"] = _x64dbg.VALUE_INFO_size_set
    __swig_getmethods__["size"] = _x64dbg.VALUE_INFO_size_get
    if _newclass:
        size = _swig_property(_x64dbg.VALUE_INFO_size_get, _x64dbg.VALUE_INFO_size_set)

    def __init__(self):
        this = _x64dbg.new_VALUE_INFO()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_VALUE_INFO
    __del__ = lambda self: None
VALUE_INFO_swigregister = _x64dbg.VALUE_INFO_swigregister
VALUE_INFO_swigregister(VALUE_INFO)

TYPE_VALUE = _x64dbg.TYPE_VALUE
TYPE_MEMORY = _x64dbg.TYPE_MEMORY
TYPE_ADDR = _x64dbg.TYPE_ADDR
class BASIC_INSTRUCTION_INFO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BASIC_INSTRUCTION_INFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BASIC_INSTRUCTION_INFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _x64dbg.BASIC_INSTRUCTION_INFO_type_set
    __swig_getmethods__["type"] = _x64dbg.BASIC_INSTRUCTION_INFO_type_get
    if _newclass:
        type = _swig_property(_x64dbg.BASIC_INSTRUCTION_INFO_type_get, _x64dbg.BASIC_INSTRUCTION_INFO_type_set)
    __swig_setmethods__["value"] = _x64dbg.BASIC_INSTRUCTION_INFO_value_set
    __swig_getmethods__["value"] = _x64dbg.BASIC_INSTRUCTION_INFO_value_get
    if _newclass:
        value = _swig_property(_x64dbg.BASIC_INSTRUCTION_INFO_value_get, _x64dbg.BASIC_INSTRUCTION_INFO_value_set)
    __swig_setmethods__["memory"] = _x64dbg.BASIC_INSTRUCTION_INFO_memory_set
    __swig_getmethods__["memory"] = _x64dbg.BASIC_INSTRUCTION_INFO_memory_get
    if _newclass:
        memory = _swig_property(_x64dbg.BASIC_INSTRUCTION_INFO_memory_get, _x64dbg.BASIC_INSTRUCTION_INFO_memory_set)
    __swig_setmethods__["addr"] = _x64dbg.BASIC_INSTRUCTION_INFO_addr_set
    __swig_getmethods__["addr"] = _x64dbg.BASIC_INSTRUCTION_INFO_addr_get
    if _newclass:
        addr = _swig_property(_x64dbg.BASIC_INSTRUCTION_INFO_addr_get, _x64dbg.BASIC_INSTRUCTION_INFO_addr_set)
    __swig_setmethods__["branch"] = _x64dbg.BASIC_INSTRUCTION_INFO_branch_set
    __swig_getmethods__["branch"] = _x64dbg.BASIC_INSTRUCTION_INFO_branch_get
    if _newclass:
        branch = _swig_property(_x64dbg.BASIC_INSTRUCTION_INFO_branch_get, _x64dbg.BASIC_INSTRUCTION_INFO_branch_set)
    __swig_setmethods__["call"] = _x64dbg.BASIC_INSTRUCTION_INFO_call_set
    __swig_getmethods__["call"] = _x64dbg.BASIC_INSTRUCTION_INFO_call_get
    if _newclass:
        call = _swig_property(_x64dbg.BASIC_INSTRUCTION_INFO_call_get, _x64dbg.BASIC_INSTRUCTION_INFO_call_set)
    __swig_setmethods__["size"] = _x64dbg.BASIC_INSTRUCTION_INFO_size_set
    __swig_getmethods__["size"] = _x64dbg.BASIC_INSTRUCTION_INFO_size_get
    if _newclass:
        size = _swig_property(_x64dbg.BASIC_INSTRUCTION_INFO_size_get, _x64dbg.BASIC_INSTRUCTION_INFO_size_set)
    __swig_setmethods__["instruction"] = _x64dbg.BASIC_INSTRUCTION_INFO_instruction_set
    __swig_getmethods__["instruction"] = _x64dbg.BASIC_INSTRUCTION_INFO_instruction_get
    if _newclass:
        instruction = _swig_property(_x64dbg.BASIC_INSTRUCTION_INFO_instruction_get, _x64dbg.BASIC_INSTRUCTION_INFO_instruction_set)

    def __init__(self):
        this = _x64dbg.new_BASIC_INSTRUCTION_INFO()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_BASIC_INSTRUCTION_INFO
    __del__ = lambda self: None
BASIC_INSTRUCTION_INFO_swigregister = _x64dbg.BASIC_INSTRUCTION_INFO_swigregister
BASIC_INSTRUCTION_INFO_swigregister(BASIC_INSTRUCTION_INFO)

class SCRIPTBRANCH(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SCRIPTBRANCH, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SCRIPTBRANCH, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _x64dbg.SCRIPTBRANCH_type_set
    __swig_getmethods__["type"] = _x64dbg.SCRIPTBRANCH_type_get
    if _newclass:
        type = _swig_property(_x64dbg.SCRIPTBRANCH_type_get, _x64dbg.SCRIPTBRANCH_type_set)
    __swig_setmethods__["dest"] = _x64dbg.SCRIPTBRANCH_dest_set
    __swig_getmethods__["dest"] = _x64dbg.SCRIPTBRANCH_dest_get
    if _newclass:
        dest = _swig_property(_x64dbg.SCRIPTBRANCH_dest_get, _x64dbg.SCRIPTBRANCH_dest_set)
    __swig_setmethods__["branchlabel"] = _x64dbg.SCRIPTBRANCH_branchlabel_set
    __swig_getmethods__["branchlabel"] = _x64dbg.SCRIPTBRANCH_branchlabel_get
    if _newclass:
        branchlabel = _swig_property(_x64dbg.SCRIPTBRANCH_branchlabel_get, _x64dbg.SCRIPTBRANCH_branchlabel_set)

    def __init__(self):
        this = _x64dbg.new_SCRIPTBRANCH()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_SCRIPTBRANCH
    __del__ = lambda self: None
SCRIPTBRANCH_swigregister = _x64dbg.SCRIPTBRANCH_swigregister
SCRIPTBRANCH_swigregister(SCRIPTBRANCH)

class FUNCTION_LOOP_INFO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FUNCTION_LOOP_INFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FUNCTION_LOOP_INFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["addr"] = _x64dbg.FUNCTION_LOOP_INFO_addr_set
    __swig_getmethods__["addr"] = _x64dbg.FUNCTION_LOOP_INFO_addr_get
    if _newclass:
        addr = _swig_property(_x64dbg.FUNCTION_LOOP_INFO_addr_get, _x64dbg.FUNCTION_LOOP_INFO_addr_set)
    __swig_setmethods__["start"] = _x64dbg.FUNCTION_LOOP_INFO_start_set
    __swig_getmethods__["start"] = _x64dbg.FUNCTION_LOOP_INFO_start_get
    if _newclass:
        start = _swig_property(_x64dbg.FUNCTION_LOOP_INFO_start_get, _x64dbg.FUNCTION_LOOP_INFO_start_set)
    __swig_setmethods__["end"] = _x64dbg.FUNCTION_LOOP_INFO_end_set
    __swig_getmethods__["end"] = _x64dbg.FUNCTION_LOOP_INFO_end_get
    if _newclass:
        end = _swig_property(_x64dbg.FUNCTION_LOOP_INFO_end_get, _x64dbg.FUNCTION_LOOP_INFO_end_set)
    __swig_setmethods__["manual"] = _x64dbg.FUNCTION_LOOP_INFO_manual_set
    __swig_getmethods__["manual"] = _x64dbg.FUNCTION_LOOP_INFO_manual_get
    if _newclass:
        manual = _swig_property(_x64dbg.FUNCTION_LOOP_INFO_manual_get, _x64dbg.FUNCTION_LOOP_INFO_manual_set)
    __swig_setmethods__["depth"] = _x64dbg.FUNCTION_LOOP_INFO_depth_set
    __swig_getmethods__["depth"] = _x64dbg.FUNCTION_LOOP_INFO_depth_get
    if _newclass:
        depth = _swig_property(_x64dbg.FUNCTION_LOOP_INFO_depth_get, _x64dbg.FUNCTION_LOOP_INFO_depth_set)

    def __init__(self):
        this = _x64dbg.new_FUNCTION_LOOP_INFO()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_FUNCTION_LOOP_INFO
    __del__ = lambda self: None
FUNCTION_LOOP_INFO_swigregister = _x64dbg.FUNCTION_LOOP_INFO_swigregister
FUNCTION_LOOP_INFO_swigregister(FUNCTION_LOOP_INFO)

class XREF_RECORD(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XREF_RECORD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XREF_RECORD, name)
    __repr__ = _swig_repr
    __swig_setmethods__["addr"] = _x64dbg.XREF_RECORD_addr_set
    __swig_getmethods__["addr"] = _x64dbg.XREF_RECORD_addr_get
    if _newclass:
        addr = _swig_property(_x64dbg.XREF_RECORD_addr_get, _x64dbg.XREF_RECORD_addr_set)
    __swig_setmethods__["type"] = _x64dbg.XREF_RECORD_type_set
    __swig_getmethods__["type"] = _x64dbg.XREF_RECORD_type_get
    if _newclass:
        type = _swig_property(_x64dbg.XREF_RECORD_type_get, _x64dbg.XREF_RECORD_type_set)

    def __init__(self):
        this = _x64dbg.new_XREF_RECORD()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_XREF_RECORD
    __del__ = lambda self: None
XREF_RECORD_swigregister = _x64dbg.XREF_RECORD_swigregister
XREF_RECORD_swigregister(XREF_RECORD)

class XREF_INFO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XREF_INFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XREF_INFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["refcount"] = _x64dbg.XREF_INFO_refcount_set
    __swig_getmethods__["refcount"] = _x64dbg.XREF_INFO_refcount_get
    if _newclass:
        refcount = _swig_property(_x64dbg.XREF_INFO_refcount_get, _x64dbg.XREF_INFO_refcount_set)
    __swig_setmethods__["references"] = _x64dbg.XREF_INFO_references_set
    __swig_getmethods__["references"] = _x64dbg.XREF_INFO_references_get
    if _newclass:
        references = _swig_property(_x64dbg.XREF_INFO_references_get, _x64dbg.XREF_INFO_references_set)

    def __init__(self):
        this = _x64dbg.new_XREF_INFO()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_XREF_INFO
    __del__ = lambda self: None
XREF_INFO_swigregister = _x64dbg.XREF_INFO_swigregister
XREF_INFO_swigregister(XREF_INFO)


def DbgInit():
    return _x64dbg.DbgInit()
DbgInit = _x64dbg.DbgInit

def DbgExit():
    return _x64dbg.DbgExit()
DbgExit = _x64dbg.DbgExit

def DbgMemRead(va, dest, size):
    return _x64dbg.DbgMemRead(va, dest, size)
DbgMemRead = _x64dbg.DbgMemRead

def DbgMemWrite(va, src, size):
    return _x64dbg.DbgMemWrite(va, src, size)
DbgMemWrite = _x64dbg.DbgMemWrite

def DbgMemGetPageSize(base):
    return _x64dbg.DbgMemGetPageSize(base)
DbgMemGetPageSize = _x64dbg.DbgMemGetPageSize

def DbgMemFindBaseAddr(addr, size):
    return _x64dbg.DbgMemFindBaseAddr(addr, size)
DbgMemFindBaseAddr = _x64dbg.DbgMemFindBaseAddr

def DbgCmdExec(cmd):
    return _x64dbg.DbgCmdExec(cmd)
DbgCmdExec = _x64dbg.DbgCmdExec

def DbgCmdExecDirect(cmd):
    return _x64dbg.DbgCmdExecDirect(cmd)
DbgCmdExecDirect = _x64dbg.DbgCmdExecDirect

def DbgMemMap(memmap):
    return _x64dbg.DbgMemMap(memmap)
DbgMemMap = _x64dbg.DbgMemMap

def DbgIsValidExpression(expression):
    return _x64dbg.DbgIsValidExpression(expression)
DbgIsValidExpression = _x64dbg.DbgIsValidExpression

def DbgIsDebugging():
    return _x64dbg.DbgIsDebugging()
DbgIsDebugging = _x64dbg.DbgIsDebugging

def DbgIsJumpGoingToExecute(addr):
    return _x64dbg.DbgIsJumpGoingToExecute(addr)
DbgIsJumpGoingToExecute = _x64dbg.DbgIsJumpGoingToExecute

def DbgGetLabelAt(addr, segment, text):
    return _x64dbg.DbgGetLabelAt(addr, segment, text)
DbgGetLabelAt = _x64dbg.DbgGetLabelAt

def DbgSetLabelAt(addr, text):
    return _x64dbg.DbgSetLabelAt(addr, text)
DbgSetLabelAt = _x64dbg.DbgSetLabelAt

def DbgClearLabelRange(start, end):
    return _x64dbg.DbgClearLabelRange(start, end)
DbgClearLabelRange = _x64dbg.DbgClearLabelRange

def DbgGetCommentAt(addr, text):
    return _x64dbg.DbgGetCommentAt(addr, text)
DbgGetCommentAt = _x64dbg.DbgGetCommentAt

def DbgSetCommentAt(addr, text):
    return _x64dbg.DbgSetCommentAt(addr, text)
DbgSetCommentAt = _x64dbg.DbgSetCommentAt

def DbgClearCommentRange(start, end):
    return _x64dbg.DbgClearCommentRange(start, end)
DbgClearCommentRange = _x64dbg.DbgClearCommentRange

def DbgGetBookmarkAt(addr):
    return _x64dbg.DbgGetBookmarkAt(addr)
DbgGetBookmarkAt = _x64dbg.DbgGetBookmarkAt

def DbgSetBookmarkAt(addr, isbookmark):
    return _x64dbg.DbgSetBookmarkAt(addr, isbookmark)
DbgSetBookmarkAt = _x64dbg.DbgSetBookmarkAt

def DbgClearBookmarkRange(start, end):
    return _x64dbg.DbgClearBookmarkRange(start, end)
DbgClearBookmarkRange = _x64dbg.DbgClearBookmarkRange

def DbgGetModuleAt(addr, text):
    return _x64dbg.DbgGetModuleAt(addr, text)
DbgGetModuleAt = _x64dbg.DbgGetModuleAt

def DbgGetBpxTypeAt(addr):
    return _x64dbg.DbgGetBpxTypeAt(addr)
DbgGetBpxTypeAt = _x64dbg.DbgGetBpxTypeAt

def DbgValFromString(string):
    return _x64dbg.DbgValFromString(string)
DbgValFromString = _x64dbg.DbgValFromString

def DbgGetRegDump(regdump):
    return _x64dbg.DbgGetRegDump(regdump)
DbgGetRegDump = _x64dbg.DbgGetRegDump

def DbgValToString(string, value):
    return _x64dbg.DbgValToString(string, value)
DbgValToString = _x64dbg.DbgValToString

def DbgMemIsValidReadPtr(addr):
    return _x64dbg.DbgMemIsValidReadPtr(addr)
DbgMemIsValidReadPtr = _x64dbg.DbgMemIsValidReadPtr

def DbgGetBpList(type, list):
    return _x64dbg.DbgGetBpList(type, list)
DbgGetBpList = _x64dbg.DbgGetBpList

def DbgGetFunctionTypeAt(addr):
    return _x64dbg.DbgGetFunctionTypeAt(addr)
DbgGetFunctionTypeAt = _x64dbg.DbgGetFunctionTypeAt

def DbgGetLoopTypeAt(addr, depth):
    return _x64dbg.DbgGetLoopTypeAt(addr, depth)
DbgGetLoopTypeAt = _x64dbg.DbgGetLoopTypeAt

def DbgGetBranchDestination(addr):
    return _x64dbg.DbgGetBranchDestination(addr)
DbgGetBranchDestination = _x64dbg.DbgGetBranchDestination

def DbgScriptLoad(filename):
    return _x64dbg.DbgScriptLoad(filename)
DbgScriptLoad = _x64dbg.DbgScriptLoad

def DbgScriptUnload():
    return _x64dbg.DbgScriptUnload()
DbgScriptUnload = _x64dbg.DbgScriptUnload

def DbgScriptRun(destline):
    return _x64dbg.DbgScriptRun(destline)
DbgScriptRun = _x64dbg.DbgScriptRun

def DbgScriptStep():
    return _x64dbg.DbgScriptStep()
DbgScriptStep = _x64dbg.DbgScriptStep

def DbgScriptBpToggle(line):
    return _x64dbg.DbgScriptBpToggle(line)
DbgScriptBpToggle = _x64dbg.DbgScriptBpToggle

def DbgScriptBpGet(line):
    return _x64dbg.DbgScriptBpGet(line)
DbgScriptBpGet = _x64dbg.DbgScriptBpGet

def DbgScriptCmdExec(command):
    return _x64dbg.DbgScriptCmdExec(command)
DbgScriptCmdExec = _x64dbg.DbgScriptCmdExec

def DbgScriptAbort():
    return _x64dbg.DbgScriptAbort()
DbgScriptAbort = _x64dbg.DbgScriptAbort

def DbgScriptGetLineType(line):
    return _x64dbg.DbgScriptGetLineType(line)
DbgScriptGetLineType = _x64dbg.DbgScriptGetLineType

def DbgScriptSetIp(line):
    return _x64dbg.DbgScriptSetIp(line)
DbgScriptSetIp = _x64dbg.DbgScriptSetIp

def DbgScriptGetBranchInfo(line, info):
    return _x64dbg.DbgScriptGetBranchInfo(line, info)
DbgScriptGetBranchInfo = _x64dbg.DbgScriptGetBranchInfo

def DbgSymbolEnum(base, cbSymbolEnum, user):
    return _x64dbg.DbgSymbolEnum(base, cbSymbolEnum, user)
DbgSymbolEnum = _x64dbg.DbgSymbolEnum

def DbgSymbolEnumFromCache(base, cbSymbolEnum, user):
    return _x64dbg.DbgSymbolEnumFromCache(base, cbSymbolEnum, user)
DbgSymbolEnumFromCache = _x64dbg.DbgSymbolEnumFromCache

def DbgAssembleAt(addr, instruction):
    return _x64dbg.DbgAssembleAt(addr, instruction)
DbgAssembleAt = _x64dbg.DbgAssembleAt

def DbgModBaseFromName(name):
    return _x64dbg.DbgModBaseFromName(name)
DbgModBaseFromName = _x64dbg.DbgModBaseFromName

def DbgDisasmAt(addr, instr):
    return _x64dbg.DbgDisasmAt(addr, instr)
DbgDisasmAt = _x64dbg.DbgDisasmAt

def DbgStackCommentGet(addr, comment):
    return _x64dbg.DbgStackCommentGet(addr, comment)
DbgStackCommentGet = _x64dbg.DbgStackCommentGet

def DbgGetThreadList(list):
    return _x64dbg.DbgGetThreadList(list)
DbgGetThreadList = _x64dbg.DbgGetThreadList

def DbgSettingsUpdated():
    return _x64dbg.DbgSettingsUpdated()
DbgSettingsUpdated = _x64dbg.DbgSettingsUpdated

def DbgDisasmFastAt(addr, basicinfo):
    return _x64dbg.DbgDisasmFastAt(addr, basicinfo)
DbgDisasmFastAt = _x64dbg.DbgDisasmFastAt

def DbgMenuEntryClicked(hEntry):
    return _x64dbg.DbgMenuEntryClicked(hEntry)
DbgMenuEntryClicked = _x64dbg.DbgMenuEntryClicked

def DbgFunctionGet(addr, start, end):
    return _x64dbg.DbgFunctionGet(addr, start, end)
DbgFunctionGet = _x64dbg.DbgFunctionGet

def DbgFunctionOverlaps(start, end):
    return _x64dbg.DbgFunctionOverlaps(start, end)
DbgFunctionOverlaps = _x64dbg.DbgFunctionOverlaps

def DbgFunctionAdd(start, end):
    return _x64dbg.DbgFunctionAdd(start, end)
DbgFunctionAdd = _x64dbg.DbgFunctionAdd

def DbgFunctionDel(addr):
    return _x64dbg.DbgFunctionDel(addr)
DbgFunctionDel = _x64dbg.DbgFunctionDel

def DbgArgumentGet(addr, start, end):
    return _x64dbg.DbgArgumentGet(addr, start, end)
DbgArgumentGet = _x64dbg.DbgArgumentGet

def DbgArgumentOverlaps(start, end):
    return _x64dbg.DbgArgumentOverlaps(start, end)
DbgArgumentOverlaps = _x64dbg.DbgArgumentOverlaps

def DbgArgumentAdd(start, end):
    return _x64dbg.DbgArgumentAdd(start, end)
DbgArgumentAdd = _x64dbg.DbgArgumentAdd

def DbgArgumentDel(addr):
    return _x64dbg.DbgArgumentDel(addr)
DbgArgumentDel = _x64dbg.DbgArgumentDel

def DbgLoopGet(depth, addr, start, end):
    return _x64dbg.DbgLoopGet(depth, addr, start, end)
DbgLoopGet = _x64dbg.DbgLoopGet

def DbgLoopOverlaps(depth, start, end):
    return _x64dbg.DbgLoopOverlaps(depth, start, end)
DbgLoopOverlaps = _x64dbg.DbgLoopOverlaps

def DbgLoopAdd(start, end):
    return _x64dbg.DbgLoopAdd(start, end)
DbgLoopAdd = _x64dbg.DbgLoopAdd

def DbgLoopDel(depth, addr):
    return _x64dbg.DbgLoopDel(depth, addr)
DbgLoopDel = _x64dbg.DbgLoopDel

def DbgXrefAdd(addr, arg2):
    return _x64dbg.DbgXrefAdd(addr, arg2)
DbgXrefAdd = _x64dbg.DbgXrefAdd

def DbgXrefDelAll(addr):
    return _x64dbg.DbgXrefDelAll(addr)
DbgXrefDelAll = _x64dbg.DbgXrefDelAll

def DbgXrefGet(addr, info):
    return _x64dbg.DbgXrefGet(addr, info)
DbgXrefGet = _x64dbg.DbgXrefGet

def DbgGetXrefCountAt(addr):
    return _x64dbg.DbgGetXrefCountAt(addr)
DbgGetXrefCountAt = _x64dbg.DbgGetXrefCountAt

def DbgGetXrefTypeAt(addr):
    return _x64dbg.DbgGetXrefTypeAt(addr)
DbgGetXrefTypeAt = _x64dbg.DbgGetXrefTypeAt

def DbgIsRunLocked():
    return _x64dbg.DbgIsRunLocked()
DbgIsRunLocked = _x64dbg.DbgIsRunLocked

def DbgIsBpDisabled(addr):
    return _x64dbg.DbgIsBpDisabled(addr)
DbgIsBpDisabled = _x64dbg.DbgIsBpDisabled

def DbgSetAutoCommentAt(addr, text):
    return _x64dbg.DbgSetAutoCommentAt(addr, text)
DbgSetAutoCommentAt = _x64dbg.DbgSetAutoCommentAt

def DbgClearAutoCommentRange(start, end):
    return _x64dbg.DbgClearAutoCommentRange(start, end)
DbgClearAutoCommentRange = _x64dbg.DbgClearAutoCommentRange

def DbgSetAutoLabelAt(addr, text):
    return _x64dbg.DbgSetAutoLabelAt(addr, text)
DbgSetAutoLabelAt = _x64dbg.DbgSetAutoLabelAt

def DbgClearAutoLabelRange(start, end):
    return _x64dbg.DbgClearAutoLabelRange(start, end)
DbgClearAutoLabelRange = _x64dbg.DbgClearAutoLabelRange

def DbgSetAutoBookmarkAt(addr):
    return _x64dbg.DbgSetAutoBookmarkAt(addr)
DbgSetAutoBookmarkAt = _x64dbg.DbgSetAutoBookmarkAt

def DbgClearAutoBookmarkRange(start, end):
    return _x64dbg.DbgClearAutoBookmarkRange(start, end)
DbgClearAutoBookmarkRange = _x64dbg.DbgClearAutoBookmarkRange

def DbgSetAutoFunctionAt(start, end):
    return _x64dbg.DbgSetAutoFunctionAt(start, end)
DbgSetAutoFunctionAt = _x64dbg.DbgSetAutoFunctionAt

def DbgClearAutoFunctionRange(start, end):
    return _x64dbg.DbgClearAutoFunctionRange(start, end)
DbgClearAutoFunctionRange = _x64dbg.DbgClearAutoFunctionRange

def DbgGetStringAt(addr, text):
    return _x64dbg.DbgGetStringAt(addr, text)
DbgGetStringAt = _x64dbg.DbgGetStringAt

def DbgFunctions():
    return _x64dbg.DbgFunctions()
DbgFunctions = _x64dbg.DbgFunctions

def DbgWinEvent(message, result):
    return _x64dbg.DbgWinEvent(message, result)
DbgWinEvent = _x64dbg.DbgWinEvent

def DbgWinEventGlobal(message):
    return _x64dbg.DbgWinEventGlobal(message)
DbgWinEventGlobal = _x64dbg.DbgWinEventGlobal

def DbgIsRunning():
    return _x64dbg.DbgIsRunning()
DbgIsRunning = _x64dbg.DbgIsRunning

def DbgGetTimeWastedCounter():
    return _x64dbg.DbgGetTimeWastedCounter()
DbgGetTimeWastedCounter = _x64dbg.DbgGetTimeWastedCounter

def DbgGetArgTypeAt(addr):
    return _x64dbg.DbgGetArgTypeAt(addr)
DbgGetArgTypeAt = _x64dbg.DbgGetArgTypeAt

def DbgGetEncodeTypeBuffer(addr, size):
    return _x64dbg.DbgGetEncodeTypeBuffer(addr, size)
DbgGetEncodeTypeBuffer = _x64dbg.DbgGetEncodeTypeBuffer

def DbgReleaseEncodeTypeBuffer(buffer):
    return _x64dbg.DbgReleaseEncodeTypeBuffer(buffer)
DbgReleaseEncodeTypeBuffer = _x64dbg.DbgReleaseEncodeTypeBuffer

def DbgGetEncodeTypeAt(addr, size):
    return _x64dbg.DbgGetEncodeTypeAt(addr, size)
DbgGetEncodeTypeAt = _x64dbg.DbgGetEncodeTypeAt

def DbgGetEncodeSizeAt(addr, codesize):
    return _x64dbg.DbgGetEncodeSizeAt(addr, codesize)
DbgGetEncodeSizeAt = _x64dbg.DbgGetEncodeSizeAt

def DbgSetEncodeType(addr, size, type):
    return _x64dbg.DbgSetEncodeType(addr, size, type)
DbgSetEncodeType = _x64dbg.DbgSetEncodeType

def DbgDelEncodeTypeRange(start, end):
    return _x64dbg.DbgDelEncodeTypeRange(start, end)
DbgDelEncodeTypeRange = _x64dbg.DbgDelEncodeTypeRange

def DbgDelEncodeTypeSegment(start):
    return _x64dbg.DbgDelEncodeTypeSegment(start)
DbgDelEncodeTypeSegment = _x64dbg.DbgDelEncodeTypeSegment

def DbgGetWatchList(list):
    return _x64dbg.DbgGetWatchList(list)
DbgGetWatchList = _x64dbg.DbgGetWatchList

def DbgSelChanged(hWindow, VA):
    return _x64dbg.DbgSelChanged(hWindow, VA)
DbgSelChanged = _x64dbg.DbgSelChanged

def DbgGetProcessHandle():
    return _x64dbg.DbgGetProcessHandle()
DbgGetProcessHandle = _x64dbg.DbgGetProcessHandle

def DbgGetThreadHandle():
    return _x64dbg.DbgGetThreadHandle()
DbgGetThreadHandle = _x64dbg.DbgGetThreadHandle

def DbgGetProcessId():
    return _x64dbg.DbgGetProcessId()
DbgGetProcessId = _x64dbg.DbgGetProcessId

def DbgGetThreadId():
    return _x64dbg.DbgGetThreadId()
DbgGetThreadId = _x64dbg.DbgGetThreadId

def DbgGetPebAddress(ProcessId):
    return _x64dbg.DbgGetPebAddress(ProcessId)
DbgGetPebAddress = _x64dbg.DbgGetPebAddress

def DbgGetTebAddress(ThreadId):
    return _x64dbg.DbgGetTebAddress(ThreadId)
DbgGetTebAddress = _x64dbg.DbgGetTebAddress

def DbgAnalyzeFunction(entry, graph):
    return _x64dbg.DbgAnalyzeFunction(entry, graph)
DbgAnalyzeFunction = _x64dbg.DbgAnalyzeFunction

def DbgEval(expression, success=None):
    return _x64dbg.DbgEval(expression, success)
DbgEval = _x64dbg.DbgEval

def DbgMenuPrepare(hMenu):
    return _x64dbg.DbgMenuPrepare(hMenu)
DbgMenuPrepare = _x64dbg.DbgMenuPrepare
GUI_PLUGIN_MENU = _x64dbg.GUI_PLUGIN_MENU
GUI_DISASM_MENU = _x64dbg.GUI_DISASM_MENU
GUI_DUMP_MENU = _x64dbg.GUI_DUMP_MENU
GUI_STACK_MENU = _x64dbg.GUI_STACK_MENU
GUI_DISASSEMBLY = _x64dbg.GUI_DISASSEMBLY
GUI_DUMP = _x64dbg.GUI_DUMP
GUI_STACK = _x64dbg.GUI_STACK
GUI_GRAPH = _x64dbg.GUI_GRAPH
GUI_MEMMAP = _x64dbg.GUI_MEMMAP
GUI_SYMMOD = _x64dbg.GUI_SYMMOD
GUI_MAX_LINE_SIZE = _x64dbg.GUI_MAX_LINE_SIZE
GUI_MAX_DISASSEMBLY_SIZE = _x64dbg.GUI_MAX_DISASSEMBLY_SIZE
GUI_DISASSEMBLE_AT = _x64dbg.GUI_DISASSEMBLE_AT
GUI_SET_DEBUG_STATE = _x64dbg.GUI_SET_DEBUG_STATE
GUI_ADD_MSG_TO_LOG = _x64dbg.GUI_ADD_MSG_TO_LOG
GUI_CLEAR_LOG = _x64dbg.GUI_CLEAR_LOG
GUI_UPDATE_REGISTER_VIEW = _x64dbg.GUI_UPDATE_REGISTER_VIEW
GUI_UPDATE_DISASSEMBLY_VIEW = _x64dbg.GUI_UPDATE_DISASSEMBLY_VIEW
GUI_UPDATE_BREAKPOINTS_VIEW = _x64dbg.GUI_UPDATE_BREAKPOINTS_VIEW
GUI_UPDATE_WINDOW_TITLE = _x64dbg.GUI_UPDATE_WINDOW_TITLE
GUI_GET_WINDOW_HANDLE = _x64dbg.GUI_GET_WINDOW_HANDLE
GUI_DUMP_AT = _x64dbg.GUI_DUMP_AT
GUI_SCRIPT_ADD = _x64dbg.GUI_SCRIPT_ADD
GUI_SCRIPT_CLEAR = _x64dbg.GUI_SCRIPT_CLEAR
GUI_SCRIPT_SETIP = _x64dbg.GUI_SCRIPT_SETIP
GUI_SCRIPT_ERROR = _x64dbg.GUI_SCRIPT_ERROR
GUI_SCRIPT_SETTITLE = _x64dbg.GUI_SCRIPT_SETTITLE
GUI_SCRIPT_SETINFOLINE = _x64dbg.GUI_SCRIPT_SETINFOLINE
GUI_SCRIPT_MESSAGE = _x64dbg.GUI_SCRIPT_MESSAGE
GUI_SCRIPT_MSGYN = _x64dbg.GUI_SCRIPT_MSGYN
GUI_SYMBOL_LOG_ADD = _x64dbg.GUI_SYMBOL_LOG_ADD
GUI_SYMBOL_LOG_CLEAR = _x64dbg.GUI_SYMBOL_LOG_CLEAR
GUI_SYMBOL_SET_PROGRESS = _x64dbg.GUI_SYMBOL_SET_PROGRESS
GUI_SYMBOL_UPDATE_MODULE_LIST = _x64dbg.GUI_SYMBOL_UPDATE_MODULE_LIST
GUI_REF_ADDCOLUMN = _x64dbg.GUI_REF_ADDCOLUMN
GUI_REF_SETROWCOUNT = _x64dbg.GUI_REF_SETROWCOUNT
GUI_REF_GETROWCOUNT = _x64dbg.GUI_REF_GETROWCOUNT
GUI_REF_DELETEALLCOLUMNS = _x64dbg.GUI_REF_DELETEALLCOLUMNS
GUI_REF_SETCELLCONTENT = _x64dbg.GUI_REF_SETCELLCONTENT
GUI_REF_GETCELLCONTENT = _x64dbg.GUI_REF_GETCELLCONTENT
GUI_REF_RELOADDATA = _x64dbg.GUI_REF_RELOADDATA
GUI_REF_SETSINGLESELECTION = _x64dbg.GUI_REF_SETSINGLESELECTION
GUI_REF_SETPROGRESS = _x64dbg.GUI_REF_SETPROGRESS
GUI_REF_SETCURRENTTASKPROGRESS = _x64dbg.GUI_REF_SETCURRENTTASKPROGRESS
GUI_REF_SETSEARCHSTARTCOL = _x64dbg.GUI_REF_SETSEARCHSTARTCOL
GUI_STACK_DUMP_AT = _x64dbg.GUI_STACK_DUMP_AT
GUI_UPDATE_DUMP_VIEW = _x64dbg.GUI_UPDATE_DUMP_VIEW
GUI_UPDATE_THREAD_VIEW = _x64dbg.GUI_UPDATE_THREAD_VIEW
GUI_ADD_RECENT_FILE = _x64dbg.GUI_ADD_RECENT_FILE
GUI_SET_LAST_EXCEPTION = _x64dbg.GUI_SET_LAST_EXCEPTION
GUI_GET_DISASSEMBLY = _x64dbg.GUI_GET_DISASSEMBLY
GUI_MENU_ADD = _x64dbg.GUI_MENU_ADD
GUI_MENU_ADD_ENTRY = _x64dbg.GUI_MENU_ADD_ENTRY
GUI_MENU_ADD_SEPARATOR = _x64dbg.GUI_MENU_ADD_SEPARATOR
GUI_MENU_CLEAR = _x64dbg.GUI_MENU_CLEAR
GUI_SELECTION_GET = _x64dbg.GUI_SELECTION_GET
GUI_SELECTION_SET = _x64dbg.GUI_SELECTION_SET
GUI_GETLINE_WINDOW = _x64dbg.GUI_GETLINE_WINDOW
GUI_AUTOCOMPLETE_ADDCMD = _x64dbg.GUI_AUTOCOMPLETE_ADDCMD
GUI_AUTOCOMPLETE_DELCMD = _x64dbg.GUI_AUTOCOMPLETE_DELCMD
GUI_AUTOCOMPLETE_CLEARALL = _x64dbg.GUI_AUTOCOMPLETE_CLEARALL
GUI_SCRIPT_ENABLEHIGHLIGHTING = _x64dbg.GUI_SCRIPT_ENABLEHIGHLIGHTING
GUI_ADD_MSG_TO_STATUSBAR = _x64dbg.GUI_ADD_MSG_TO_STATUSBAR
GUI_UPDATE_SIDEBAR = _x64dbg.GUI_UPDATE_SIDEBAR
GUI_REPAINT_TABLE_VIEW = _x64dbg.GUI_REPAINT_TABLE_VIEW
GUI_UPDATE_PATCHES = _x64dbg.GUI_UPDATE_PATCHES
GUI_UPDATE_CALLSTACK = _x64dbg.GUI_UPDATE_CALLSTACK
GUI_UPDATE_SEHCHAIN = _x64dbg.GUI_UPDATE_SEHCHAIN
GUI_SYMBOL_REFRESH_CURRENT = _x64dbg.GUI_SYMBOL_REFRESH_CURRENT
GUI_UPDATE_MEMORY_VIEW = _x64dbg.GUI_UPDATE_MEMORY_VIEW
GUI_REF_INITIALIZE = _x64dbg.GUI_REF_INITIALIZE
GUI_LOAD_SOURCE_FILE = _x64dbg.GUI_LOAD_SOURCE_FILE
GUI_MENU_SET_ICON = _x64dbg.GUI_MENU_SET_ICON
GUI_MENU_SET_ENTRY_ICON = _x64dbg.GUI_MENU_SET_ENTRY_ICON
GUI_SHOW_CPU = _x64dbg.GUI_SHOW_CPU
GUI_ADD_QWIDGET_TAB = _x64dbg.GUI_ADD_QWIDGET_TAB
GUI_SHOW_QWIDGET_TAB = _x64dbg.GUI_SHOW_QWIDGET_TAB
GUI_CLOSE_QWIDGET_TAB = _x64dbg.GUI_CLOSE_QWIDGET_TAB
GUI_EXECUTE_ON_GUI_THREAD = _x64dbg.GUI_EXECUTE_ON_GUI_THREAD
GUI_UPDATE_TIME_WASTED_COUNTER = _x64dbg.GUI_UPDATE_TIME_WASTED_COUNTER
GUI_SET_GLOBAL_NOTES = _x64dbg.GUI_SET_GLOBAL_NOTES
GUI_GET_GLOBAL_NOTES = _x64dbg.GUI_GET_GLOBAL_NOTES
GUI_SET_DEBUGGEE_NOTES = _x64dbg.GUI_SET_DEBUGGEE_NOTES
GUI_GET_DEBUGGEE_NOTES = _x64dbg.GUI_GET_DEBUGGEE_NOTES
GUI_DUMP_AT_N = _x64dbg.GUI_DUMP_AT_N
GUI_DISPLAY_WARNING = _x64dbg.GUI_DISPLAY_WARNING
GUI_REGISTER_SCRIPT_LANG = _x64dbg.GUI_REGISTER_SCRIPT_LANG
GUI_UNREGISTER_SCRIPT_LANG = _x64dbg.GUI_UNREGISTER_SCRIPT_LANG
GUI_UPDATE_ARGUMENT_VIEW = _x64dbg.GUI_UPDATE_ARGUMENT_VIEW
GUI_FOCUS_VIEW = _x64dbg.GUI_FOCUS_VIEW
GUI_UPDATE_WATCH_VIEW = _x64dbg.GUI_UPDATE_WATCH_VIEW
GUI_LOAD_GRAPH = _x64dbg.GUI_LOAD_GRAPH
GUI_GRAPH_AT = _x64dbg.GUI_GRAPH_AT
GUI_UPDATE_GRAPH_VIEW = _x64dbg.GUI_UPDATE_GRAPH_VIEW
GUI_SET_LOG_ENABLED = _x64dbg.GUI_SET_LOG_ENABLED
GUI_ADD_FAVOURITE_TOOL = _x64dbg.GUI_ADD_FAVOURITE_TOOL
GUI_ADD_FAVOURITE_COMMAND = _x64dbg.GUI_ADD_FAVOURITE_COMMAND
GUI_SET_FAVOURITE_TOOL_SHORTCUT = _x64dbg.GUI_SET_FAVOURITE_TOOL_SHORTCUT
GUI_FOLD_DISASSEMBLY = _x64dbg.GUI_FOLD_DISASSEMBLY
GUI_SELECT_IN_MEMORY_MAP = _x64dbg.GUI_SELECT_IN_MEMORY_MAP
GUI_GET_ACTIVE_VIEW = _x64dbg.GUI_GET_ACTIVE_VIEW
GUI_MENU_SET_ENTRY_CHECKED = _x64dbg.GUI_MENU_SET_ENTRY_CHECKED
GUI_ADD_INFO_LINE = _x64dbg.GUI_ADD_INFO_LINE
GUI_PROCESS_EVENTS = _x64dbg.GUI_PROCESS_EVENTS
GUI_TYPE_ADDNODE = _x64dbg.GUI_TYPE_ADDNODE
GUI_TYPE_CLEAR = _x64dbg.GUI_TYPE_CLEAR
GUI_UPDATE_TYPE_WIDGET = _x64dbg.GUI_UPDATE_TYPE_WIDGET
GUI_CLOSE_APPLICATION = _x64dbg.GUI_CLOSE_APPLICATION
GUI_MENU_SET_VISIBLE = _x64dbg.GUI_MENU_SET_VISIBLE
GUI_MENU_SET_ENTRY_VISIBLE = _x64dbg.GUI_MENU_SET_ENTRY_VISIBLE
GUI_MENU_SET_NAME = _x64dbg.GUI_MENU_SET_NAME
GUI_MENU_SET_ENTRY_NAME = _x64dbg.GUI_MENU_SET_ENTRY_NAME
GUI_FLUSH_LOG = _x64dbg.GUI_FLUSH_LOG
GUI_MENU_SET_ENTRY_HOTKEY = _x64dbg.GUI_MENU_SET_ENTRY_HOTKEY
GUI_REF_SEARCH_GETROWCOUNT = _x64dbg.GUI_REF_SEARCH_GETROWCOUNT
GUI_REF_SEARCH_GETCELLCONTENT = _x64dbg.GUI_REF_SEARCH_GETCELLCONTENT
GUI_MENU_REMOVE = _x64dbg.GUI_MENU_REMOVE
class CELLINFO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CELLINFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CELLINFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["row"] = _x64dbg.CELLINFO_row_set
    __swig_getmethods__["row"] = _x64dbg.CELLINFO_row_get
    if _newclass:
        row = _swig_property(_x64dbg.CELLINFO_row_get, _x64dbg.CELLINFO_row_set)
    __swig_setmethods__["col"] = _x64dbg.CELLINFO_col_set
    __swig_getmethods__["col"] = _x64dbg.CELLINFO_col_get
    if _newclass:
        col = _swig_property(_x64dbg.CELLINFO_col_get, _x64dbg.CELLINFO_col_set)
    __swig_setmethods__["str"] = _x64dbg.CELLINFO_str_set
    __swig_getmethods__["str"] = _x64dbg.CELLINFO_str_get
    if _newclass:
        str = _swig_property(_x64dbg.CELLINFO_str_get, _x64dbg.CELLINFO_str_set)

    def __init__(self):
        this = _x64dbg.new_CELLINFO()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_CELLINFO
    __del__ = lambda self: None
CELLINFO_swigregister = _x64dbg.CELLINFO_swigregister
CELLINFO_swigregister(CELLINFO)

class SELECTIONDATA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SELECTIONDATA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SELECTIONDATA, name)
    __repr__ = _swig_repr
    __swig_setmethods__["start"] = _x64dbg.SELECTIONDATA_start_set
    __swig_getmethods__["start"] = _x64dbg.SELECTIONDATA_start_get
    if _newclass:
        start = _swig_property(_x64dbg.SELECTIONDATA_start_get, _x64dbg.SELECTIONDATA_start_set)
    __swig_setmethods__["end"] = _x64dbg.SELECTIONDATA_end_set
    __swig_getmethods__["end"] = _x64dbg.SELECTIONDATA_end_get
    if _newclass:
        end = _swig_property(_x64dbg.SELECTIONDATA_end_get, _x64dbg.SELECTIONDATA_end_set)

    def __init__(self):
        this = _x64dbg.new_SELECTIONDATA()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_SELECTIONDATA
    __del__ = lambda self: None
SELECTIONDATA_swigregister = _x64dbg.SELECTIONDATA_swigregister
SELECTIONDATA_swigregister(SELECTIONDATA)

class ICONDATA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICONDATA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICONDATA, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _x64dbg.ICONDATA_data_set
    __swig_getmethods__["data"] = _x64dbg.ICONDATA_data_get
    if _newclass:
        data = _swig_property(_x64dbg.ICONDATA_data_get, _x64dbg.ICONDATA_data_set)
    __swig_setmethods__["size"] = _x64dbg.ICONDATA_size_set
    __swig_getmethods__["size"] = _x64dbg.ICONDATA_size_get
    if _newclass:
        size = _swig_property(_x64dbg.ICONDATA_size_get, _x64dbg.ICONDATA_size_set)

    def __init__(self):
        this = _x64dbg.new_ICONDATA()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_ICONDATA
    __del__ = lambda self: None
ICONDATA_swigregister = _x64dbg.ICONDATA_swigregister
ICONDATA_swigregister(ICONDATA)

class SCRIPTTYPEINFO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SCRIPTTYPEINFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SCRIPTTYPEINFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _x64dbg.SCRIPTTYPEINFO_name_set
    __swig_getmethods__["name"] = _x64dbg.SCRIPTTYPEINFO_name_get
    if _newclass:
        name = _swig_property(_x64dbg.SCRIPTTYPEINFO_name_get, _x64dbg.SCRIPTTYPEINFO_name_set)
    __swig_setmethods__["id"] = _x64dbg.SCRIPTTYPEINFO_id_set
    __swig_getmethods__["id"] = _x64dbg.SCRIPTTYPEINFO_id_get
    if _newclass:
        id = _swig_property(_x64dbg.SCRIPTTYPEINFO_id_get, _x64dbg.SCRIPTTYPEINFO_id_set)
    __swig_setmethods__["execute"] = _x64dbg.SCRIPTTYPEINFO_execute_set
    __swig_getmethods__["execute"] = _x64dbg.SCRIPTTYPEINFO_execute_get
    if _newclass:
        execute = _swig_property(_x64dbg.SCRIPTTYPEINFO_execute_get, _x64dbg.SCRIPTTYPEINFO_execute_set)
    __swig_setmethods__["completeCommand"] = _x64dbg.SCRIPTTYPEINFO_completeCommand_set
    __swig_getmethods__["completeCommand"] = _x64dbg.SCRIPTTYPEINFO_completeCommand_get
    if _newclass:
        completeCommand = _swig_property(_x64dbg.SCRIPTTYPEINFO_completeCommand_get, _x64dbg.SCRIPTTYPEINFO_completeCommand_set)

    def __init__(self):
        this = _x64dbg.new_SCRIPTTYPEINFO()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_SCRIPTTYPEINFO
    __del__ = lambda self: None
SCRIPTTYPEINFO_swigregister = _x64dbg.SCRIPTTYPEINFO_swigregister
SCRIPTTYPEINFO_swigregister(SCRIPTTYPEINFO)

class ACTIVEVIEW(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ACTIVEVIEW, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ACTIVEVIEW, name)
    __repr__ = _swig_repr
    __swig_setmethods__["titleHwnd"] = _x64dbg.ACTIVEVIEW_titleHwnd_set
    __swig_getmethods__["titleHwnd"] = _x64dbg.ACTIVEVIEW_titleHwnd_get
    if _newclass:
        titleHwnd = _swig_property(_x64dbg.ACTIVEVIEW_titleHwnd_get, _x64dbg.ACTIVEVIEW_titleHwnd_set)
    __swig_setmethods__["classHwnd"] = _x64dbg.ACTIVEVIEW_classHwnd_set
    __swig_getmethods__["classHwnd"] = _x64dbg.ACTIVEVIEW_classHwnd_get
    if _newclass:
        classHwnd = _swig_property(_x64dbg.ACTIVEVIEW_classHwnd_get, _x64dbg.ACTIVEVIEW_classHwnd_set)
    __swig_setmethods__["title"] = _x64dbg.ACTIVEVIEW_title_set
    __swig_getmethods__["title"] = _x64dbg.ACTIVEVIEW_title_get
    if _newclass:
        title = _swig_property(_x64dbg.ACTIVEVIEW_title_get, _x64dbg.ACTIVEVIEW_title_set)
    __swig_setmethods__["className"] = _x64dbg.ACTIVEVIEW_className_set
    __swig_getmethods__["className"] = _x64dbg.ACTIVEVIEW_className_get
    if _newclass:
        className = _swig_property(_x64dbg.ACTIVEVIEW_className_get, _x64dbg.ACTIVEVIEW_className_set)

    def __init__(self):
        this = _x64dbg.new_ACTIVEVIEW()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_ACTIVEVIEW
    __del__ = lambda self: None
ACTIVEVIEW_swigregister = _x64dbg.ACTIVEVIEW_swigregister
ACTIVEVIEW_swigregister(ACTIVEVIEW)

class TYPEDESCRIPTOR(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TYPEDESCRIPTOR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TYPEDESCRIPTOR, name)
    __repr__ = _swig_repr
    __swig_setmethods__["expanded"] = _x64dbg.TYPEDESCRIPTOR_expanded_set
    __swig_getmethods__["expanded"] = _x64dbg.TYPEDESCRIPTOR_expanded_get
    if _newclass:
        expanded = _swig_property(_x64dbg.TYPEDESCRIPTOR_expanded_get, _x64dbg.TYPEDESCRIPTOR_expanded_set)
    __swig_setmethods__["reverse"] = _x64dbg.TYPEDESCRIPTOR_reverse_set
    __swig_getmethods__["reverse"] = _x64dbg.TYPEDESCRIPTOR_reverse_get
    if _newclass:
        reverse = _swig_property(_x64dbg.TYPEDESCRIPTOR_reverse_get, _x64dbg.TYPEDESCRIPTOR_reverse_set)
    __swig_setmethods__["name"] = _x64dbg.TYPEDESCRIPTOR_name_set
    __swig_getmethods__["name"] = _x64dbg.TYPEDESCRIPTOR_name_get
    if _newclass:
        name = _swig_property(_x64dbg.TYPEDESCRIPTOR_name_get, _x64dbg.TYPEDESCRIPTOR_name_set)
    __swig_setmethods__["addr"] = _x64dbg.TYPEDESCRIPTOR_addr_set
    __swig_getmethods__["addr"] = _x64dbg.TYPEDESCRIPTOR_addr_get
    if _newclass:
        addr = _swig_property(_x64dbg.TYPEDESCRIPTOR_addr_get, _x64dbg.TYPEDESCRIPTOR_addr_set)
    __swig_setmethods__["offset"] = _x64dbg.TYPEDESCRIPTOR_offset_set
    __swig_getmethods__["offset"] = _x64dbg.TYPEDESCRIPTOR_offset_get
    if _newclass:
        offset = _swig_property(_x64dbg.TYPEDESCRIPTOR_offset_get, _x64dbg.TYPEDESCRIPTOR_offset_set)
    __swig_setmethods__["id"] = _x64dbg.TYPEDESCRIPTOR_id_set
    __swig_getmethods__["id"] = _x64dbg.TYPEDESCRIPTOR_id_get
    if _newclass:
        id = _swig_property(_x64dbg.TYPEDESCRIPTOR_id_get, _x64dbg.TYPEDESCRIPTOR_id_set)
    __swig_setmethods__["size"] = _x64dbg.TYPEDESCRIPTOR_size_set
    __swig_getmethods__["size"] = _x64dbg.TYPEDESCRIPTOR_size_get
    if _newclass:
        size = _swig_property(_x64dbg.TYPEDESCRIPTOR_size_get, _x64dbg.TYPEDESCRIPTOR_size_set)
    __swig_setmethods__["callback"] = _x64dbg.TYPEDESCRIPTOR_callback_set
    __swig_getmethods__["callback"] = _x64dbg.TYPEDESCRIPTOR_callback_get
    if _newclass:
        callback = _swig_property(_x64dbg.TYPEDESCRIPTOR_callback_get, _x64dbg.TYPEDESCRIPTOR_callback_set)
    __swig_setmethods__["userdata"] = _x64dbg.TYPEDESCRIPTOR_userdata_set
    __swig_getmethods__["userdata"] = _x64dbg.TYPEDESCRIPTOR_userdata_get
    if _newclass:
        userdata = _swig_property(_x64dbg.TYPEDESCRIPTOR_userdata_get, _x64dbg.TYPEDESCRIPTOR_userdata_set)

    def __init__(self):
        this = _x64dbg.new_TYPEDESCRIPTOR()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_TYPEDESCRIPTOR
    __del__ = lambda self: None
TYPEDESCRIPTOR_swigregister = _x64dbg.TYPEDESCRIPTOR_swigregister
TYPEDESCRIPTOR_swigregister(TYPEDESCRIPTOR)


def GuiTranslateText(Source):
    return _x64dbg.GuiTranslateText(Source)
GuiTranslateText = _x64dbg.GuiTranslateText

def GuiDisasmAt(addr, cip):
    return _x64dbg.GuiDisasmAt(addr, cip)
GuiDisasmAt = _x64dbg.GuiDisasmAt

def GuiSetDebugState(state):
    return _x64dbg.GuiSetDebugState(state)
GuiSetDebugState = _x64dbg.GuiSetDebugState

def GuiSetDebugStateFast(state):
    return _x64dbg.GuiSetDebugStateFast(state)
GuiSetDebugStateFast = _x64dbg.GuiSetDebugStateFast

def GuiAddLogMessage(msg):
    return _x64dbg.GuiAddLogMessage(msg)
GuiAddLogMessage = _x64dbg.GuiAddLogMessage

def GuiLogClear():
    return _x64dbg.GuiLogClear()
GuiLogClear = _x64dbg.GuiLogClear

def GuiUpdateAllViews():
    return _x64dbg.GuiUpdateAllViews()
GuiUpdateAllViews = _x64dbg.GuiUpdateAllViews

def GuiUpdateRegisterView():
    return _x64dbg.GuiUpdateRegisterView()
GuiUpdateRegisterView = _x64dbg.GuiUpdateRegisterView

def GuiUpdateDisassemblyView():
    return _x64dbg.GuiUpdateDisassemblyView()
GuiUpdateDisassemblyView = _x64dbg.GuiUpdateDisassemblyView

def GuiUpdateBreakpointsView():
    return _x64dbg.GuiUpdateBreakpointsView()
GuiUpdateBreakpointsView = _x64dbg.GuiUpdateBreakpointsView

def GuiUpdateWindowTitle(filename):
    return _x64dbg.GuiUpdateWindowTitle(filename)
GuiUpdateWindowTitle = _x64dbg.GuiUpdateWindowTitle

def GuiGetWindowHandle():
    return _x64dbg.GuiGetWindowHandle()
GuiGetWindowHandle = _x64dbg.GuiGetWindowHandle

def GuiDumpAt(va):
    return _x64dbg.GuiDumpAt(va)
GuiDumpAt = _x64dbg.GuiDumpAt

def GuiScriptAdd(count, lines):
    return _x64dbg.GuiScriptAdd(count, lines)
GuiScriptAdd = _x64dbg.GuiScriptAdd

def GuiScriptClear():
    return _x64dbg.GuiScriptClear()
GuiScriptClear = _x64dbg.GuiScriptClear

def GuiScriptSetIp(line):
    return _x64dbg.GuiScriptSetIp(line)
GuiScriptSetIp = _x64dbg.GuiScriptSetIp

def GuiScriptError(line, message):
    return _x64dbg.GuiScriptError(line, message)
GuiScriptError = _x64dbg.GuiScriptError

def GuiScriptSetTitle(title):
    return _x64dbg.GuiScriptSetTitle(title)
GuiScriptSetTitle = _x64dbg.GuiScriptSetTitle

def GuiScriptSetInfoLine(line, info):
    return _x64dbg.GuiScriptSetInfoLine(line, info)
GuiScriptSetInfoLine = _x64dbg.GuiScriptSetInfoLine

def GuiScriptMessage(message):
    return _x64dbg.GuiScriptMessage(message)
GuiScriptMessage = _x64dbg.GuiScriptMessage

def GuiScriptMsgyn(message):
    return _x64dbg.GuiScriptMsgyn(message)
GuiScriptMsgyn = _x64dbg.GuiScriptMsgyn

def GuiScriptEnableHighlighting(enable):
    return _x64dbg.GuiScriptEnableHighlighting(enable)
GuiScriptEnableHighlighting = _x64dbg.GuiScriptEnableHighlighting

def GuiSymbolLogAdd(message):
    return _x64dbg.GuiSymbolLogAdd(message)
GuiSymbolLogAdd = _x64dbg.GuiSymbolLogAdd

def GuiSymbolLogClear():
    return _x64dbg.GuiSymbolLogClear()
GuiSymbolLogClear = _x64dbg.GuiSymbolLogClear

def GuiSymbolSetProgress(percent):
    return _x64dbg.GuiSymbolSetProgress(percent)
GuiSymbolSetProgress = _x64dbg.GuiSymbolSetProgress

def GuiSymbolUpdateModuleList(count, modules):
    return _x64dbg.GuiSymbolUpdateModuleList(count, modules)
GuiSymbolUpdateModuleList = _x64dbg.GuiSymbolUpdateModuleList

def GuiSymbolRefreshCurrent():
    return _x64dbg.GuiSymbolRefreshCurrent()
GuiSymbolRefreshCurrent = _x64dbg.GuiSymbolRefreshCurrent

def GuiReferenceAddColumn(width, title):
    return _x64dbg.GuiReferenceAddColumn(width, title)
GuiReferenceAddColumn = _x64dbg.GuiReferenceAddColumn

def GuiReferenceSetRowCount(count):
    return _x64dbg.GuiReferenceSetRowCount(count)
GuiReferenceSetRowCount = _x64dbg.GuiReferenceSetRowCount

def GuiReferenceGetRowCount():
    return _x64dbg.GuiReferenceGetRowCount()
GuiReferenceGetRowCount = _x64dbg.GuiReferenceGetRowCount

def GuiReferenceSearchGetRowCount():
    return _x64dbg.GuiReferenceSearchGetRowCount()
GuiReferenceSearchGetRowCount = _x64dbg.GuiReferenceSearchGetRowCount

def GuiReferenceDeleteAllColumns():
    return _x64dbg.GuiReferenceDeleteAllColumns()
GuiReferenceDeleteAllColumns = _x64dbg.GuiReferenceDeleteAllColumns

def GuiReferenceInitialize(name):
    return _x64dbg.GuiReferenceInitialize(name)
GuiReferenceInitialize = _x64dbg.GuiReferenceInitialize

def GuiReferenceSetCellContent(row, col, str):
    return _x64dbg.GuiReferenceSetCellContent(row, col, str)
GuiReferenceSetCellContent = _x64dbg.GuiReferenceSetCellContent

def GuiReferenceGetCellContent(row, col):
    return _x64dbg.GuiReferenceGetCellContent(row, col)
GuiReferenceGetCellContent = _x64dbg.GuiReferenceGetCellContent

def GuiReferenceSearchGetCellContent(row, col):
    return _x64dbg.GuiReferenceSearchGetCellContent(row, col)
GuiReferenceSearchGetCellContent = _x64dbg.GuiReferenceSearchGetCellContent

def GuiReferenceReloadData():
    return _x64dbg.GuiReferenceReloadData()
GuiReferenceReloadData = _x64dbg.GuiReferenceReloadData

def GuiReferenceSetSingleSelection(index, scroll):
    return _x64dbg.GuiReferenceSetSingleSelection(index, scroll)
GuiReferenceSetSingleSelection = _x64dbg.GuiReferenceSetSingleSelection

def GuiReferenceSetProgress(progress):
    return _x64dbg.GuiReferenceSetProgress(progress)
GuiReferenceSetProgress = _x64dbg.GuiReferenceSetProgress

def GuiReferenceSetCurrentTaskProgress(progress, taskTitle):
    return _x64dbg.GuiReferenceSetCurrentTaskProgress(progress, taskTitle)
GuiReferenceSetCurrentTaskProgress = _x64dbg.GuiReferenceSetCurrentTaskProgress

def GuiReferenceSetSearchStartCol(col):
    return _x64dbg.GuiReferenceSetSearchStartCol(col)
GuiReferenceSetSearchStartCol = _x64dbg.GuiReferenceSetSearchStartCol

def GuiStackDumpAt(addr, csp):
    return _x64dbg.GuiStackDumpAt(addr, csp)
GuiStackDumpAt = _x64dbg.GuiStackDumpAt

def GuiUpdateDumpView():
    return _x64dbg.GuiUpdateDumpView()
GuiUpdateDumpView = _x64dbg.GuiUpdateDumpView

def GuiUpdateWatchView():
    return _x64dbg.GuiUpdateWatchView()
GuiUpdateWatchView = _x64dbg.GuiUpdateWatchView

def GuiUpdateThreadView():
    return _x64dbg.GuiUpdateThreadView()
GuiUpdateThreadView = _x64dbg.GuiUpdateThreadView

def GuiUpdateMemoryView():
    return _x64dbg.GuiUpdateMemoryView()
GuiUpdateMemoryView = _x64dbg.GuiUpdateMemoryView

def GuiAddRecentFile(file):
    return _x64dbg.GuiAddRecentFile(file)
GuiAddRecentFile = _x64dbg.GuiAddRecentFile

def GuiSetLastException(exception):
    return _x64dbg.GuiSetLastException(exception)
GuiSetLastException = _x64dbg.GuiSetLastException

def GuiGetDisassembly(addr, text):
    return _x64dbg.GuiGetDisassembly(addr, text)
GuiGetDisassembly = _x64dbg.GuiGetDisassembly

def GuiMenuAdd(hMenu, title):
    return _x64dbg.GuiMenuAdd(hMenu, title)
GuiMenuAdd = _x64dbg.GuiMenuAdd

def GuiMenuAddEntry(hMenu, title):
    return _x64dbg.GuiMenuAddEntry(hMenu, title)
GuiMenuAddEntry = _x64dbg.GuiMenuAddEntry

def GuiMenuAddSeparator(hMenu):
    return _x64dbg.GuiMenuAddSeparator(hMenu)
GuiMenuAddSeparator = _x64dbg.GuiMenuAddSeparator

def GuiMenuClear(hMenu):
    return _x64dbg.GuiMenuClear(hMenu)
GuiMenuClear = _x64dbg.GuiMenuClear

def GuiMenuRemove(hEntryMenu):
    return _x64dbg.GuiMenuRemove(hEntryMenu)
GuiMenuRemove = _x64dbg.GuiMenuRemove

def GuiSelectionGet(hWindow, selection):
    return _x64dbg.GuiSelectionGet(hWindow, selection)
GuiSelectionGet = _x64dbg.GuiSelectionGet

def GuiSelectionSet(hWindow, selection):
    return _x64dbg.GuiSelectionSet(hWindow, selection)
GuiSelectionSet = _x64dbg.GuiSelectionSet

def GuiGetLineWindow(title, text):
    return _x64dbg.GuiGetLineWindow(title, text)
GuiGetLineWindow = _x64dbg.GuiGetLineWindow

def GuiAutoCompleteAddCmd(cmd):
    return _x64dbg.GuiAutoCompleteAddCmd(cmd)
GuiAutoCompleteAddCmd = _x64dbg.GuiAutoCompleteAddCmd

def GuiAutoCompleteDelCmd(cmd):
    return _x64dbg.GuiAutoCompleteDelCmd(cmd)
GuiAutoCompleteDelCmd = _x64dbg.GuiAutoCompleteDelCmd

def GuiAutoCompleteClearAll():
    return _x64dbg.GuiAutoCompleteClearAll()
GuiAutoCompleteClearAll = _x64dbg.GuiAutoCompleteClearAll

def GuiAddStatusBarMessage(msg):
    return _x64dbg.GuiAddStatusBarMessage(msg)
GuiAddStatusBarMessage = _x64dbg.GuiAddStatusBarMessage

def GuiUpdateSideBar():
    return _x64dbg.GuiUpdateSideBar()
GuiUpdateSideBar = _x64dbg.GuiUpdateSideBar

def GuiRepaintTableView():
    return _x64dbg.GuiRepaintTableView()
GuiRepaintTableView = _x64dbg.GuiRepaintTableView

def GuiUpdatePatches():
    return _x64dbg.GuiUpdatePatches()
GuiUpdatePatches = _x64dbg.GuiUpdatePatches

def GuiUpdateCallStack():
    return _x64dbg.GuiUpdateCallStack()
GuiUpdateCallStack = _x64dbg.GuiUpdateCallStack

def GuiUpdateSEHChain():
    return _x64dbg.GuiUpdateSEHChain()
GuiUpdateSEHChain = _x64dbg.GuiUpdateSEHChain

def GuiLoadSourceFile(path, line):
    return _x64dbg.GuiLoadSourceFile(path, line)
GuiLoadSourceFile = _x64dbg.GuiLoadSourceFile

def GuiMenuSetIcon(hMenu, icon):
    return _x64dbg.GuiMenuSetIcon(hMenu, icon)
GuiMenuSetIcon = _x64dbg.GuiMenuSetIcon

def GuiMenuSetEntryIcon(hEntry, icon):
    return _x64dbg.GuiMenuSetEntryIcon(hEntry, icon)
GuiMenuSetEntryIcon = _x64dbg.GuiMenuSetEntryIcon

def GuiMenuSetEntryChecked(hEntry, checked):
    return _x64dbg.GuiMenuSetEntryChecked(hEntry, checked)
GuiMenuSetEntryChecked = _x64dbg.GuiMenuSetEntryChecked

def GuiMenuSetVisible(hMenu, visible):
    return _x64dbg.GuiMenuSetVisible(hMenu, visible)
GuiMenuSetVisible = _x64dbg.GuiMenuSetVisible

def GuiMenuSetEntryVisible(hEntry, visible):
    return _x64dbg.GuiMenuSetEntryVisible(hEntry, visible)
GuiMenuSetEntryVisible = _x64dbg.GuiMenuSetEntryVisible

def GuiMenuSetName(hMenu, name):
    return _x64dbg.GuiMenuSetName(hMenu, name)
GuiMenuSetName = _x64dbg.GuiMenuSetName

def GuiMenuSetEntryName(hEntry, name):
    return _x64dbg.GuiMenuSetEntryName(hEntry, name)
GuiMenuSetEntryName = _x64dbg.GuiMenuSetEntryName

def GuiMenuSetEntryHotkey(hEntry, hack):
    return _x64dbg.GuiMenuSetEntryHotkey(hEntry, hack)
GuiMenuSetEntryHotkey = _x64dbg.GuiMenuSetEntryHotkey

def GuiShowCpu():
    return _x64dbg.GuiShowCpu()
GuiShowCpu = _x64dbg.GuiShowCpu

def GuiAddQWidgetTab(qWidget):
    return _x64dbg.GuiAddQWidgetTab(qWidget)
GuiAddQWidgetTab = _x64dbg.GuiAddQWidgetTab

def GuiShowQWidgetTab(qWidget):
    return _x64dbg.GuiShowQWidgetTab(qWidget)
GuiShowQWidgetTab = _x64dbg.GuiShowQWidgetTab

def GuiCloseQWidgetTab(qWidget):
    return _x64dbg.GuiCloseQWidgetTab(qWidget)
GuiCloseQWidgetTab = _x64dbg.GuiCloseQWidgetTab

def GuiExecuteOnGuiThread(cbGuiThread):
    return _x64dbg.GuiExecuteOnGuiThread(cbGuiThread)
GuiExecuteOnGuiThread = _x64dbg.GuiExecuteOnGuiThread

def GuiUpdateTimeWastedCounter():
    return _x64dbg.GuiUpdateTimeWastedCounter()
GuiUpdateTimeWastedCounter = _x64dbg.GuiUpdateTimeWastedCounter

def GuiSetGlobalNotes(text):
    return _x64dbg.GuiSetGlobalNotes(text)
GuiSetGlobalNotes = _x64dbg.GuiSetGlobalNotes

def GuiGetGlobalNotes(text):
    return _x64dbg.GuiGetGlobalNotes(text)
GuiGetGlobalNotes = _x64dbg.GuiGetGlobalNotes

def GuiSetDebuggeeNotes(text):
    return _x64dbg.GuiSetDebuggeeNotes(text)
GuiSetDebuggeeNotes = _x64dbg.GuiSetDebuggeeNotes

def GuiGetDebuggeeNotes(text):
    return _x64dbg.GuiGetDebuggeeNotes(text)
GuiGetDebuggeeNotes = _x64dbg.GuiGetDebuggeeNotes

def GuiDumpAtN(va, index):
    return _x64dbg.GuiDumpAtN(va, index)
GuiDumpAtN = _x64dbg.GuiDumpAtN

def GuiDisplayWarning(title, text):
    return _x64dbg.GuiDisplayWarning(title, text)
GuiDisplayWarning = _x64dbg.GuiDisplayWarning

def GuiRegisterScriptLanguage(info):
    return _x64dbg.GuiRegisterScriptLanguage(info)
GuiRegisterScriptLanguage = _x64dbg.GuiRegisterScriptLanguage

def GuiUnregisterScriptLanguage(id):
    return _x64dbg.GuiUnregisterScriptLanguage(id)
GuiUnregisterScriptLanguage = _x64dbg.GuiUnregisterScriptLanguage

def GuiUpdateArgumentWidget():
    return _x64dbg.GuiUpdateArgumentWidget()
GuiUpdateArgumentWidget = _x64dbg.GuiUpdateArgumentWidget

def GuiFocusView(hWindow):
    return _x64dbg.GuiFocusView(hWindow)
GuiFocusView = _x64dbg.GuiFocusView

def GuiIsUpdateDisabled():
    return _x64dbg.GuiIsUpdateDisabled()
GuiIsUpdateDisabled = _x64dbg.GuiIsUpdateDisabled

def GuiUpdateEnable(updateNow):
    return _x64dbg.GuiUpdateEnable(updateNow)
GuiUpdateEnable = _x64dbg.GuiUpdateEnable

def GuiUpdateDisable():
    return _x64dbg.GuiUpdateDisable()
GuiUpdateDisable = _x64dbg.GuiUpdateDisable

def GuiLoadGraph(graph, addr):
    return _x64dbg.GuiLoadGraph(graph, addr)
GuiLoadGraph = _x64dbg.GuiLoadGraph

def GuiGraphAt(addr):
    return _x64dbg.GuiGraphAt(addr)
GuiGraphAt = _x64dbg.GuiGraphAt

def GuiUpdateGraphView():
    return _x64dbg.GuiUpdateGraphView()
GuiUpdateGraphView = _x64dbg.GuiUpdateGraphView

def GuiDisableLog():
    return _x64dbg.GuiDisableLog()
GuiDisableLog = _x64dbg.GuiDisableLog

def GuiEnableLog():
    return _x64dbg.GuiEnableLog()
GuiEnableLog = _x64dbg.GuiEnableLog

def GuiAddFavouriteTool(name, description):
    return _x64dbg.GuiAddFavouriteTool(name, description)
GuiAddFavouriteTool = _x64dbg.GuiAddFavouriteTool

def GuiAddFavouriteCommand(name, shortcut):
    return _x64dbg.GuiAddFavouriteCommand(name, shortcut)
GuiAddFavouriteCommand = _x64dbg.GuiAddFavouriteCommand

def GuiSetFavouriteToolShortcut(name, shortcut):
    return _x64dbg.GuiSetFavouriteToolShortcut(name, shortcut)
GuiSetFavouriteToolShortcut = _x64dbg.GuiSetFavouriteToolShortcut

def GuiFoldDisassembly(startAddress, length):
    return _x64dbg.GuiFoldDisassembly(startAddress, length)
GuiFoldDisassembly = _x64dbg.GuiFoldDisassembly

def GuiSelectInMemoryMap(addr):
    return _x64dbg.GuiSelectInMemoryMap(addr)
GuiSelectInMemoryMap = _x64dbg.GuiSelectInMemoryMap

def GuiGetActiveView(activeView):
    return _x64dbg.GuiGetActiveView(activeView)
GuiGetActiveView = _x64dbg.GuiGetActiveView

def GuiAddInfoLine(infoLine):
    return _x64dbg.GuiAddInfoLine(infoLine)
GuiAddInfoLine = _x64dbg.GuiAddInfoLine

def GuiProcessEvents():
    return _x64dbg.GuiProcessEvents()
GuiProcessEvents = _x64dbg.GuiProcessEvents

def GuiTypeAddNode(parent, type):
    return _x64dbg.GuiTypeAddNode(parent, type)
GuiTypeAddNode = _x64dbg.GuiTypeAddNode

def GuiTypeClear():
    return _x64dbg.GuiTypeClear()
GuiTypeClear = _x64dbg.GuiTypeClear

def GuiUpdateTypeWidget():
    return _x64dbg.GuiUpdateTypeWidget()
GuiUpdateTypeWidget = _x64dbg.GuiUpdateTypeWidget

def GuiCloseApplication():
    return _x64dbg.GuiCloseApplication()
GuiCloseApplication = _x64dbg.GuiCloseApplication

def GuiFlushLog():
    return _x64dbg.GuiFlushLog()
GuiFlushLog = _x64dbg.GuiFlushLog
PLUG_SDKVERSION = _x64dbg.PLUG_SDKVERSION
PLUG_DB_LOADSAVE_DATA = _x64dbg.PLUG_DB_LOADSAVE_DATA
PLUG_DB_LOADSAVE_ALL = _x64dbg.PLUG_DB_LOADSAVE_ALL
class PLUG_INITSTRUCT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUG_INITSTRUCT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUG_INITSTRUCT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pluginHandle"] = _x64dbg.PLUG_INITSTRUCT_pluginHandle_set
    __swig_getmethods__["pluginHandle"] = _x64dbg.PLUG_INITSTRUCT_pluginHandle_get
    if _newclass:
        pluginHandle = _swig_property(_x64dbg.PLUG_INITSTRUCT_pluginHandle_get, _x64dbg.PLUG_INITSTRUCT_pluginHandle_set)
    __swig_setmethods__["sdkVersion"] = _x64dbg.PLUG_INITSTRUCT_sdkVersion_set
    __swig_getmethods__["sdkVersion"] = _x64dbg.PLUG_INITSTRUCT_sdkVersion_get
    if _newclass:
        sdkVersion = _swig_property(_x64dbg.PLUG_INITSTRUCT_sdkVersion_get, _x64dbg.PLUG_INITSTRUCT_sdkVersion_set)
    __swig_setmethods__["pluginVersion"] = _x64dbg.PLUG_INITSTRUCT_pluginVersion_set
    __swig_getmethods__["pluginVersion"] = _x64dbg.PLUG_INITSTRUCT_pluginVersion_get
    if _newclass:
        pluginVersion = _swig_property(_x64dbg.PLUG_INITSTRUCT_pluginVersion_get, _x64dbg.PLUG_INITSTRUCT_pluginVersion_set)
    __swig_setmethods__["pluginName"] = _x64dbg.PLUG_INITSTRUCT_pluginName_set
    __swig_getmethods__["pluginName"] = _x64dbg.PLUG_INITSTRUCT_pluginName_get
    if _newclass:
        pluginName = _swig_property(_x64dbg.PLUG_INITSTRUCT_pluginName_get, _x64dbg.PLUG_INITSTRUCT_pluginName_set)

    def __init__(self):
        this = _x64dbg.new_PLUG_INITSTRUCT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_PLUG_INITSTRUCT
    __del__ = lambda self: None
PLUG_INITSTRUCT_swigregister = _x64dbg.PLUG_INITSTRUCT_swigregister
PLUG_INITSTRUCT_swigregister(PLUG_INITSTRUCT)

class PLUG_SETUPSTRUCT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUG_SETUPSTRUCT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUG_SETUPSTRUCT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hwndDlg"] = _x64dbg.PLUG_SETUPSTRUCT_hwndDlg_set
    __swig_getmethods__["hwndDlg"] = _x64dbg.PLUG_SETUPSTRUCT_hwndDlg_get
    if _newclass:
        hwndDlg = _swig_property(_x64dbg.PLUG_SETUPSTRUCT_hwndDlg_get, _x64dbg.PLUG_SETUPSTRUCT_hwndDlg_set)
    __swig_setmethods__["hMenu"] = _x64dbg.PLUG_SETUPSTRUCT_hMenu_set
    __swig_getmethods__["hMenu"] = _x64dbg.PLUG_SETUPSTRUCT_hMenu_get
    if _newclass:
        hMenu = _swig_property(_x64dbg.PLUG_SETUPSTRUCT_hMenu_get, _x64dbg.PLUG_SETUPSTRUCT_hMenu_set)
    __swig_setmethods__["hMenuDisasm"] = _x64dbg.PLUG_SETUPSTRUCT_hMenuDisasm_set
    __swig_getmethods__["hMenuDisasm"] = _x64dbg.PLUG_SETUPSTRUCT_hMenuDisasm_get
    if _newclass:
        hMenuDisasm = _swig_property(_x64dbg.PLUG_SETUPSTRUCT_hMenuDisasm_get, _x64dbg.PLUG_SETUPSTRUCT_hMenuDisasm_set)
    __swig_setmethods__["hMenuDump"] = _x64dbg.PLUG_SETUPSTRUCT_hMenuDump_set
    __swig_getmethods__["hMenuDump"] = _x64dbg.PLUG_SETUPSTRUCT_hMenuDump_get
    if _newclass:
        hMenuDump = _swig_property(_x64dbg.PLUG_SETUPSTRUCT_hMenuDump_get, _x64dbg.PLUG_SETUPSTRUCT_hMenuDump_set)
    __swig_setmethods__["hMenuStack"] = _x64dbg.PLUG_SETUPSTRUCT_hMenuStack_set
    __swig_getmethods__["hMenuStack"] = _x64dbg.PLUG_SETUPSTRUCT_hMenuStack_get
    if _newclass:
        hMenuStack = _swig_property(_x64dbg.PLUG_SETUPSTRUCT_hMenuStack_get, _x64dbg.PLUG_SETUPSTRUCT_hMenuStack_set)

    def __init__(self):
        this = _x64dbg.new_PLUG_SETUPSTRUCT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_PLUG_SETUPSTRUCT
    __del__ = lambda self: None
PLUG_SETUPSTRUCT_swigregister = _x64dbg.PLUG_SETUPSTRUCT_swigregister
PLUG_SETUPSTRUCT_swigregister(PLUG_SETUPSTRUCT)

class PLUG_SCRIPTSTRUCT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUG_SCRIPTSTRUCT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUG_SCRIPTSTRUCT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _x64dbg.PLUG_SCRIPTSTRUCT_data_set
    __swig_getmethods__["data"] = _x64dbg.PLUG_SCRIPTSTRUCT_data_get
    if _newclass:
        data = _swig_property(_x64dbg.PLUG_SCRIPTSTRUCT_data_get, _x64dbg.PLUG_SCRIPTSTRUCT_data_set)

    def __init__(self):
        this = _x64dbg.new_PLUG_SCRIPTSTRUCT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_PLUG_SCRIPTSTRUCT
    __del__ = lambda self: None
PLUG_SCRIPTSTRUCT_swigregister = _x64dbg.PLUG_SCRIPTSTRUCT_swigregister
PLUG_SCRIPTSTRUCT_swigregister(PLUG_SCRIPTSTRUCT)

class PLUG_CB_INITDEBUG(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUG_CB_INITDEBUG, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUG_CB_INITDEBUG, name)
    __repr__ = _swig_repr
    __swig_setmethods__["szFileName"] = _x64dbg.PLUG_CB_INITDEBUG_szFileName_set
    __swig_getmethods__["szFileName"] = _x64dbg.PLUG_CB_INITDEBUG_szFileName_get
    if _newclass:
        szFileName = _swig_property(_x64dbg.PLUG_CB_INITDEBUG_szFileName_get, _x64dbg.PLUG_CB_INITDEBUG_szFileName_set)

    def __init__(self):
        this = _x64dbg.new_PLUG_CB_INITDEBUG()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_PLUG_CB_INITDEBUG
    __del__ = lambda self: None
PLUG_CB_INITDEBUG_swigregister = _x64dbg.PLUG_CB_INITDEBUG_swigregister
PLUG_CB_INITDEBUG_swigregister(PLUG_CB_INITDEBUG)

class PLUG_CB_STOPDEBUG(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUG_CB_STOPDEBUG, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUG_CB_STOPDEBUG, name)
    __repr__ = _swig_repr
    __swig_setmethods__["reserved"] = _x64dbg.PLUG_CB_STOPDEBUG_reserved_set
    __swig_getmethods__["reserved"] = _x64dbg.PLUG_CB_STOPDEBUG_reserved_get
    if _newclass:
        reserved = _swig_property(_x64dbg.PLUG_CB_STOPDEBUG_reserved_get, _x64dbg.PLUG_CB_STOPDEBUG_reserved_set)

    def __init__(self):
        this = _x64dbg.new_PLUG_CB_STOPDEBUG()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_PLUG_CB_STOPDEBUG
    __del__ = lambda self: None
PLUG_CB_STOPDEBUG_swigregister = _x64dbg.PLUG_CB_STOPDEBUG_swigregister
PLUG_CB_STOPDEBUG_swigregister(PLUG_CB_STOPDEBUG)

class PLUG_CB_CREATEPROCESS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUG_CB_CREATEPROCESS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUG_CB_CREATEPROCESS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["CreateProcessInfo"] = _x64dbg.PLUG_CB_CREATEPROCESS_CreateProcessInfo_set
    __swig_getmethods__["CreateProcessInfo"] = _x64dbg.PLUG_CB_CREATEPROCESS_CreateProcessInfo_get
    if _newclass:
        CreateProcessInfo = _swig_property(_x64dbg.PLUG_CB_CREATEPROCESS_CreateProcessInfo_get, _x64dbg.PLUG_CB_CREATEPROCESS_CreateProcessInfo_set)
    __swig_setmethods__["modInfo"] = _x64dbg.PLUG_CB_CREATEPROCESS_modInfo_set
    __swig_getmethods__["modInfo"] = _x64dbg.PLUG_CB_CREATEPROCESS_modInfo_get
    if _newclass:
        modInfo = _swig_property(_x64dbg.PLUG_CB_CREATEPROCESS_modInfo_get, _x64dbg.PLUG_CB_CREATEPROCESS_modInfo_set)
    __swig_setmethods__["DebugFileName"] = _x64dbg.PLUG_CB_CREATEPROCESS_DebugFileName_set
    __swig_getmethods__["DebugFileName"] = _x64dbg.PLUG_CB_CREATEPROCESS_DebugFileName_get
    if _newclass:
        DebugFileName = _swig_property(_x64dbg.PLUG_CB_CREATEPROCESS_DebugFileName_get, _x64dbg.PLUG_CB_CREATEPROCESS_DebugFileName_set)
    __swig_setmethods__["fdProcessInfo"] = _x64dbg.PLUG_CB_CREATEPROCESS_fdProcessInfo_set
    __swig_getmethods__["fdProcessInfo"] = _x64dbg.PLUG_CB_CREATEPROCESS_fdProcessInfo_get
    if _newclass:
        fdProcessInfo = _swig_property(_x64dbg.PLUG_CB_CREATEPROCESS_fdProcessInfo_get, _x64dbg.PLUG_CB_CREATEPROCESS_fdProcessInfo_set)

    def __init__(self):
        this = _x64dbg.new_PLUG_CB_CREATEPROCESS()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_PLUG_CB_CREATEPROCESS
    __del__ = lambda self: None
PLUG_CB_CREATEPROCESS_swigregister = _x64dbg.PLUG_CB_CREATEPROCESS_swigregister
PLUG_CB_CREATEPROCESS_swigregister(PLUG_CB_CREATEPROCESS)

class PLUG_CB_EXITPROCESS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUG_CB_EXITPROCESS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUG_CB_EXITPROCESS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ExitProcess"] = _x64dbg.PLUG_CB_EXITPROCESS_ExitProcess_set
    __swig_getmethods__["ExitProcess"] = _x64dbg.PLUG_CB_EXITPROCESS_ExitProcess_get
    if _newclass:
        ExitProcess = _swig_property(_x64dbg.PLUG_CB_EXITPROCESS_ExitProcess_get, _x64dbg.PLUG_CB_EXITPROCESS_ExitProcess_set)

    def __init__(self):
        this = _x64dbg.new_PLUG_CB_EXITPROCESS()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_PLUG_CB_EXITPROCESS
    __del__ = lambda self: None
PLUG_CB_EXITPROCESS_swigregister = _x64dbg.PLUG_CB_EXITPROCESS_swigregister
PLUG_CB_EXITPROCESS_swigregister(PLUG_CB_EXITPROCESS)

class PLUG_CB_CREATETHREAD(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUG_CB_CREATETHREAD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUG_CB_CREATETHREAD, name)
    __repr__ = _swig_repr
    __swig_setmethods__["CreateThread"] = _x64dbg.PLUG_CB_CREATETHREAD_CreateThread_set
    __swig_getmethods__["CreateThread"] = _x64dbg.PLUG_CB_CREATETHREAD_CreateThread_get
    if _newclass:
        CreateThread = _swig_property(_x64dbg.PLUG_CB_CREATETHREAD_CreateThread_get, _x64dbg.PLUG_CB_CREATETHREAD_CreateThread_set)
    __swig_setmethods__["dwThreadId"] = _x64dbg.PLUG_CB_CREATETHREAD_dwThreadId_set
    __swig_getmethods__["dwThreadId"] = _x64dbg.PLUG_CB_CREATETHREAD_dwThreadId_get
    if _newclass:
        dwThreadId = _swig_property(_x64dbg.PLUG_CB_CREATETHREAD_dwThreadId_get, _x64dbg.PLUG_CB_CREATETHREAD_dwThreadId_set)

    def __init__(self):
        this = _x64dbg.new_PLUG_CB_CREATETHREAD()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_PLUG_CB_CREATETHREAD
    __del__ = lambda self: None
PLUG_CB_CREATETHREAD_swigregister = _x64dbg.PLUG_CB_CREATETHREAD_swigregister
PLUG_CB_CREATETHREAD_swigregister(PLUG_CB_CREATETHREAD)

class PLUG_CB_EXITTHREAD(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUG_CB_EXITTHREAD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUG_CB_EXITTHREAD, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ExitThread"] = _x64dbg.PLUG_CB_EXITTHREAD_ExitThread_set
    __swig_getmethods__["ExitThread"] = _x64dbg.PLUG_CB_EXITTHREAD_ExitThread_get
    if _newclass:
        ExitThread = _swig_property(_x64dbg.PLUG_CB_EXITTHREAD_ExitThread_get, _x64dbg.PLUG_CB_EXITTHREAD_ExitThread_set)
    __swig_setmethods__["dwThreadId"] = _x64dbg.PLUG_CB_EXITTHREAD_dwThreadId_set
    __swig_getmethods__["dwThreadId"] = _x64dbg.PLUG_CB_EXITTHREAD_dwThreadId_get
    if _newclass:
        dwThreadId = _swig_property(_x64dbg.PLUG_CB_EXITTHREAD_dwThreadId_get, _x64dbg.PLUG_CB_EXITTHREAD_dwThreadId_set)

    def __init__(self):
        this = _x64dbg.new_PLUG_CB_EXITTHREAD()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_PLUG_CB_EXITTHREAD
    __del__ = lambda self: None
PLUG_CB_EXITTHREAD_swigregister = _x64dbg.PLUG_CB_EXITTHREAD_swigregister
PLUG_CB_EXITTHREAD_swigregister(PLUG_CB_EXITTHREAD)

class PLUG_CB_SYSTEMBREAKPOINT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUG_CB_SYSTEMBREAKPOINT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUG_CB_SYSTEMBREAKPOINT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["reserved"] = _x64dbg.PLUG_CB_SYSTEMBREAKPOINT_reserved_set
    __swig_getmethods__["reserved"] = _x64dbg.PLUG_CB_SYSTEMBREAKPOINT_reserved_get
    if _newclass:
        reserved = _swig_property(_x64dbg.PLUG_CB_SYSTEMBREAKPOINT_reserved_get, _x64dbg.PLUG_CB_SYSTEMBREAKPOINT_reserved_set)

    def __init__(self):
        this = _x64dbg.new_PLUG_CB_SYSTEMBREAKPOINT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_PLUG_CB_SYSTEMBREAKPOINT
    __del__ = lambda self: None
PLUG_CB_SYSTEMBREAKPOINT_swigregister = _x64dbg.PLUG_CB_SYSTEMBREAKPOINT_swigregister
PLUG_CB_SYSTEMBREAKPOINT_swigregister(PLUG_CB_SYSTEMBREAKPOINT)

class PLUG_CB_LOADDLL(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUG_CB_LOADDLL, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUG_CB_LOADDLL, name)
    __repr__ = _swig_repr
    __swig_setmethods__["LoadDll"] = _x64dbg.PLUG_CB_LOADDLL_LoadDll_set
    __swig_getmethods__["LoadDll"] = _x64dbg.PLUG_CB_LOADDLL_LoadDll_get
    if _newclass:
        LoadDll = _swig_property(_x64dbg.PLUG_CB_LOADDLL_LoadDll_get, _x64dbg.PLUG_CB_LOADDLL_LoadDll_set)
    __swig_setmethods__["modInfo"] = _x64dbg.PLUG_CB_LOADDLL_modInfo_set
    __swig_getmethods__["modInfo"] = _x64dbg.PLUG_CB_LOADDLL_modInfo_get
    if _newclass:
        modInfo = _swig_property(_x64dbg.PLUG_CB_LOADDLL_modInfo_get, _x64dbg.PLUG_CB_LOADDLL_modInfo_set)
    __swig_setmethods__["modname"] = _x64dbg.PLUG_CB_LOADDLL_modname_set
    __swig_getmethods__["modname"] = _x64dbg.PLUG_CB_LOADDLL_modname_get
    if _newclass:
        modname = _swig_property(_x64dbg.PLUG_CB_LOADDLL_modname_get, _x64dbg.PLUG_CB_LOADDLL_modname_set)

    def __init__(self):
        this = _x64dbg.new_PLUG_CB_LOADDLL()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_PLUG_CB_LOADDLL
    __del__ = lambda self: None
PLUG_CB_LOADDLL_swigregister = _x64dbg.PLUG_CB_LOADDLL_swigregister
PLUG_CB_LOADDLL_swigregister(PLUG_CB_LOADDLL)

class PLUG_CB_UNLOADDLL(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUG_CB_UNLOADDLL, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUG_CB_UNLOADDLL, name)
    __repr__ = _swig_repr
    __swig_setmethods__["UnloadDll"] = _x64dbg.PLUG_CB_UNLOADDLL_UnloadDll_set
    __swig_getmethods__["UnloadDll"] = _x64dbg.PLUG_CB_UNLOADDLL_UnloadDll_get
    if _newclass:
        UnloadDll = _swig_property(_x64dbg.PLUG_CB_UNLOADDLL_UnloadDll_get, _x64dbg.PLUG_CB_UNLOADDLL_UnloadDll_set)

    def __init__(self):
        this = _x64dbg.new_PLUG_CB_UNLOADDLL()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_PLUG_CB_UNLOADDLL
    __del__ = lambda self: None
PLUG_CB_UNLOADDLL_swigregister = _x64dbg.PLUG_CB_UNLOADDLL_swigregister
PLUG_CB_UNLOADDLL_swigregister(PLUG_CB_UNLOADDLL)

class PLUG_CB_OUTPUTDEBUGSTRING(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUG_CB_OUTPUTDEBUGSTRING, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUG_CB_OUTPUTDEBUGSTRING, name)
    __repr__ = _swig_repr
    __swig_setmethods__["DebugString"] = _x64dbg.PLUG_CB_OUTPUTDEBUGSTRING_DebugString_set
    __swig_getmethods__["DebugString"] = _x64dbg.PLUG_CB_OUTPUTDEBUGSTRING_DebugString_get
    if _newclass:
        DebugString = _swig_property(_x64dbg.PLUG_CB_OUTPUTDEBUGSTRING_DebugString_get, _x64dbg.PLUG_CB_OUTPUTDEBUGSTRING_DebugString_set)

    def __init__(self):
        this = _x64dbg.new_PLUG_CB_OUTPUTDEBUGSTRING()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_PLUG_CB_OUTPUTDEBUGSTRING
    __del__ = lambda self: None
PLUG_CB_OUTPUTDEBUGSTRING_swigregister = _x64dbg.PLUG_CB_OUTPUTDEBUGSTRING_swigregister
PLUG_CB_OUTPUTDEBUGSTRING_swigregister(PLUG_CB_OUTPUTDEBUGSTRING)

class PLUG_CB_EXCEPTION(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUG_CB_EXCEPTION, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUG_CB_EXCEPTION, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Exception"] = _x64dbg.PLUG_CB_EXCEPTION_Exception_set
    __swig_getmethods__["Exception"] = _x64dbg.PLUG_CB_EXCEPTION_Exception_get
    if _newclass:
        Exception = _swig_property(_x64dbg.PLUG_CB_EXCEPTION_Exception_get, _x64dbg.PLUG_CB_EXCEPTION_Exception_set)

    def __init__(self):
        this = _x64dbg.new_PLUG_CB_EXCEPTION()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_PLUG_CB_EXCEPTION
    __del__ = lambda self: None
PLUG_CB_EXCEPTION_swigregister = _x64dbg.PLUG_CB_EXCEPTION_swigregister
PLUG_CB_EXCEPTION_swigregister(PLUG_CB_EXCEPTION)

class PLUG_CB_BREAKPOINT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUG_CB_BREAKPOINT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUG_CB_BREAKPOINT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["breakpoint"] = _x64dbg.PLUG_CB_BREAKPOINT_breakpoint_set
    __swig_getmethods__["breakpoint"] = _x64dbg.PLUG_CB_BREAKPOINT_breakpoint_get
    if _newclass:
        breakpoint = _swig_property(_x64dbg.PLUG_CB_BREAKPOINT_breakpoint_get, _x64dbg.PLUG_CB_BREAKPOINT_breakpoint_set)

    def __init__(self):
        this = _x64dbg.new_PLUG_CB_BREAKPOINT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_PLUG_CB_BREAKPOINT
    __del__ = lambda self: None
PLUG_CB_BREAKPOINT_swigregister = _x64dbg.PLUG_CB_BREAKPOINT_swigregister
PLUG_CB_BREAKPOINT_swigregister(PLUG_CB_BREAKPOINT)

class PLUG_CB_PAUSEDEBUG(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUG_CB_PAUSEDEBUG, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUG_CB_PAUSEDEBUG, name)
    __repr__ = _swig_repr
    __swig_setmethods__["reserved"] = _x64dbg.PLUG_CB_PAUSEDEBUG_reserved_set
    __swig_getmethods__["reserved"] = _x64dbg.PLUG_CB_PAUSEDEBUG_reserved_get
    if _newclass:
        reserved = _swig_property(_x64dbg.PLUG_CB_PAUSEDEBUG_reserved_get, _x64dbg.PLUG_CB_PAUSEDEBUG_reserved_set)

    def __init__(self):
        this = _x64dbg.new_PLUG_CB_PAUSEDEBUG()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_PLUG_CB_PAUSEDEBUG
    __del__ = lambda self: None
PLUG_CB_PAUSEDEBUG_swigregister = _x64dbg.PLUG_CB_PAUSEDEBUG_swigregister
PLUG_CB_PAUSEDEBUG_swigregister(PLUG_CB_PAUSEDEBUG)

class PLUG_CB_RESUMEDEBUG(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUG_CB_RESUMEDEBUG, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUG_CB_RESUMEDEBUG, name)
    __repr__ = _swig_repr
    __swig_setmethods__["reserved"] = _x64dbg.PLUG_CB_RESUMEDEBUG_reserved_set
    __swig_getmethods__["reserved"] = _x64dbg.PLUG_CB_RESUMEDEBUG_reserved_get
    if _newclass:
        reserved = _swig_property(_x64dbg.PLUG_CB_RESUMEDEBUG_reserved_get, _x64dbg.PLUG_CB_RESUMEDEBUG_reserved_set)

    def __init__(self):
        this = _x64dbg.new_PLUG_CB_RESUMEDEBUG()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_PLUG_CB_RESUMEDEBUG
    __del__ = lambda self: None
PLUG_CB_RESUMEDEBUG_swigregister = _x64dbg.PLUG_CB_RESUMEDEBUG_swigregister
PLUG_CB_RESUMEDEBUG_swigregister(PLUG_CB_RESUMEDEBUG)

class PLUG_CB_STEPPED(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUG_CB_STEPPED, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUG_CB_STEPPED, name)
    __repr__ = _swig_repr
    __swig_setmethods__["reserved"] = _x64dbg.PLUG_CB_STEPPED_reserved_set
    __swig_getmethods__["reserved"] = _x64dbg.PLUG_CB_STEPPED_reserved_get
    if _newclass:
        reserved = _swig_property(_x64dbg.PLUG_CB_STEPPED_reserved_get, _x64dbg.PLUG_CB_STEPPED_reserved_set)

    def __init__(self):
        this = _x64dbg.new_PLUG_CB_STEPPED()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_PLUG_CB_STEPPED
    __del__ = lambda self: None
PLUG_CB_STEPPED_swigregister = _x64dbg.PLUG_CB_STEPPED_swigregister
PLUG_CB_STEPPED_swigregister(PLUG_CB_STEPPED)

class PLUG_CB_ATTACH(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUG_CB_ATTACH, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUG_CB_ATTACH, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dwProcessId"] = _x64dbg.PLUG_CB_ATTACH_dwProcessId_set
    __swig_getmethods__["dwProcessId"] = _x64dbg.PLUG_CB_ATTACH_dwProcessId_get
    if _newclass:
        dwProcessId = _swig_property(_x64dbg.PLUG_CB_ATTACH_dwProcessId_get, _x64dbg.PLUG_CB_ATTACH_dwProcessId_set)

    def __init__(self):
        this = _x64dbg.new_PLUG_CB_ATTACH()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_PLUG_CB_ATTACH
    __del__ = lambda self: None
PLUG_CB_ATTACH_swigregister = _x64dbg.PLUG_CB_ATTACH_swigregister
PLUG_CB_ATTACH_swigregister(PLUG_CB_ATTACH)

class PLUG_CB_DETACH(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUG_CB_DETACH, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUG_CB_DETACH, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fdProcessInfo"] = _x64dbg.PLUG_CB_DETACH_fdProcessInfo_set
    __swig_getmethods__["fdProcessInfo"] = _x64dbg.PLUG_CB_DETACH_fdProcessInfo_get
    if _newclass:
        fdProcessInfo = _swig_property(_x64dbg.PLUG_CB_DETACH_fdProcessInfo_get, _x64dbg.PLUG_CB_DETACH_fdProcessInfo_set)

    def __init__(self):
        this = _x64dbg.new_PLUG_CB_DETACH()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_PLUG_CB_DETACH
    __del__ = lambda self: None
PLUG_CB_DETACH_swigregister = _x64dbg.PLUG_CB_DETACH_swigregister
PLUG_CB_DETACH_swigregister(PLUG_CB_DETACH)

class PLUG_CB_DEBUGEVENT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUG_CB_DEBUGEVENT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUG_CB_DEBUGEVENT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["DebugEvent"] = _x64dbg.PLUG_CB_DEBUGEVENT_DebugEvent_set
    __swig_getmethods__["DebugEvent"] = _x64dbg.PLUG_CB_DEBUGEVENT_DebugEvent_get
    if _newclass:
        DebugEvent = _swig_property(_x64dbg.PLUG_CB_DEBUGEVENT_DebugEvent_get, _x64dbg.PLUG_CB_DEBUGEVENT_DebugEvent_set)

    def __init__(self):
        this = _x64dbg.new_PLUG_CB_DEBUGEVENT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_PLUG_CB_DEBUGEVENT
    __del__ = lambda self: None
PLUG_CB_DEBUGEVENT_swigregister = _x64dbg.PLUG_CB_DEBUGEVENT_swigregister
PLUG_CB_DEBUGEVENT_swigregister(PLUG_CB_DEBUGEVENT)

class PLUG_CB_MENUENTRY(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUG_CB_MENUENTRY, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUG_CB_MENUENTRY, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hEntry"] = _x64dbg.PLUG_CB_MENUENTRY_hEntry_set
    __swig_getmethods__["hEntry"] = _x64dbg.PLUG_CB_MENUENTRY_hEntry_get
    if _newclass:
        hEntry = _swig_property(_x64dbg.PLUG_CB_MENUENTRY_hEntry_get, _x64dbg.PLUG_CB_MENUENTRY_hEntry_set)

    def __init__(self):
        this = _x64dbg.new_PLUG_CB_MENUENTRY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_PLUG_CB_MENUENTRY
    __del__ = lambda self: None
PLUG_CB_MENUENTRY_swigregister = _x64dbg.PLUG_CB_MENUENTRY_swigregister
PLUG_CB_MENUENTRY_swigregister(PLUG_CB_MENUENTRY)

class PLUG_CB_WINEVENT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUG_CB_WINEVENT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUG_CB_WINEVENT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["message"] = _x64dbg.PLUG_CB_WINEVENT_message_set
    __swig_getmethods__["message"] = _x64dbg.PLUG_CB_WINEVENT_message_get
    if _newclass:
        message = _swig_property(_x64dbg.PLUG_CB_WINEVENT_message_get, _x64dbg.PLUG_CB_WINEVENT_message_set)
    __swig_setmethods__["result"] = _x64dbg.PLUG_CB_WINEVENT_result_set
    __swig_getmethods__["result"] = _x64dbg.PLUG_CB_WINEVENT_result_get
    if _newclass:
        result = _swig_property(_x64dbg.PLUG_CB_WINEVENT_result_get, _x64dbg.PLUG_CB_WINEVENT_result_set)
    __swig_setmethods__["retval"] = _x64dbg.PLUG_CB_WINEVENT_retval_set
    __swig_getmethods__["retval"] = _x64dbg.PLUG_CB_WINEVENT_retval_get
    if _newclass:
        retval = _swig_property(_x64dbg.PLUG_CB_WINEVENT_retval_get, _x64dbg.PLUG_CB_WINEVENT_retval_set)

    def __init__(self):
        this = _x64dbg.new_PLUG_CB_WINEVENT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_PLUG_CB_WINEVENT
    __del__ = lambda self: None
PLUG_CB_WINEVENT_swigregister = _x64dbg.PLUG_CB_WINEVENT_swigregister
PLUG_CB_WINEVENT_swigregister(PLUG_CB_WINEVENT)

class PLUG_CB_WINEVENTGLOBAL(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUG_CB_WINEVENTGLOBAL, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUG_CB_WINEVENTGLOBAL, name)
    __repr__ = _swig_repr
    __swig_setmethods__["message"] = _x64dbg.PLUG_CB_WINEVENTGLOBAL_message_set
    __swig_getmethods__["message"] = _x64dbg.PLUG_CB_WINEVENTGLOBAL_message_get
    if _newclass:
        message = _swig_property(_x64dbg.PLUG_CB_WINEVENTGLOBAL_message_get, _x64dbg.PLUG_CB_WINEVENTGLOBAL_message_set)
    __swig_setmethods__["retval"] = _x64dbg.PLUG_CB_WINEVENTGLOBAL_retval_set
    __swig_getmethods__["retval"] = _x64dbg.PLUG_CB_WINEVENTGLOBAL_retval_get
    if _newclass:
        retval = _swig_property(_x64dbg.PLUG_CB_WINEVENTGLOBAL_retval_get, _x64dbg.PLUG_CB_WINEVENTGLOBAL_retval_set)

    def __init__(self):
        this = _x64dbg.new_PLUG_CB_WINEVENTGLOBAL()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_PLUG_CB_WINEVENTGLOBAL
    __del__ = lambda self: None
PLUG_CB_WINEVENTGLOBAL_swigregister = _x64dbg.PLUG_CB_WINEVENTGLOBAL_swigregister
PLUG_CB_WINEVENTGLOBAL_swigregister(PLUG_CB_WINEVENTGLOBAL)

class PLUG_CB_LOADSAVEDB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUG_CB_LOADSAVEDB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUG_CB_LOADSAVEDB, name)
    __repr__ = _swig_repr
    __swig_setmethods__["root"] = _x64dbg.PLUG_CB_LOADSAVEDB_root_set
    __swig_getmethods__["root"] = _x64dbg.PLUG_CB_LOADSAVEDB_root_get
    if _newclass:
        root = _swig_property(_x64dbg.PLUG_CB_LOADSAVEDB_root_get, _x64dbg.PLUG_CB_LOADSAVEDB_root_set)
    __swig_setmethods__["loadSaveType"] = _x64dbg.PLUG_CB_LOADSAVEDB_loadSaveType_set
    __swig_getmethods__["loadSaveType"] = _x64dbg.PLUG_CB_LOADSAVEDB_loadSaveType_get
    if _newclass:
        loadSaveType = _swig_property(_x64dbg.PLUG_CB_LOADSAVEDB_loadSaveType_get, _x64dbg.PLUG_CB_LOADSAVEDB_loadSaveType_set)

    def __init__(self):
        this = _x64dbg.new_PLUG_CB_LOADSAVEDB()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_PLUG_CB_LOADSAVEDB
    __del__ = lambda self: None
PLUG_CB_LOADSAVEDB_swigregister = _x64dbg.PLUG_CB_LOADSAVEDB_swigregister
PLUG_CB_LOADSAVEDB_swigregister(PLUG_CB_LOADSAVEDB)

class PLUG_CB_FILTERSYMBOL(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUG_CB_FILTERSYMBOL, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUG_CB_FILTERSYMBOL, name)
    __repr__ = _swig_repr
    __swig_setmethods__["symbol"] = _x64dbg.PLUG_CB_FILTERSYMBOL_symbol_set
    __swig_getmethods__["symbol"] = _x64dbg.PLUG_CB_FILTERSYMBOL_symbol_get
    if _newclass:
        symbol = _swig_property(_x64dbg.PLUG_CB_FILTERSYMBOL_symbol_get, _x64dbg.PLUG_CB_FILTERSYMBOL_symbol_set)
    __swig_setmethods__["retval"] = _x64dbg.PLUG_CB_FILTERSYMBOL_retval_set
    __swig_getmethods__["retval"] = _x64dbg.PLUG_CB_FILTERSYMBOL_retval_get
    if _newclass:
        retval = _swig_property(_x64dbg.PLUG_CB_FILTERSYMBOL_retval_get, _x64dbg.PLUG_CB_FILTERSYMBOL_retval_set)

    def __init__(self):
        this = _x64dbg.new_PLUG_CB_FILTERSYMBOL()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_PLUG_CB_FILTERSYMBOL
    __del__ = lambda self: None
PLUG_CB_FILTERSYMBOL_swigregister = _x64dbg.PLUG_CB_FILTERSYMBOL_swigregister
PLUG_CB_FILTERSYMBOL_swigregister(PLUG_CB_FILTERSYMBOL)

class PLUG_CB_TRACEEXECUTE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUG_CB_TRACEEXECUTE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUG_CB_TRACEEXECUTE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cip"] = _x64dbg.PLUG_CB_TRACEEXECUTE_cip_set
    __swig_getmethods__["cip"] = _x64dbg.PLUG_CB_TRACEEXECUTE_cip_get
    if _newclass:
        cip = _swig_property(_x64dbg.PLUG_CB_TRACEEXECUTE_cip_get, _x64dbg.PLUG_CB_TRACEEXECUTE_cip_set)
    __swig_setmethods__["stop"] = _x64dbg.PLUG_CB_TRACEEXECUTE_stop_set
    __swig_getmethods__["stop"] = _x64dbg.PLUG_CB_TRACEEXECUTE_stop_get
    if _newclass:
        stop = _swig_property(_x64dbg.PLUG_CB_TRACEEXECUTE_stop_get, _x64dbg.PLUG_CB_TRACEEXECUTE_stop_set)

    def __init__(self):
        this = _x64dbg.new_PLUG_CB_TRACEEXECUTE()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_PLUG_CB_TRACEEXECUTE
    __del__ = lambda self: None
PLUG_CB_TRACEEXECUTE_swigregister = _x64dbg.PLUG_CB_TRACEEXECUTE_swigregister
PLUG_CB_TRACEEXECUTE_swigregister(PLUG_CB_TRACEEXECUTE)

class PLUG_CB_SELCHANGED(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUG_CB_SELCHANGED, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUG_CB_SELCHANGED, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hWindow"] = _x64dbg.PLUG_CB_SELCHANGED_hWindow_set
    __swig_getmethods__["hWindow"] = _x64dbg.PLUG_CB_SELCHANGED_hWindow_get
    if _newclass:
        hWindow = _swig_property(_x64dbg.PLUG_CB_SELCHANGED_hWindow_get, _x64dbg.PLUG_CB_SELCHANGED_hWindow_set)
    __swig_setmethods__["VA"] = _x64dbg.PLUG_CB_SELCHANGED_VA_set
    __swig_getmethods__["VA"] = _x64dbg.PLUG_CB_SELCHANGED_VA_get
    if _newclass:
        VA = _swig_property(_x64dbg.PLUG_CB_SELCHANGED_VA_get, _x64dbg.PLUG_CB_SELCHANGED_VA_set)

    def __init__(self):
        this = _x64dbg.new_PLUG_CB_SELCHANGED()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_PLUG_CB_SELCHANGED
    __del__ = lambda self: None
PLUG_CB_SELCHANGED_swigregister = _x64dbg.PLUG_CB_SELCHANGED_swigregister
PLUG_CB_SELCHANGED_swigregister(PLUG_CB_SELCHANGED)

class PLUG_CB_ANALYZE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUG_CB_ANALYZE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUG_CB_ANALYZE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["graph"] = _x64dbg.PLUG_CB_ANALYZE_graph_set
    __swig_getmethods__["graph"] = _x64dbg.PLUG_CB_ANALYZE_graph_get
    if _newclass:
        graph = _swig_property(_x64dbg.PLUG_CB_ANALYZE_graph_get, _x64dbg.PLUG_CB_ANALYZE_graph_set)

    def __init__(self):
        this = _x64dbg.new_PLUG_CB_ANALYZE()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_PLUG_CB_ANALYZE
    __del__ = lambda self: None
PLUG_CB_ANALYZE_swigregister = _x64dbg.PLUG_CB_ANALYZE_swigregister
PLUG_CB_ANALYZE_swigregister(PLUG_CB_ANALYZE)

class PLUG_CB_ADDRINFO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUG_CB_ADDRINFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUG_CB_ADDRINFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["addr"] = _x64dbg.PLUG_CB_ADDRINFO_addr_set
    __swig_getmethods__["addr"] = _x64dbg.PLUG_CB_ADDRINFO_addr_get
    if _newclass:
        addr = _swig_property(_x64dbg.PLUG_CB_ADDRINFO_addr_get, _x64dbg.PLUG_CB_ADDRINFO_addr_set)
    __swig_setmethods__["addrinfo"] = _x64dbg.PLUG_CB_ADDRINFO_addrinfo_set
    __swig_getmethods__["addrinfo"] = _x64dbg.PLUG_CB_ADDRINFO_addrinfo_get
    if _newclass:
        addrinfo = _swig_property(_x64dbg.PLUG_CB_ADDRINFO_addrinfo_get, _x64dbg.PLUG_CB_ADDRINFO_addrinfo_set)
    __swig_setmethods__["retval"] = _x64dbg.PLUG_CB_ADDRINFO_retval_set
    __swig_getmethods__["retval"] = _x64dbg.PLUG_CB_ADDRINFO_retval_get
    if _newclass:
        retval = _swig_property(_x64dbg.PLUG_CB_ADDRINFO_retval_get, _x64dbg.PLUG_CB_ADDRINFO_retval_set)

    def __init__(self):
        this = _x64dbg.new_PLUG_CB_ADDRINFO()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_PLUG_CB_ADDRINFO
    __del__ = lambda self: None
PLUG_CB_ADDRINFO_swigregister = _x64dbg.PLUG_CB_ADDRINFO_swigregister
PLUG_CB_ADDRINFO_swigregister(PLUG_CB_ADDRINFO)

class PLUG_CB_VALFROMSTRING(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUG_CB_VALFROMSTRING, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUG_CB_VALFROMSTRING, name)
    __repr__ = _swig_repr
    __swig_setmethods__["string"] = _x64dbg.PLUG_CB_VALFROMSTRING_string_set
    __swig_getmethods__["string"] = _x64dbg.PLUG_CB_VALFROMSTRING_string_get
    if _newclass:
        string = _swig_property(_x64dbg.PLUG_CB_VALFROMSTRING_string_get, _x64dbg.PLUG_CB_VALFROMSTRING_string_set)
    __swig_setmethods__["value"] = _x64dbg.PLUG_CB_VALFROMSTRING_value_set
    __swig_getmethods__["value"] = _x64dbg.PLUG_CB_VALFROMSTRING_value_get
    if _newclass:
        value = _swig_property(_x64dbg.PLUG_CB_VALFROMSTRING_value_get, _x64dbg.PLUG_CB_VALFROMSTRING_value_set)
    __swig_setmethods__["value_size"] = _x64dbg.PLUG_CB_VALFROMSTRING_value_size_set
    __swig_getmethods__["value_size"] = _x64dbg.PLUG_CB_VALFROMSTRING_value_size_get
    if _newclass:
        value_size = _swig_property(_x64dbg.PLUG_CB_VALFROMSTRING_value_size_get, _x64dbg.PLUG_CB_VALFROMSTRING_value_size_set)
    __swig_setmethods__["isvar"] = _x64dbg.PLUG_CB_VALFROMSTRING_isvar_set
    __swig_getmethods__["isvar"] = _x64dbg.PLUG_CB_VALFROMSTRING_isvar_get
    if _newclass:
        isvar = _swig_property(_x64dbg.PLUG_CB_VALFROMSTRING_isvar_get, _x64dbg.PLUG_CB_VALFROMSTRING_isvar_set)
    __swig_setmethods__["hexonly"] = _x64dbg.PLUG_CB_VALFROMSTRING_hexonly_set
    __swig_getmethods__["hexonly"] = _x64dbg.PLUG_CB_VALFROMSTRING_hexonly_get
    if _newclass:
        hexonly = _swig_property(_x64dbg.PLUG_CB_VALFROMSTRING_hexonly_get, _x64dbg.PLUG_CB_VALFROMSTRING_hexonly_set)
    __swig_setmethods__["retval"] = _x64dbg.PLUG_CB_VALFROMSTRING_retval_set
    __swig_getmethods__["retval"] = _x64dbg.PLUG_CB_VALFROMSTRING_retval_get
    if _newclass:
        retval = _swig_property(_x64dbg.PLUG_CB_VALFROMSTRING_retval_get, _x64dbg.PLUG_CB_VALFROMSTRING_retval_set)

    def __init__(self):
        this = _x64dbg.new_PLUG_CB_VALFROMSTRING()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_PLUG_CB_VALFROMSTRING
    __del__ = lambda self: None
PLUG_CB_VALFROMSTRING_swigregister = _x64dbg.PLUG_CB_VALFROMSTRING_swigregister
PLUG_CB_VALFROMSTRING_swigregister(PLUG_CB_VALFROMSTRING)

class PLUG_CB_VALTOSTRING(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUG_CB_VALTOSTRING, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUG_CB_VALTOSTRING, name)
    __repr__ = _swig_repr
    __swig_setmethods__["string"] = _x64dbg.PLUG_CB_VALTOSTRING_string_set
    __swig_getmethods__["string"] = _x64dbg.PLUG_CB_VALTOSTRING_string_get
    if _newclass:
        string = _swig_property(_x64dbg.PLUG_CB_VALTOSTRING_string_get, _x64dbg.PLUG_CB_VALTOSTRING_string_set)
    __swig_setmethods__["value"] = _x64dbg.PLUG_CB_VALTOSTRING_value_set
    __swig_getmethods__["value"] = _x64dbg.PLUG_CB_VALTOSTRING_value_get
    if _newclass:
        value = _swig_property(_x64dbg.PLUG_CB_VALTOSTRING_value_get, _x64dbg.PLUG_CB_VALTOSTRING_value_set)
    __swig_setmethods__["retval"] = _x64dbg.PLUG_CB_VALTOSTRING_retval_set
    __swig_getmethods__["retval"] = _x64dbg.PLUG_CB_VALTOSTRING_retval_get
    if _newclass:
        retval = _swig_property(_x64dbg.PLUG_CB_VALTOSTRING_retval_get, _x64dbg.PLUG_CB_VALTOSTRING_retval_set)

    def __init__(self):
        this = _x64dbg.new_PLUG_CB_VALTOSTRING()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_PLUG_CB_VALTOSTRING
    __del__ = lambda self: None
PLUG_CB_VALTOSTRING_swigregister = _x64dbg.PLUG_CB_VALTOSTRING_swigregister
PLUG_CB_VALTOSTRING_swigregister(PLUG_CB_VALTOSTRING)

class PLUG_CB_MENUPREPARE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLUG_CB_MENUPREPARE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLUG_CB_MENUPREPARE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hMenu"] = _x64dbg.PLUG_CB_MENUPREPARE_hMenu_set
    __swig_getmethods__["hMenu"] = _x64dbg.PLUG_CB_MENUPREPARE_hMenu_get
    if _newclass:
        hMenu = _swig_property(_x64dbg.PLUG_CB_MENUPREPARE_hMenu_get, _x64dbg.PLUG_CB_MENUPREPARE_hMenu_set)

    def __init__(self):
        this = _x64dbg.new_PLUG_CB_MENUPREPARE()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_PLUG_CB_MENUPREPARE
    __del__ = lambda self: None
PLUG_CB_MENUPREPARE_swigregister = _x64dbg.PLUG_CB_MENUPREPARE_swigregister
PLUG_CB_MENUPREPARE_swigregister(PLUG_CB_MENUPREPARE)

CB_INITDEBUG = _x64dbg.CB_INITDEBUG
CB_STOPDEBUG = _x64dbg.CB_STOPDEBUG
CB_CREATEPROCESS = _x64dbg.CB_CREATEPROCESS
CB_EXITPROCESS = _x64dbg.CB_EXITPROCESS
CB_CREATETHREAD = _x64dbg.CB_CREATETHREAD
CB_EXITTHREAD = _x64dbg.CB_EXITTHREAD
CB_SYSTEMBREAKPOINT = _x64dbg.CB_SYSTEMBREAKPOINT
CB_LOADDLL = _x64dbg.CB_LOADDLL
CB_UNLOADDLL = _x64dbg.CB_UNLOADDLL
CB_OUTPUTDEBUGSTRING = _x64dbg.CB_OUTPUTDEBUGSTRING
CB_EXCEPTION = _x64dbg.CB_EXCEPTION
CB_BREAKPOINT = _x64dbg.CB_BREAKPOINT
CB_PAUSEDEBUG = _x64dbg.CB_PAUSEDEBUG
CB_RESUMEDEBUG = _x64dbg.CB_RESUMEDEBUG
CB_STEPPED = _x64dbg.CB_STEPPED
CB_ATTACH = _x64dbg.CB_ATTACH
CB_DETACH = _x64dbg.CB_DETACH
CB_DEBUGEVENT = _x64dbg.CB_DEBUGEVENT
CB_MENUENTRY = _x64dbg.CB_MENUENTRY
CB_WINEVENT = _x64dbg.CB_WINEVENT
CB_WINEVENTGLOBAL = _x64dbg.CB_WINEVENTGLOBAL
CB_LOADDB = _x64dbg.CB_LOADDB
CB_SAVEDB = _x64dbg.CB_SAVEDB
CB_FILTERSYMBOL = _x64dbg.CB_FILTERSYMBOL
CB_TRACEEXECUTE = _x64dbg.CB_TRACEEXECUTE
CB_SELCHANGED = _x64dbg.CB_SELCHANGED
CB_ANALYZE = _x64dbg.CB_ANALYZE
CB_ADDRINFO = _x64dbg.CB_ADDRINFO
CB_VALFROMSTRING = _x64dbg.CB_VALFROMSTRING
CB_VALTOSTRING = _x64dbg.CB_VALTOSTRING
CB_MENUPREPARE = _x64dbg.CB_MENUPREPARE
CB_LAST = _x64dbg.CB_LAST
FORMAT_ERROR = _x64dbg.FORMAT_ERROR
FORMAT_SUCCESS = _x64dbg.FORMAT_SUCCESS
FORMAT_ERROR_MESSAGE = _x64dbg.FORMAT_ERROR_MESSAGE
FORMAT_BUFFER_TOO_SMALL = _x64dbg.FORMAT_BUFFER_TOO_SMALL

def _plugin_registercallback(pluginHandle, cbType, cbPlugin):
    return _x64dbg._plugin_registercallback(pluginHandle, cbType, cbPlugin)
_plugin_registercallback = _x64dbg._plugin_registercallback

def _plugin_unregistercallback(pluginHandle, cbType):
    return _x64dbg._plugin_unregistercallback(pluginHandle, cbType)
_plugin_unregistercallback = _x64dbg._plugin_unregistercallback

def _plugin_registercommand(pluginHandle, command, cbCommand, debugonly):
    return _x64dbg._plugin_registercommand(pluginHandle, command, cbCommand, debugonly)
_plugin_registercommand = _x64dbg._plugin_registercommand

def _plugin_unregistercommand(pluginHandle, command):
    return _x64dbg._plugin_unregistercommand(pluginHandle, command)
_plugin_unregistercommand = _x64dbg._plugin_unregistercommand

def _plugin_logprintf(format):
    return _x64dbg._plugin_logprintf(format)
_plugin_logprintf = _x64dbg._plugin_logprintf

def _plugin_logputs(text):
    return _x64dbg._plugin_logputs(text)
_plugin_logputs = _x64dbg._plugin_logputs

def _plugin_logprint(text):
    return _x64dbg._plugin_logprint(text)
_plugin_logprint = _x64dbg._plugin_logprint

def _plugin_debugpause():
    return _x64dbg._plugin_debugpause()
_plugin_debugpause = _x64dbg._plugin_debugpause

def _plugin_debugskipexceptions(skip):
    return _x64dbg._plugin_debugskipexceptions(skip)
_plugin_debugskipexceptions = _x64dbg._plugin_debugskipexceptions

def _plugin_menuadd(hMenu, title):
    return _x64dbg._plugin_menuadd(hMenu, title)
_plugin_menuadd = _x64dbg._plugin_menuadd

def _plugin_menuaddentry(hMenu, hEntry, title):
    return _x64dbg._plugin_menuaddentry(hMenu, hEntry, title)
_plugin_menuaddentry = _x64dbg._plugin_menuaddentry

def _plugin_menuaddseparator(hMenu):
    return _x64dbg._plugin_menuaddseparator(hMenu)
_plugin_menuaddseparator = _x64dbg._plugin_menuaddseparator

def _plugin_menuclear(hMenu):
    return _x64dbg._plugin_menuclear(hMenu)
_plugin_menuclear = _x64dbg._plugin_menuclear

def _plugin_menuseticon(hMenu, icon):
    return _x64dbg._plugin_menuseticon(hMenu, icon)
_plugin_menuseticon = _x64dbg._plugin_menuseticon

def _plugin_menuentryseticon(pluginHandle, hEntry, icon):
    return _x64dbg._plugin_menuentryseticon(pluginHandle, hEntry, icon)
_plugin_menuentryseticon = _x64dbg._plugin_menuentryseticon

def _plugin_menuentrysetchecked(pluginHandle, hEntry, checked):
    return _x64dbg._plugin_menuentrysetchecked(pluginHandle, hEntry, checked)
_plugin_menuentrysetchecked = _x64dbg._plugin_menuentrysetchecked

def _plugin_menusetvisible(pluginHandle, hMenu, visible):
    return _x64dbg._plugin_menusetvisible(pluginHandle, hMenu, visible)
_plugin_menusetvisible = _x64dbg._plugin_menusetvisible

def _plugin_menuentrysetvisible(pluginHandle, hEntry, visible):
    return _x64dbg._plugin_menuentrysetvisible(pluginHandle, hEntry, visible)
_plugin_menuentrysetvisible = _x64dbg._plugin_menuentrysetvisible

def _plugin_menusetname(pluginHandle, hMenu, name):
    return _x64dbg._plugin_menusetname(pluginHandle, hMenu, name)
_plugin_menusetname = _x64dbg._plugin_menusetname

def _plugin_menuentrysetname(pluginHandle, hEntry, name):
    return _x64dbg._plugin_menuentrysetname(pluginHandle, hEntry, name)
_plugin_menuentrysetname = _x64dbg._plugin_menuentrysetname

def _plugin_menuentrysethotkey(pluginHandle, hEntry, hotkey):
    return _x64dbg._plugin_menuentrysethotkey(pluginHandle, hEntry, hotkey)
_plugin_menuentrysethotkey = _x64dbg._plugin_menuentrysethotkey

def _plugin_menuremove(hMenu):
    return _x64dbg._plugin_menuremove(hMenu)
_plugin_menuremove = _x64dbg._plugin_menuremove

def _plugin_menuentryremove(pluginHandle, hEntry):
    return _x64dbg._plugin_menuentryremove(pluginHandle, hEntry)
_plugin_menuentryremove = _x64dbg._plugin_menuentryremove

def _plugin_startscript(cbScript):
    return _x64dbg._plugin_startscript(cbScript)
_plugin_startscript = _x64dbg._plugin_startscript

def _plugin_waituntilpaused():
    return _x64dbg._plugin_waituntilpaused()
_plugin_waituntilpaused = _x64dbg._plugin_waituntilpaused

def _plugin_registerexprfunction(pluginHandle, name, argc, cbFunction, userdata):
    return _x64dbg._plugin_registerexprfunction(pluginHandle, name, argc, cbFunction, userdata)
_plugin_registerexprfunction = _x64dbg._plugin_registerexprfunction

def _plugin_unregisterexprfunction(pluginHandle, name):
    return _x64dbg._plugin_unregisterexprfunction(pluginHandle, name)
_plugin_unregisterexprfunction = _x64dbg._plugin_unregisterexprfunction

def _plugin_unload(pluginName):
    return _x64dbg._plugin_unload(pluginName)
_plugin_unload = _x64dbg._plugin_unload

def _plugin_load(pluginName):
    return _x64dbg._plugin_load(pluginName)
_plugin_load = _x64dbg._plugin_load

def _plugin_hash(data, size):
    return _x64dbg._plugin_hash(data, size)
_plugin_hash = _x64dbg._plugin_hash

def _plugin_registerformatfunction(pluginHandle, type, cbFunction, userdata):
    return _x64dbg._plugin_registerformatfunction(pluginHandle, type, cbFunction, userdata)
_plugin_registerformatfunction = _x64dbg._plugin_registerformatfunction

def _plugin_unregisterformatfunction(pluginHandle, type):
    return _x64dbg._plugin_unregisterformatfunction(pluginHandle, type)
_plugin_unregisterformatfunction = _x64dbg._plugin_unregisterformatfunction
class ArgumentInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArgumentInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArgumentInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mod"] = _x64dbg.ArgumentInfo_mod_set
    __swig_getmethods__["mod"] = _x64dbg.ArgumentInfo_mod_get
    if _newclass:
        mod = _swig_property(_x64dbg.ArgumentInfo_mod_get, _x64dbg.ArgumentInfo_mod_set)
    __swig_setmethods__["rvaStart"] = _x64dbg.ArgumentInfo_rvaStart_set
    __swig_getmethods__["rvaStart"] = _x64dbg.ArgumentInfo_rvaStart_get
    if _newclass:
        rvaStart = _swig_property(_x64dbg.ArgumentInfo_rvaStart_get, _x64dbg.ArgumentInfo_rvaStart_set)
    __swig_setmethods__["rvaEnd"] = _x64dbg.ArgumentInfo_rvaEnd_set
    __swig_getmethods__["rvaEnd"] = _x64dbg.ArgumentInfo_rvaEnd_get
    if _newclass:
        rvaEnd = _swig_property(_x64dbg.ArgumentInfo_rvaEnd_get, _x64dbg.ArgumentInfo_rvaEnd_set)
    __swig_setmethods__["manual"] = _x64dbg.ArgumentInfo_manual_set
    __swig_getmethods__["manual"] = _x64dbg.ArgumentInfo_manual_get
    if _newclass:
        manual = _swig_property(_x64dbg.ArgumentInfo_manual_get, _x64dbg.ArgumentInfo_manual_set)
    __swig_setmethods__["instructioncount"] = _x64dbg.ArgumentInfo_instructioncount_set
    __swig_getmethods__["instructioncount"] = _x64dbg.ArgumentInfo_instructioncount_get
    if _newclass:
        instructioncount = _swig_property(_x64dbg.ArgumentInfo_instructioncount_get, _x64dbg.ArgumentInfo_instructioncount_set)

    def __init__(self):
        this = _x64dbg.new_ArgumentInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_ArgumentInfo
    __del__ = lambda self: None
ArgumentInfo_swigregister = _x64dbg.ArgumentInfo_swigregister
ArgumentInfo_swigregister(ArgumentInfo)


def Argument_Add(*args):
    return _x64dbg.Argument_Add(*args)
Argument_Add = _x64dbg.Argument_Add

def Argument_Get(addr, start=None, end=None, instructionCount=None):
    return _x64dbg.Argument_Get(addr, start, end, instructionCount)
Argument_Get = _x64dbg.Argument_Get

def Argument_GetInfo(addr, info):
    return _x64dbg.Argument_GetInfo(addr, info)
Argument_GetInfo = _x64dbg.Argument_GetInfo

def Argument_Overlaps(start, end):
    return _x64dbg.Argument_Overlaps(start, end)
Argument_Overlaps = _x64dbg.Argument_Overlaps

def Argument_Delete(address):
    return _x64dbg.Argument_Delete(address)
Argument_Delete = _x64dbg.Argument_Delete

def Argument_DeleteRange(start, end, deleteManual=False):
    return _x64dbg.Argument_DeleteRange(start, end, deleteManual)
Argument_DeleteRange = _x64dbg.Argument_DeleteRange

def Argument_Clear():
    return _x64dbg.Argument_Clear()
Argument_Clear = _x64dbg.Argument_Clear

def Argument_GetList(list):
    return _x64dbg.Argument_GetList(list)
Argument_GetList = _x64dbg.Argument_GetList
class vectorGetArgumentInfoList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorGetArgumentInfoList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorGetArgumentInfoList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _x64dbg.vectorGetArgumentInfoList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _x64dbg.vectorGetArgumentInfoList___nonzero__(self)

    def __bool__(self):
        return _x64dbg.vectorGetArgumentInfoList___bool__(self)

    def __len__(self):
        return _x64dbg.vectorGetArgumentInfoList___len__(self)

    def __getslice__(self, i, j):
        return _x64dbg.vectorGetArgumentInfoList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _x64dbg.vectorGetArgumentInfoList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _x64dbg.vectorGetArgumentInfoList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _x64dbg.vectorGetArgumentInfoList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _x64dbg.vectorGetArgumentInfoList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _x64dbg.vectorGetArgumentInfoList___setitem__(self, *args)

    def pop(self):
        return _x64dbg.vectorGetArgumentInfoList_pop(self)

    def append(self, x):
        return _x64dbg.vectorGetArgumentInfoList_append(self, x)

    def empty(self):
        return _x64dbg.vectorGetArgumentInfoList_empty(self)

    def size(self):
        return _x64dbg.vectorGetArgumentInfoList_size(self)

    def swap(self, v):
        return _x64dbg.vectorGetArgumentInfoList_swap(self, v)

    def begin(self):
        return _x64dbg.vectorGetArgumentInfoList_begin(self)

    def end(self):
        return _x64dbg.vectorGetArgumentInfoList_end(self)

    def rbegin(self):
        return _x64dbg.vectorGetArgumentInfoList_rbegin(self)

    def rend(self):
        return _x64dbg.vectorGetArgumentInfoList_rend(self)

    def clear(self):
        return _x64dbg.vectorGetArgumentInfoList_clear(self)

    def get_allocator(self):
        return _x64dbg.vectorGetArgumentInfoList_get_allocator(self)

    def pop_back(self):
        return _x64dbg.vectorGetArgumentInfoList_pop_back(self)

    def erase(self, *args):
        return _x64dbg.vectorGetArgumentInfoList_erase(self, *args)

    def __init__(self, *args):
        this = _x64dbg.new_vectorGetArgumentInfoList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _x64dbg.vectorGetArgumentInfoList_push_back(self, x)

    def front(self):
        return _x64dbg.vectorGetArgumentInfoList_front(self)

    def back(self):
        return _x64dbg.vectorGetArgumentInfoList_back(self)

    def assign(self, n, x):
        return _x64dbg.vectorGetArgumentInfoList_assign(self, n, x)

    def resize(self, *args):
        return _x64dbg.vectorGetArgumentInfoList_resize(self, *args)

    def insert(self, *args):
        return _x64dbg.vectorGetArgumentInfoList_insert(self, *args)

    def reserve(self, n):
        return _x64dbg.vectorGetArgumentInfoList_reserve(self, n)

    def capacity(self):
        return _x64dbg.vectorGetArgumentInfoList_capacity(self)
    __swig_destroy__ = _x64dbg.delete_vectorGetArgumentInfoList
    __del__ = lambda self: None
vectorGetArgumentInfoList_swigregister = _x64dbg.vectorGetArgumentInfoList_swigregister
vectorGetArgumentInfoList_swigregister(vectorGetArgumentInfoList)


def GetArgumentInfoList(l):
    return _x64dbg.GetArgumentInfoList(l)
GetArgumentInfoList = _x64dbg.GetArgumentInfoList
class BookmarkInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BookmarkInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BookmarkInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mod"] = _x64dbg.BookmarkInfo_mod_set
    __swig_getmethods__["mod"] = _x64dbg.BookmarkInfo_mod_get
    if _newclass:
        mod = _swig_property(_x64dbg.BookmarkInfo_mod_get, _x64dbg.BookmarkInfo_mod_set)
    __swig_setmethods__["rva"] = _x64dbg.BookmarkInfo_rva_set
    __swig_getmethods__["rva"] = _x64dbg.BookmarkInfo_rva_get
    if _newclass:
        rva = _swig_property(_x64dbg.BookmarkInfo_rva_get, _x64dbg.BookmarkInfo_rva_set)
    __swig_setmethods__["manual"] = _x64dbg.BookmarkInfo_manual_set
    __swig_getmethods__["manual"] = _x64dbg.BookmarkInfo_manual_get
    if _newclass:
        manual = _swig_property(_x64dbg.BookmarkInfo_manual_get, _x64dbg.BookmarkInfo_manual_set)

    def __init__(self):
        this = _x64dbg.new_BookmarkInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_BookmarkInfo
    __del__ = lambda self: None
BookmarkInfo_swigregister = _x64dbg.BookmarkInfo_swigregister
BookmarkInfo_swigregister(BookmarkInfo)


def Bookmark_Set(*args):
    return _x64dbg.Bookmark_Set(*args)
Bookmark_Set = _x64dbg.Bookmark_Set

def Bookmark_Get(addr):
    return _x64dbg.Bookmark_Get(addr)
Bookmark_Get = _x64dbg.Bookmark_Get

def Bookmark_GetInfo(addr, info):
    return _x64dbg.Bookmark_GetInfo(addr, info)
Bookmark_GetInfo = _x64dbg.Bookmark_GetInfo

def Bookmark_Delete(addr):
    return _x64dbg.Bookmark_Delete(addr)
Bookmark_Delete = _x64dbg.Bookmark_Delete

def Bookmark_DeleteRange(start, end):
    return _x64dbg.Bookmark_DeleteRange(start, end)
Bookmark_DeleteRange = _x64dbg.Bookmark_DeleteRange

def Bookmark_Clear():
    return _x64dbg.Bookmark_Clear()
Bookmark_Clear = _x64dbg.Bookmark_Clear

def Bookmark_GetList(list):
    return _x64dbg.Bookmark_GetList(list)
Bookmark_GetList = _x64dbg.Bookmark_GetList
class vectorGetBookmarkInfoList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorGetBookmarkInfoList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorGetBookmarkInfoList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _x64dbg.vectorGetBookmarkInfoList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _x64dbg.vectorGetBookmarkInfoList___nonzero__(self)

    def __bool__(self):
        return _x64dbg.vectorGetBookmarkInfoList___bool__(self)

    def __len__(self):
        return _x64dbg.vectorGetBookmarkInfoList___len__(self)

    def __getslice__(self, i, j):
        return _x64dbg.vectorGetBookmarkInfoList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _x64dbg.vectorGetBookmarkInfoList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _x64dbg.vectorGetBookmarkInfoList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _x64dbg.vectorGetBookmarkInfoList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _x64dbg.vectorGetBookmarkInfoList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _x64dbg.vectorGetBookmarkInfoList___setitem__(self, *args)

    def pop(self):
        return _x64dbg.vectorGetBookmarkInfoList_pop(self)

    def append(self, x):
        return _x64dbg.vectorGetBookmarkInfoList_append(self, x)

    def empty(self):
        return _x64dbg.vectorGetBookmarkInfoList_empty(self)

    def size(self):
        return _x64dbg.vectorGetBookmarkInfoList_size(self)

    def swap(self, v):
        return _x64dbg.vectorGetBookmarkInfoList_swap(self, v)

    def begin(self):
        return _x64dbg.vectorGetBookmarkInfoList_begin(self)

    def end(self):
        return _x64dbg.vectorGetBookmarkInfoList_end(self)

    def rbegin(self):
        return _x64dbg.vectorGetBookmarkInfoList_rbegin(self)

    def rend(self):
        return _x64dbg.vectorGetBookmarkInfoList_rend(self)

    def clear(self):
        return _x64dbg.vectorGetBookmarkInfoList_clear(self)

    def get_allocator(self):
        return _x64dbg.vectorGetBookmarkInfoList_get_allocator(self)

    def pop_back(self):
        return _x64dbg.vectorGetBookmarkInfoList_pop_back(self)

    def erase(self, *args):
        return _x64dbg.vectorGetBookmarkInfoList_erase(self, *args)

    def __init__(self, *args):
        this = _x64dbg.new_vectorGetBookmarkInfoList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _x64dbg.vectorGetBookmarkInfoList_push_back(self, x)

    def front(self):
        return _x64dbg.vectorGetBookmarkInfoList_front(self)

    def back(self):
        return _x64dbg.vectorGetBookmarkInfoList_back(self)

    def assign(self, n, x):
        return _x64dbg.vectorGetBookmarkInfoList_assign(self, n, x)

    def resize(self, *args):
        return _x64dbg.vectorGetBookmarkInfoList_resize(self, *args)

    def insert(self, *args):
        return _x64dbg.vectorGetBookmarkInfoList_insert(self, *args)

    def reserve(self, n):
        return _x64dbg.vectorGetBookmarkInfoList_reserve(self, n)

    def capacity(self):
        return _x64dbg.vectorGetBookmarkInfoList_capacity(self)
    __swig_destroy__ = _x64dbg.delete_vectorGetBookmarkInfoList
    __del__ = lambda self: None
vectorGetBookmarkInfoList_swigregister = _x64dbg.vectorGetBookmarkInfoList_swigregister
vectorGetBookmarkInfoList_swigregister(vectorGetBookmarkInfoList)


def GetBookmarkInfoList(l):
    return _x64dbg.GetBookmarkInfoList(l)
GetBookmarkInfoList = _x64dbg.GetBookmarkInfoList
class CommentInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommentInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CommentInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mod"] = _x64dbg.CommentInfo_mod_set
    __swig_getmethods__["mod"] = _x64dbg.CommentInfo_mod_get
    if _newclass:
        mod = _swig_property(_x64dbg.CommentInfo_mod_get, _x64dbg.CommentInfo_mod_set)
    __swig_setmethods__["rva"] = _x64dbg.CommentInfo_rva_set
    __swig_getmethods__["rva"] = _x64dbg.CommentInfo_rva_get
    if _newclass:
        rva = _swig_property(_x64dbg.CommentInfo_rva_get, _x64dbg.CommentInfo_rva_set)
    __swig_setmethods__["text"] = _x64dbg.CommentInfo_text_set
    __swig_getmethods__["text"] = _x64dbg.CommentInfo_text_get
    if _newclass:
        text = _swig_property(_x64dbg.CommentInfo_text_get, _x64dbg.CommentInfo_text_set)
    __swig_setmethods__["manual"] = _x64dbg.CommentInfo_manual_set
    __swig_getmethods__["manual"] = _x64dbg.CommentInfo_manual_get
    if _newclass:
        manual = _swig_property(_x64dbg.CommentInfo_manual_get, _x64dbg.CommentInfo_manual_set)

    def __init__(self):
        this = _x64dbg.new_CommentInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_CommentInfo
    __del__ = lambda self: None
CommentInfo_swigregister = _x64dbg.CommentInfo_swigregister
CommentInfo_swigregister(CommentInfo)


def Comment_Set(*args):
    return _x64dbg.Comment_Set(*args)
Comment_Set = _x64dbg.Comment_Set

def Comment_Get(addr, text):
    return _x64dbg.Comment_Get(addr, text)
Comment_Get = _x64dbg.Comment_Get

def Comment_GetInfo(addr, info):
    return _x64dbg.Comment_GetInfo(addr, info)
Comment_GetInfo = _x64dbg.Comment_GetInfo

def Comment_Delete(addr):
    return _x64dbg.Comment_Delete(addr)
Comment_Delete = _x64dbg.Comment_Delete

def Comment_DeleteRange(start, end):
    return _x64dbg.Comment_DeleteRange(start, end)
Comment_DeleteRange = _x64dbg.Comment_DeleteRange

def Comment_Clear():
    return _x64dbg.Comment_Clear()
Comment_Clear = _x64dbg.Comment_Clear

def Comment_GetList(list):
    return _x64dbg.Comment_GetList(list)
Comment_GetList = _x64dbg.Comment_GetList
class vectorGetCommentInfoList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorGetCommentInfoList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorGetCommentInfoList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _x64dbg.vectorGetCommentInfoList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _x64dbg.vectorGetCommentInfoList___nonzero__(self)

    def __bool__(self):
        return _x64dbg.vectorGetCommentInfoList___bool__(self)

    def __len__(self):
        return _x64dbg.vectorGetCommentInfoList___len__(self)

    def __getslice__(self, i, j):
        return _x64dbg.vectorGetCommentInfoList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _x64dbg.vectorGetCommentInfoList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _x64dbg.vectorGetCommentInfoList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _x64dbg.vectorGetCommentInfoList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _x64dbg.vectorGetCommentInfoList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _x64dbg.vectorGetCommentInfoList___setitem__(self, *args)

    def pop(self):
        return _x64dbg.vectorGetCommentInfoList_pop(self)

    def append(self, x):
        return _x64dbg.vectorGetCommentInfoList_append(self, x)

    def empty(self):
        return _x64dbg.vectorGetCommentInfoList_empty(self)

    def size(self):
        return _x64dbg.vectorGetCommentInfoList_size(self)

    def swap(self, v):
        return _x64dbg.vectorGetCommentInfoList_swap(self, v)

    def begin(self):
        return _x64dbg.vectorGetCommentInfoList_begin(self)

    def end(self):
        return _x64dbg.vectorGetCommentInfoList_end(self)

    def rbegin(self):
        return _x64dbg.vectorGetCommentInfoList_rbegin(self)

    def rend(self):
        return _x64dbg.vectorGetCommentInfoList_rend(self)

    def clear(self):
        return _x64dbg.vectorGetCommentInfoList_clear(self)

    def get_allocator(self):
        return _x64dbg.vectorGetCommentInfoList_get_allocator(self)

    def pop_back(self):
        return _x64dbg.vectorGetCommentInfoList_pop_back(self)

    def erase(self, *args):
        return _x64dbg.vectorGetCommentInfoList_erase(self, *args)

    def __init__(self, *args):
        this = _x64dbg.new_vectorGetCommentInfoList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _x64dbg.vectorGetCommentInfoList_push_back(self, x)

    def front(self):
        return _x64dbg.vectorGetCommentInfoList_front(self)

    def back(self):
        return _x64dbg.vectorGetCommentInfoList_back(self)

    def assign(self, n, x):
        return _x64dbg.vectorGetCommentInfoList_assign(self, n, x)

    def resize(self, *args):
        return _x64dbg.vectorGetCommentInfoList_resize(self, *args)

    def insert(self, *args):
        return _x64dbg.vectorGetCommentInfoList_insert(self, *args)

    def reserve(self, n):
        return _x64dbg.vectorGetCommentInfoList_reserve(self, n)

    def capacity(self):
        return _x64dbg.vectorGetCommentInfoList_capacity(self)
    __swig_destroy__ = _x64dbg.delete_vectorGetCommentInfoList
    __del__ = lambda self: None
vectorGetCommentInfoList_swigregister = _x64dbg.vectorGetCommentInfoList_swigregister
vectorGetCommentInfoList_swigregister(vectorGetCommentInfoList)


def GetCommentInfoList(l):
    return _x64dbg.GetCommentInfoList(l)
GetCommentInfoList = _x64dbg.GetCommentInfoList
HardwareAccess = _x64dbg.HardwareAccess
HardwareWrite = _x64dbg.HardwareWrite
HardwareExecute = _x64dbg.HardwareExecute

def Wait():
    return _x64dbg.Wait()
Wait = _x64dbg.Wait

def Run():
    return _x64dbg.Run()
Run = _x64dbg.Run

def Pause():
    return _x64dbg.Pause()
Pause = _x64dbg.Pause

def Stop():
    return _x64dbg.Stop()
Stop = _x64dbg.Stop

def StepIn():
    return _x64dbg.StepIn()
StepIn = _x64dbg.StepIn

def StepOver():
    return _x64dbg.StepOver()
StepOver = _x64dbg.StepOver

def StepOut():
    return _x64dbg.StepOut()
StepOut = _x64dbg.StepOut

def SetBreakpoint(address):
    return _x64dbg.SetBreakpoint(address)
SetBreakpoint = _x64dbg.SetBreakpoint

def DeleteBreakpoint(address):
    return _x64dbg.DeleteBreakpoint(address)
DeleteBreakpoint = _x64dbg.DeleteBreakpoint

def DisableBreakpoint(address):
    return _x64dbg.DisableBreakpoint(address)
DisableBreakpoint = _x64dbg.DisableBreakpoint

def SetHardwareBreakpoint(*args):
    return _x64dbg.SetHardwareBreakpoint(*args)
SetHardwareBreakpoint = _x64dbg.SetHardwareBreakpoint

def DeleteHardwareBreakpoint(address):
    return _x64dbg.DeleteHardwareBreakpoint(address)
DeleteHardwareBreakpoint = _x64dbg.DeleteHardwareBreakpoint
class FunctionInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FunctionInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FunctionInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mod"] = _x64dbg.FunctionInfo_mod_set
    __swig_getmethods__["mod"] = _x64dbg.FunctionInfo_mod_get
    if _newclass:
        mod = _swig_property(_x64dbg.FunctionInfo_mod_get, _x64dbg.FunctionInfo_mod_set)
    __swig_setmethods__["rvaStart"] = _x64dbg.FunctionInfo_rvaStart_set
    __swig_getmethods__["rvaStart"] = _x64dbg.FunctionInfo_rvaStart_get
    if _newclass:
        rvaStart = _swig_property(_x64dbg.FunctionInfo_rvaStart_get, _x64dbg.FunctionInfo_rvaStart_set)
    __swig_setmethods__["rvaEnd"] = _x64dbg.FunctionInfo_rvaEnd_set
    __swig_getmethods__["rvaEnd"] = _x64dbg.FunctionInfo_rvaEnd_get
    if _newclass:
        rvaEnd = _swig_property(_x64dbg.FunctionInfo_rvaEnd_get, _x64dbg.FunctionInfo_rvaEnd_set)
    __swig_setmethods__["manual"] = _x64dbg.FunctionInfo_manual_set
    __swig_getmethods__["manual"] = _x64dbg.FunctionInfo_manual_get
    if _newclass:
        manual = _swig_property(_x64dbg.FunctionInfo_manual_get, _x64dbg.FunctionInfo_manual_set)
    __swig_setmethods__["instructioncount"] = _x64dbg.FunctionInfo_instructioncount_set
    __swig_getmethods__["instructioncount"] = _x64dbg.FunctionInfo_instructioncount_get
    if _newclass:
        instructioncount = _swig_property(_x64dbg.FunctionInfo_instructioncount_get, _x64dbg.FunctionInfo_instructioncount_set)

    def __init__(self):
        this = _x64dbg.new_FunctionInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_FunctionInfo
    __del__ = lambda self: None
FunctionInfo_swigregister = _x64dbg.FunctionInfo_swigregister
FunctionInfo_swigregister(FunctionInfo)


def Function_Add(*args):
    return _x64dbg.Function_Add(*args)
Function_Add = _x64dbg.Function_Add

def Function_Get(addr, start=None, end=None, instructionCount=None):
    return _x64dbg.Function_Get(addr, start, end, instructionCount)
Function_Get = _x64dbg.Function_Get

def Function_GetInfo(addr, info):
    return _x64dbg.Function_GetInfo(addr, info)
Function_GetInfo = _x64dbg.Function_GetInfo

def Function_Overlaps(start, end):
    return _x64dbg.Function_Overlaps(start, end)
Function_Overlaps = _x64dbg.Function_Overlaps

def Function_Delete(address):
    return _x64dbg.Function_Delete(address)
Function_Delete = _x64dbg.Function_Delete

def Function_DeleteRange(*args):
    return _x64dbg.Function_DeleteRange(*args)
Function_DeleteRange = _x64dbg.Function_DeleteRange

def Function_Clear():
    return _x64dbg.Function_Clear()
Function_Clear = _x64dbg.Function_Clear

def Function_GetList(list):
    return _x64dbg.Function_GetList(list)
Function_GetList = _x64dbg.Function_GetList
class vectorGetFunctionInfoList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorGetFunctionInfoList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorGetFunctionInfoList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _x64dbg.vectorGetFunctionInfoList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _x64dbg.vectorGetFunctionInfoList___nonzero__(self)

    def __bool__(self):
        return _x64dbg.vectorGetFunctionInfoList___bool__(self)

    def __len__(self):
        return _x64dbg.vectorGetFunctionInfoList___len__(self)

    def __getslice__(self, i, j):
        return _x64dbg.vectorGetFunctionInfoList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _x64dbg.vectorGetFunctionInfoList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _x64dbg.vectorGetFunctionInfoList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _x64dbg.vectorGetFunctionInfoList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _x64dbg.vectorGetFunctionInfoList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _x64dbg.vectorGetFunctionInfoList___setitem__(self, *args)

    def pop(self):
        return _x64dbg.vectorGetFunctionInfoList_pop(self)

    def append(self, x):
        return _x64dbg.vectorGetFunctionInfoList_append(self, x)

    def empty(self):
        return _x64dbg.vectorGetFunctionInfoList_empty(self)

    def size(self):
        return _x64dbg.vectorGetFunctionInfoList_size(self)

    def swap(self, v):
        return _x64dbg.vectorGetFunctionInfoList_swap(self, v)

    def begin(self):
        return _x64dbg.vectorGetFunctionInfoList_begin(self)

    def end(self):
        return _x64dbg.vectorGetFunctionInfoList_end(self)

    def rbegin(self):
        return _x64dbg.vectorGetFunctionInfoList_rbegin(self)

    def rend(self):
        return _x64dbg.vectorGetFunctionInfoList_rend(self)

    def clear(self):
        return _x64dbg.vectorGetFunctionInfoList_clear(self)

    def get_allocator(self):
        return _x64dbg.vectorGetFunctionInfoList_get_allocator(self)

    def pop_back(self):
        return _x64dbg.vectorGetFunctionInfoList_pop_back(self)

    def erase(self, *args):
        return _x64dbg.vectorGetFunctionInfoList_erase(self, *args)

    def __init__(self, *args):
        this = _x64dbg.new_vectorGetFunctionInfoList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _x64dbg.vectorGetFunctionInfoList_push_back(self, x)

    def front(self):
        return _x64dbg.vectorGetFunctionInfoList_front(self)

    def back(self):
        return _x64dbg.vectorGetFunctionInfoList_back(self)

    def assign(self, n, x):
        return _x64dbg.vectorGetFunctionInfoList_assign(self, n, x)

    def resize(self, *args):
        return _x64dbg.vectorGetFunctionInfoList_resize(self, *args)

    def insert(self, *args):
        return _x64dbg.vectorGetFunctionInfoList_insert(self, *args)

    def reserve(self, n):
        return _x64dbg.vectorGetFunctionInfoList_reserve(self, n)

    def capacity(self):
        return _x64dbg.vectorGetFunctionInfoList_capacity(self)
    __swig_destroy__ = _x64dbg.delete_vectorGetFunctionInfoList
    __del__ = lambda self: None
vectorGetFunctionInfoList_swigregister = _x64dbg.vectorGetFunctionInfoList_swigregister
vectorGetFunctionInfoList_swigregister(vectorGetFunctionInfoList)


def GetFunctionInfoList(l):
    return _x64dbg.GetFunctionInfoList(l)
GetFunctionInfoList = _x64dbg.GetFunctionInfoList
class LabelInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LabelInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LabelInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mod"] = _x64dbg.LabelInfo_mod_set
    __swig_getmethods__["mod"] = _x64dbg.LabelInfo_mod_get
    if _newclass:
        mod = _swig_property(_x64dbg.LabelInfo_mod_get, _x64dbg.LabelInfo_mod_set)
    __swig_setmethods__["rva"] = _x64dbg.LabelInfo_rva_set
    __swig_getmethods__["rva"] = _x64dbg.LabelInfo_rva_get
    if _newclass:
        rva = _swig_property(_x64dbg.LabelInfo_rva_get, _x64dbg.LabelInfo_rva_set)
    __swig_setmethods__["text"] = _x64dbg.LabelInfo_text_set
    __swig_getmethods__["text"] = _x64dbg.LabelInfo_text_get
    if _newclass:
        text = _swig_property(_x64dbg.LabelInfo_text_get, _x64dbg.LabelInfo_text_set)
    __swig_setmethods__["manual"] = _x64dbg.LabelInfo_manual_set
    __swig_getmethods__["manual"] = _x64dbg.LabelInfo_manual_get
    if _newclass:
        manual = _swig_property(_x64dbg.LabelInfo_manual_get, _x64dbg.LabelInfo_manual_set)

    def __init__(self):
        this = _x64dbg.new_LabelInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_LabelInfo
    __del__ = lambda self: None
LabelInfo_swigregister = _x64dbg.LabelInfo_swigregister
LabelInfo_swigregister(LabelInfo)


def Label_Set(*args):
    return _x64dbg.Label_Set(*args)
Label_Set = _x64dbg.Label_Set

def FromString(label):
    return _x64dbg.FromString(label)
FromString = _x64dbg.FromString

def Label_Get(addr, text):
    return _x64dbg.Label_Get(addr, text)
Label_Get = _x64dbg.Label_Get

def Label_GetInfo(addr, info):
    return _x64dbg.Label_GetInfo(addr, info)
Label_GetInfo = _x64dbg.Label_GetInfo

def Label_Delete(addr):
    return _x64dbg.Label_Delete(addr)
Label_Delete = _x64dbg.Label_Delete

def Label_DeleteRange(start, end):
    return _x64dbg.Label_DeleteRange(start, end)
Label_DeleteRange = _x64dbg.Label_DeleteRange

def Label_Clear():
    return _x64dbg.Label_Clear()
Label_Clear = _x64dbg.Label_Clear

def Label_GetList(list):
    return _x64dbg.Label_GetList(list)
Label_GetList = _x64dbg.Label_GetList
class vectorGetLabelInfoList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorGetLabelInfoList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorGetLabelInfoList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _x64dbg.vectorGetLabelInfoList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _x64dbg.vectorGetLabelInfoList___nonzero__(self)

    def __bool__(self):
        return _x64dbg.vectorGetLabelInfoList___bool__(self)

    def __len__(self):
        return _x64dbg.vectorGetLabelInfoList___len__(self)

    def __getslice__(self, i, j):
        return _x64dbg.vectorGetLabelInfoList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _x64dbg.vectorGetLabelInfoList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _x64dbg.vectorGetLabelInfoList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _x64dbg.vectorGetLabelInfoList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _x64dbg.vectorGetLabelInfoList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _x64dbg.vectorGetLabelInfoList___setitem__(self, *args)

    def pop(self):
        return _x64dbg.vectorGetLabelInfoList_pop(self)

    def append(self, x):
        return _x64dbg.vectorGetLabelInfoList_append(self, x)

    def empty(self):
        return _x64dbg.vectorGetLabelInfoList_empty(self)

    def size(self):
        return _x64dbg.vectorGetLabelInfoList_size(self)

    def swap(self, v):
        return _x64dbg.vectorGetLabelInfoList_swap(self, v)

    def begin(self):
        return _x64dbg.vectorGetLabelInfoList_begin(self)

    def end(self):
        return _x64dbg.vectorGetLabelInfoList_end(self)

    def rbegin(self):
        return _x64dbg.vectorGetLabelInfoList_rbegin(self)

    def rend(self):
        return _x64dbg.vectorGetLabelInfoList_rend(self)

    def clear(self):
        return _x64dbg.vectorGetLabelInfoList_clear(self)

    def get_allocator(self):
        return _x64dbg.vectorGetLabelInfoList_get_allocator(self)

    def pop_back(self):
        return _x64dbg.vectorGetLabelInfoList_pop_back(self)

    def erase(self, *args):
        return _x64dbg.vectorGetLabelInfoList_erase(self, *args)

    def __init__(self, *args):
        this = _x64dbg.new_vectorGetLabelInfoList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _x64dbg.vectorGetLabelInfoList_push_back(self, x)

    def front(self):
        return _x64dbg.vectorGetLabelInfoList_front(self)

    def back(self):
        return _x64dbg.vectorGetLabelInfoList_back(self)

    def assign(self, n, x):
        return _x64dbg.vectorGetLabelInfoList_assign(self, n, x)

    def resize(self, *args):
        return _x64dbg.vectorGetLabelInfoList_resize(self, *args)

    def insert(self, *args):
        return _x64dbg.vectorGetLabelInfoList_insert(self, *args)

    def reserve(self, n):
        return _x64dbg.vectorGetLabelInfoList_reserve(self, n)

    def capacity(self):
        return _x64dbg.vectorGetLabelInfoList_capacity(self)
    __swig_destroy__ = _x64dbg.delete_vectorGetLabelInfoList
    __del__ = lambda self: None
vectorGetLabelInfoList_swigregister = _x64dbg.vectorGetLabelInfoList_swigregister
vectorGetLabelInfoList_swigregister(vectorGetLabelInfoList)


def GetLabelInfoList(l):
    return _x64dbg.GetLabelInfoList(l)
GetLabelInfoList = _x64dbg.GetLabelInfoList
Function = _x64dbg.Function
Import = _x64dbg.Import
Export = _x64dbg.Export
class SymbolInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SymbolInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SymbolInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mod"] = _x64dbg.SymbolInfo_mod_set
    __swig_getmethods__["mod"] = _x64dbg.SymbolInfo_mod_get
    if _newclass:
        mod = _swig_property(_x64dbg.SymbolInfo_mod_get, _x64dbg.SymbolInfo_mod_set)
    __swig_setmethods__["rva"] = _x64dbg.SymbolInfo_rva_set
    __swig_getmethods__["rva"] = _x64dbg.SymbolInfo_rva_get
    if _newclass:
        rva = _swig_property(_x64dbg.SymbolInfo_rva_get, _x64dbg.SymbolInfo_rva_set)
    __swig_setmethods__["name"] = _x64dbg.SymbolInfo_name_set
    __swig_getmethods__["name"] = _x64dbg.SymbolInfo_name_get
    if _newclass:
        name = _swig_property(_x64dbg.SymbolInfo_name_get, _x64dbg.SymbolInfo_name_set)
    __swig_setmethods__["manual"] = _x64dbg.SymbolInfo_manual_set
    __swig_getmethods__["manual"] = _x64dbg.SymbolInfo_manual_get
    if _newclass:
        manual = _swig_property(_x64dbg.SymbolInfo_manual_get, _x64dbg.SymbolInfo_manual_set)
    __swig_setmethods__["type"] = _x64dbg.SymbolInfo_type_set
    __swig_getmethods__["type"] = _x64dbg.SymbolInfo_type_get
    if _newclass:
        type = _swig_property(_x64dbg.SymbolInfo_type_get, _x64dbg.SymbolInfo_type_set)

    def __init__(self):
        this = _x64dbg.new_SymbolInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_SymbolInfo
    __del__ = lambda self: None
SymbolInfo_swigregister = _x64dbg.SymbolInfo_swigregister
SymbolInfo_swigregister(SymbolInfo)


def Symbol_GetList(list):
    return _x64dbg.Symbol_GetList(list)
Symbol_GetList = _x64dbg.Symbol_GetList
class vectorGetSymbolInfoList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorGetSymbolInfoList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorGetSymbolInfoList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _x64dbg.vectorGetSymbolInfoList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _x64dbg.vectorGetSymbolInfoList___nonzero__(self)

    def __bool__(self):
        return _x64dbg.vectorGetSymbolInfoList___bool__(self)

    def __len__(self):
        return _x64dbg.vectorGetSymbolInfoList___len__(self)

    def __getslice__(self, i, j):
        return _x64dbg.vectorGetSymbolInfoList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _x64dbg.vectorGetSymbolInfoList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _x64dbg.vectorGetSymbolInfoList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _x64dbg.vectorGetSymbolInfoList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _x64dbg.vectorGetSymbolInfoList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _x64dbg.vectorGetSymbolInfoList___setitem__(self, *args)

    def pop(self):
        return _x64dbg.vectorGetSymbolInfoList_pop(self)

    def append(self, x):
        return _x64dbg.vectorGetSymbolInfoList_append(self, x)

    def empty(self):
        return _x64dbg.vectorGetSymbolInfoList_empty(self)

    def size(self):
        return _x64dbg.vectorGetSymbolInfoList_size(self)

    def swap(self, v):
        return _x64dbg.vectorGetSymbolInfoList_swap(self, v)

    def begin(self):
        return _x64dbg.vectorGetSymbolInfoList_begin(self)

    def end(self):
        return _x64dbg.vectorGetSymbolInfoList_end(self)

    def rbegin(self):
        return _x64dbg.vectorGetSymbolInfoList_rbegin(self)

    def rend(self):
        return _x64dbg.vectorGetSymbolInfoList_rend(self)

    def clear(self):
        return _x64dbg.vectorGetSymbolInfoList_clear(self)

    def get_allocator(self):
        return _x64dbg.vectorGetSymbolInfoList_get_allocator(self)

    def pop_back(self):
        return _x64dbg.vectorGetSymbolInfoList_pop_back(self)

    def erase(self, *args):
        return _x64dbg.vectorGetSymbolInfoList_erase(self, *args)

    def __init__(self, *args):
        this = _x64dbg.new_vectorGetSymbolInfoList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _x64dbg.vectorGetSymbolInfoList_push_back(self, x)

    def front(self):
        return _x64dbg.vectorGetSymbolInfoList_front(self)

    def back(self):
        return _x64dbg.vectorGetSymbolInfoList_back(self)

    def assign(self, n, x):
        return _x64dbg.vectorGetSymbolInfoList_assign(self, n, x)

    def resize(self, *args):
        return _x64dbg.vectorGetSymbolInfoList_resize(self, *args)

    def insert(self, *args):
        return _x64dbg.vectorGetSymbolInfoList_insert(self, *args)

    def reserve(self, n):
        return _x64dbg.vectorGetSymbolInfoList_reserve(self, n)

    def capacity(self):
        return _x64dbg.vectorGetSymbolInfoList_capacity(self)
    __swig_destroy__ = _x64dbg.delete_vectorGetSymbolInfoList
    __del__ = lambda self: None
vectorGetSymbolInfoList_swigregister = _x64dbg.vectorGetSymbolInfoList_swigregister
vectorGetSymbolInfoList_swigregister(vectorGetSymbolInfoList)


def GetSymbolInfoList(l):
    return _x64dbg.GetSymbolInfoList(l)
GetSymbolInfoList = _x64dbg.GetSymbolInfoList

def Memory_Read(addr, data, size):
    return _x64dbg.Memory_Read(addr, data, size)
Memory_Read = _x64dbg.Memory_Read

def Memory_Write(addr, data, size):
    return _x64dbg.Memory_Write(addr, data, size)
Memory_Write = _x64dbg.Memory_Write

def IsValidPtr(addr):
    return _x64dbg.IsValidPtr(addr)
IsValidPtr = _x64dbg.IsValidPtr

def RemoteAlloc(addr, size):
    return _x64dbg.RemoteAlloc(addr, size)
RemoteAlloc = _x64dbg.RemoteAlloc

def RemoteFree(addr):
    return _x64dbg.RemoteFree(addr)
RemoteFree = _x64dbg.RemoteFree

def GetProtect(addr, reserved=False, cache=True):
    return _x64dbg.GetProtect(addr, reserved, cache)
GetProtect = _x64dbg.GetProtect

def GetBase(addr, reserved=False, cache=True):
    return _x64dbg.GetBase(addr, reserved, cache)
GetBase = _x64dbg.GetBase

def GetSize(addr, reserved=False, cache=True):
    return _x64dbg.GetSize(addr, reserved, cache)
GetSize = _x64dbg.GetSize

def ReadByte(addr):
    return _x64dbg.ReadByte(addr)
ReadByte = _x64dbg.ReadByte

def WriteByte(addr, data):
    return _x64dbg.WriteByte(addr, data)
WriteByte = _x64dbg.WriteByte

def ReadWord(addr):
    return _x64dbg.ReadWord(addr)
ReadWord = _x64dbg.ReadWord

def WriteWord(addr, data):
    return _x64dbg.WriteWord(addr, data)
WriteWord = _x64dbg.WriteWord

def ReadDword(addr):
    return _x64dbg.ReadDword(addr)
ReadDword = _x64dbg.ReadDword

def WriteDword(addr, data):
    return _x64dbg.WriteDword(addr, data)
WriteDword = _x64dbg.WriteDword

def ReadQword(addr):
    return _x64dbg.ReadQword(addr)
ReadQword = _x64dbg.ReadQword

def WriteQword(addr, data):
    return _x64dbg.WriteQword(addr, data)
WriteQword = _x64dbg.WriteQword

def ReadPtr(addr):
    return _x64dbg.ReadPtr(addr)
ReadPtr = _x64dbg.ReadPtr

def WritePtr(addr, data):
    return _x64dbg.WritePtr(addr, data)
WritePtr = _x64dbg.WritePtr
DR0 = _x64dbg.DR0
DR1 = _x64dbg.DR1
DR2 = _x64dbg.DR2
DR3 = _x64dbg.DR3
DR6 = _x64dbg.DR6
DR7 = _x64dbg.DR7
EAX = _x64dbg.EAX
AX = _x64dbg.AX
AH = _x64dbg.AH
AL = _x64dbg.AL
EBX = _x64dbg.EBX
BX = _x64dbg.BX
BH = _x64dbg.BH
BL = _x64dbg.BL
ECX = _x64dbg.ECX
CX = _x64dbg.CX
CH = _x64dbg.CH
CL = _x64dbg.CL
EDX = _x64dbg.EDX
DX = _x64dbg.DX
DH = _x64dbg.DH
DL = _x64dbg.DL
EDI = _x64dbg.EDI
DI = _x64dbg.DI
ESI = _x64dbg.ESI
SI = _x64dbg.SI
EBP = _x64dbg.EBP
BP = _x64dbg.BP
ESP = _x64dbg.ESP
SP = _x64dbg.SP
EIP = _x64dbg.EIP
RAX = _x64dbg.RAX
RBX = _x64dbg.RBX
RCX = _x64dbg.RCX
RDX = _x64dbg.RDX
RSI = _x64dbg.RSI
SIL = _x64dbg.SIL
RDI = _x64dbg.RDI
DIL = _x64dbg.DIL
RBP = _x64dbg.RBP
BPL = _x64dbg.BPL
RSP = _x64dbg.RSP
SPL = _x64dbg.SPL
RIP = _x64dbg.RIP
R8 = _x64dbg.R8
R8D = _x64dbg.R8D
R8W = _x64dbg.R8W
R8B = _x64dbg.R8B
R9 = _x64dbg.R9
R9D = _x64dbg.R9D
R9W = _x64dbg.R9W
R9B = _x64dbg.R9B
R10 = _x64dbg.R10
R10D = _x64dbg.R10D
R10W = _x64dbg.R10W
R10B = _x64dbg.R10B
R11 = _x64dbg.R11
R11D = _x64dbg.R11D
R11W = _x64dbg.R11W
R11B = _x64dbg.R11B
R12 = _x64dbg.R12
R12D = _x64dbg.R12D
R12W = _x64dbg.R12W
R12B = _x64dbg.R12B
R13 = _x64dbg.R13
R13D = _x64dbg.R13D
R13W = _x64dbg.R13W
R13B = _x64dbg.R13B
R14 = _x64dbg.R14
R14D = _x64dbg.R14D
R14W = _x64dbg.R14W
R14B = _x64dbg.R14B
R15 = _x64dbg.R15
R15D = _x64dbg.R15D
R15W = _x64dbg.R15W
R15B = _x64dbg.R15B
CIP = _x64dbg.CIP
CSP = _x64dbg.CSP
CAX = _x64dbg.CAX
CBX = _x64dbg.CBX
CCX = _x64dbg.CCX
CDX = _x64dbg.CDX
CDI = _x64dbg.CDI
CSI = _x64dbg.CSI
CBP = _x64dbg.CBP
CFLAGS = _x64dbg.CFLAGS

def Get(reg):
    return _x64dbg.Get(reg)
Get = _x64dbg.Get

def Set(reg, value):
    return _x64dbg.Set(reg, value)
Set = _x64dbg.Set

def Size():
    return _x64dbg.Size()
Size = _x64dbg.Size

def GetDR0():
    return _x64dbg.GetDR0()
GetDR0 = _x64dbg.GetDR0

def SetDR0(value):
    return _x64dbg.SetDR0(value)
SetDR0 = _x64dbg.SetDR0

def GetDR1():
    return _x64dbg.GetDR1()
GetDR1 = _x64dbg.GetDR1

def SetDR1(value):
    return _x64dbg.SetDR1(value)
SetDR1 = _x64dbg.SetDR1

def GetDR2():
    return _x64dbg.GetDR2()
GetDR2 = _x64dbg.GetDR2

def SetDR2(value):
    return _x64dbg.SetDR2(value)
SetDR2 = _x64dbg.SetDR2

def GetDR3():
    return _x64dbg.GetDR3()
GetDR3 = _x64dbg.GetDR3

def SetDR3(value):
    return _x64dbg.SetDR3(value)
SetDR3 = _x64dbg.SetDR3

def GetDR6():
    return _x64dbg.GetDR6()
GetDR6 = _x64dbg.GetDR6

def SetDR6(value):
    return _x64dbg.SetDR6(value)
SetDR6 = _x64dbg.SetDR6

def GetDR7():
    return _x64dbg.GetDR7()
GetDR7 = _x64dbg.GetDR7

def SetDR7(value):
    return _x64dbg.SetDR7(value)
SetDR7 = _x64dbg.SetDR7

def GetEAX():
    return _x64dbg.GetEAX()
GetEAX = _x64dbg.GetEAX

def SetEAX(value):
    return _x64dbg.SetEAX(value)
SetEAX = _x64dbg.SetEAX

def GetAX():
    return _x64dbg.GetAX()
GetAX = _x64dbg.GetAX

def SetAX(value):
    return _x64dbg.SetAX(value)
SetAX = _x64dbg.SetAX

def GetAH():
    return _x64dbg.GetAH()
GetAH = _x64dbg.GetAH

def SetAH(value):
    return _x64dbg.SetAH(value)
SetAH = _x64dbg.SetAH

def GetAL():
    return _x64dbg.GetAL()
GetAL = _x64dbg.GetAL

def SetAL(value):
    return _x64dbg.SetAL(value)
SetAL = _x64dbg.SetAL

def GetEBX():
    return _x64dbg.GetEBX()
GetEBX = _x64dbg.GetEBX

def SetEBX(value):
    return _x64dbg.SetEBX(value)
SetEBX = _x64dbg.SetEBX

def GetBX():
    return _x64dbg.GetBX()
GetBX = _x64dbg.GetBX

def SetBX(value):
    return _x64dbg.SetBX(value)
SetBX = _x64dbg.SetBX

def GetBH():
    return _x64dbg.GetBH()
GetBH = _x64dbg.GetBH

def SetBH(value):
    return _x64dbg.SetBH(value)
SetBH = _x64dbg.SetBH

def GetBL():
    return _x64dbg.GetBL()
GetBL = _x64dbg.GetBL

def SetBL(value):
    return _x64dbg.SetBL(value)
SetBL = _x64dbg.SetBL

def GetECX():
    return _x64dbg.GetECX()
GetECX = _x64dbg.GetECX

def SetECX(value):
    return _x64dbg.SetECX(value)
SetECX = _x64dbg.SetECX

def GetCX():
    return _x64dbg.GetCX()
GetCX = _x64dbg.GetCX

def SetCX(value):
    return _x64dbg.SetCX(value)
SetCX = _x64dbg.SetCX

def GetCH():
    return _x64dbg.GetCH()
GetCH = _x64dbg.GetCH

def SetCH(value):
    return _x64dbg.SetCH(value)
SetCH = _x64dbg.SetCH

def GetCL():
    return _x64dbg.GetCL()
GetCL = _x64dbg.GetCL

def SetCL(value):
    return _x64dbg.SetCL(value)
SetCL = _x64dbg.SetCL

def GetEDX():
    return _x64dbg.GetEDX()
GetEDX = _x64dbg.GetEDX

def SetEDX(value):
    return _x64dbg.SetEDX(value)
SetEDX = _x64dbg.SetEDX

def GetDX():
    return _x64dbg.GetDX()
GetDX = _x64dbg.GetDX

def SetDX(value):
    return _x64dbg.SetDX(value)
SetDX = _x64dbg.SetDX

def GetDH():
    return _x64dbg.GetDH()
GetDH = _x64dbg.GetDH

def SetDH(value):
    return _x64dbg.SetDH(value)
SetDH = _x64dbg.SetDH

def GetDL():
    return _x64dbg.GetDL()
GetDL = _x64dbg.GetDL

def SetDL(value):
    return _x64dbg.SetDL(value)
SetDL = _x64dbg.SetDL

def GetEDI():
    return _x64dbg.GetEDI()
GetEDI = _x64dbg.GetEDI

def SetEDI(value):
    return _x64dbg.SetEDI(value)
SetEDI = _x64dbg.SetEDI

def GetDI():
    return _x64dbg.GetDI()
GetDI = _x64dbg.GetDI

def SetDI(value):
    return _x64dbg.SetDI(value)
SetDI = _x64dbg.SetDI

def GetESI():
    return _x64dbg.GetESI()
GetESI = _x64dbg.GetESI

def SetESI(value):
    return _x64dbg.SetESI(value)
SetESI = _x64dbg.SetESI

def GetSI():
    return _x64dbg.GetSI()
GetSI = _x64dbg.GetSI

def SetSI(value):
    return _x64dbg.SetSI(value)
SetSI = _x64dbg.SetSI

def GetEBP():
    return _x64dbg.GetEBP()
GetEBP = _x64dbg.GetEBP

def SetEBP(value):
    return _x64dbg.SetEBP(value)
SetEBP = _x64dbg.SetEBP

def GetBP():
    return _x64dbg.GetBP()
GetBP = _x64dbg.GetBP

def SetBP(value):
    return _x64dbg.SetBP(value)
SetBP = _x64dbg.SetBP

def GetESP():
    return _x64dbg.GetESP()
GetESP = _x64dbg.GetESP

def SetESP(value):
    return _x64dbg.SetESP(value)
SetESP = _x64dbg.SetESP

def GetSP():
    return _x64dbg.GetSP()
GetSP = _x64dbg.GetSP

def SetSP(value):
    return _x64dbg.SetSP(value)
SetSP = _x64dbg.SetSP

def GetEIP():
    return _x64dbg.GetEIP()
GetEIP = _x64dbg.GetEIP

def SetEIP(value):
    return _x64dbg.SetEIP(value)
SetEIP = _x64dbg.SetEIP

def GetRAX():
    return _x64dbg.GetRAX()
GetRAX = _x64dbg.GetRAX

def SetRAX(value):
    return _x64dbg.SetRAX(value)
SetRAX = _x64dbg.SetRAX

def GetRBX():
    return _x64dbg.GetRBX()
GetRBX = _x64dbg.GetRBX

def SetRBX(value):
    return _x64dbg.SetRBX(value)
SetRBX = _x64dbg.SetRBX

def GetRCX():
    return _x64dbg.GetRCX()
GetRCX = _x64dbg.GetRCX

def SetRCX(value):
    return _x64dbg.SetRCX(value)
SetRCX = _x64dbg.SetRCX

def GetRDX():
    return _x64dbg.GetRDX()
GetRDX = _x64dbg.GetRDX

def SetRDX(value):
    return _x64dbg.SetRDX(value)
SetRDX = _x64dbg.SetRDX

def GetRSI():
    return _x64dbg.GetRSI()
GetRSI = _x64dbg.GetRSI

def SetRSI(value):
    return _x64dbg.SetRSI(value)
SetRSI = _x64dbg.SetRSI

def GetSIL():
    return _x64dbg.GetSIL()
GetSIL = _x64dbg.GetSIL

def SetSIL(value):
    return _x64dbg.SetSIL(value)
SetSIL = _x64dbg.SetSIL

def GetRDI():
    return _x64dbg.GetRDI()
GetRDI = _x64dbg.GetRDI

def SetRDI(value):
    return _x64dbg.SetRDI(value)
SetRDI = _x64dbg.SetRDI

def GetDIL():
    return _x64dbg.GetDIL()
GetDIL = _x64dbg.GetDIL

def SetDIL(value):
    return _x64dbg.SetDIL(value)
SetDIL = _x64dbg.SetDIL

def GetRBP():
    return _x64dbg.GetRBP()
GetRBP = _x64dbg.GetRBP

def SetRBP(value):
    return _x64dbg.SetRBP(value)
SetRBP = _x64dbg.SetRBP

def GetBPL():
    return _x64dbg.GetBPL()
GetBPL = _x64dbg.GetBPL

def SetBPL(value):
    return _x64dbg.SetBPL(value)
SetBPL = _x64dbg.SetBPL

def GetRSP():
    return _x64dbg.GetRSP()
GetRSP = _x64dbg.GetRSP

def SetRSP(value):
    return _x64dbg.SetRSP(value)
SetRSP = _x64dbg.SetRSP

def GetSPL():
    return _x64dbg.GetSPL()
GetSPL = _x64dbg.GetSPL

def SetSPL(value):
    return _x64dbg.SetSPL(value)
SetSPL = _x64dbg.SetSPL

def GetRIP():
    return _x64dbg.GetRIP()
GetRIP = _x64dbg.GetRIP

def SetRIP(value):
    return _x64dbg.SetRIP(value)
SetRIP = _x64dbg.SetRIP

def GetR8():
    return _x64dbg.GetR8()
GetR8 = _x64dbg.GetR8

def SetR8(value):
    return _x64dbg.SetR8(value)
SetR8 = _x64dbg.SetR8

def GetR8D():
    return _x64dbg.GetR8D()
GetR8D = _x64dbg.GetR8D

def SetR8D(value):
    return _x64dbg.SetR8D(value)
SetR8D = _x64dbg.SetR8D

def GetR8W():
    return _x64dbg.GetR8W()
GetR8W = _x64dbg.GetR8W

def SetR8W(value):
    return _x64dbg.SetR8W(value)
SetR8W = _x64dbg.SetR8W

def GetR8B():
    return _x64dbg.GetR8B()
GetR8B = _x64dbg.GetR8B

def SetR8B(value):
    return _x64dbg.SetR8B(value)
SetR8B = _x64dbg.SetR8B

def GetR9():
    return _x64dbg.GetR9()
GetR9 = _x64dbg.GetR9

def SetR9(value):
    return _x64dbg.SetR9(value)
SetR9 = _x64dbg.SetR9

def GetR9D():
    return _x64dbg.GetR9D()
GetR9D = _x64dbg.GetR9D

def SetR9D(value):
    return _x64dbg.SetR9D(value)
SetR9D = _x64dbg.SetR9D

def GetR9W():
    return _x64dbg.GetR9W()
GetR9W = _x64dbg.GetR9W

def SetR9W(value):
    return _x64dbg.SetR9W(value)
SetR9W = _x64dbg.SetR9W

def GetR9B():
    return _x64dbg.GetR9B()
GetR9B = _x64dbg.GetR9B

def SetR9B(value):
    return _x64dbg.SetR9B(value)
SetR9B = _x64dbg.SetR9B

def GetR10():
    return _x64dbg.GetR10()
GetR10 = _x64dbg.GetR10

def SetR10(value):
    return _x64dbg.SetR10(value)
SetR10 = _x64dbg.SetR10

def GetR10D():
    return _x64dbg.GetR10D()
GetR10D = _x64dbg.GetR10D

def SetR10D(value):
    return _x64dbg.SetR10D(value)
SetR10D = _x64dbg.SetR10D

def GetR10W():
    return _x64dbg.GetR10W()
GetR10W = _x64dbg.GetR10W

def SetR10W(value):
    return _x64dbg.SetR10W(value)
SetR10W = _x64dbg.SetR10W

def GetR10B():
    return _x64dbg.GetR10B()
GetR10B = _x64dbg.GetR10B

def SetR10B(value):
    return _x64dbg.SetR10B(value)
SetR10B = _x64dbg.SetR10B

def GetR11():
    return _x64dbg.GetR11()
GetR11 = _x64dbg.GetR11

def SetR11(value):
    return _x64dbg.SetR11(value)
SetR11 = _x64dbg.SetR11

def GetR11D():
    return _x64dbg.GetR11D()
GetR11D = _x64dbg.GetR11D

def SetR11D(value):
    return _x64dbg.SetR11D(value)
SetR11D = _x64dbg.SetR11D

def GetR11W():
    return _x64dbg.GetR11W()
GetR11W = _x64dbg.GetR11W

def SetR11W(value):
    return _x64dbg.SetR11W(value)
SetR11W = _x64dbg.SetR11W

def GetR11B():
    return _x64dbg.GetR11B()
GetR11B = _x64dbg.GetR11B

def SetR11B(value):
    return _x64dbg.SetR11B(value)
SetR11B = _x64dbg.SetR11B

def GetR12():
    return _x64dbg.GetR12()
GetR12 = _x64dbg.GetR12

def SetR12(value):
    return _x64dbg.SetR12(value)
SetR12 = _x64dbg.SetR12

def GetR12D():
    return _x64dbg.GetR12D()
GetR12D = _x64dbg.GetR12D

def SetR12D(value):
    return _x64dbg.SetR12D(value)
SetR12D = _x64dbg.SetR12D

def GetR12W():
    return _x64dbg.GetR12W()
GetR12W = _x64dbg.GetR12W

def SetR12W(value):
    return _x64dbg.SetR12W(value)
SetR12W = _x64dbg.SetR12W

def GetR12B():
    return _x64dbg.GetR12B()
GetR12B = _x64dbg.GetR12B

def SetR12B(value):
    return _x64dbg.SetR12B(value)
SetR12B = _x64dbg.SetR12B

def GetR13():
    return _x64dbg.GetR13()
GetR13 = _x64dbg.GetR13

def SetR13(value):
    return _x64dbg.SetR13(value)
SetR13 = _x64dbg.SetR13

def GetR13D():
    return _x64dbg.GetR13D()
GetR13D = _x64dbg.GetR13D

def SetR13D(value):
    return _x64dbg.SetR13D(value)
SetR13D = _x64dbg.SetR13D

def GetR13W():
    return _x64dbg.GetR13W()
GetR13W = _x64dbg.GetR13W

def SetR13W(value):
    return _x64dbg.SetR13W(value)
SetR13W = _x64dbg.SetR13W

def GetR13B():
    return _x64dbg.GetR13B()
GetR13B = _x64dbg.GetR13B

def SetR13B(value):
    return _x64dbg.SetR13B(value)
SetR13B = _x64dbg.SetR13B

def GetR14():
    return _x64dbg.GetR14()
GetR14 = _x64dbg.GetR14

def SetR14(value):
    return _x64dbg.SetR14(value)
SetR14 = _x64dbg.SetR14

def GetR14D():
    return _x64dbg.GetR14D()
GetR14D = _x64dbg.GetR14D

def SetR14D(value):
    return _x64dbg.SetR14D(value)
SetR14D = _x64dbg.SetR14D

def GetR14W():
    return _x64dbg.GetR14W()
GetR14W = _x64dbg.GetR14W

def SetR14W(value):
    return _x64dbg.SetR14W(value)
SetR14W = _x64dbg.SetR14W

def GetR14B():
    return _x64dbg.GetR14B()
GetR14B = _x64dbg.GetR14B

def SetR14B(value):
    return _x64dbg.SetR14B(value)
SetR14B = _x64dbg.SetR14B

def GetR15():
    return _x64dbg.GetR15()
GetR15 = _x64dbg.GetR15

def SetR15(value):
    return _x64dbg.SetR15(value)
SetR15 = _x64dbg.SetR15

def GetR15D():
    return _x64dbg.GetR15D()
GetR15D = _x64dbg.GetR15D

def SetR15D(value):
    return _x64dbg.SetR15D(value)
SetR15D = _x64dbg.SetR15D

def GetR15W():
    return _x64dbg.GetR15W()
GetR15W = _x64dbg.GetR15W

def SetR15W(value):
    return _x64dbg.SetR15W(value)
SetR15W = _x64dbg.SetR15W

def GetR15B():
    return _x64dbg.GetR15B()
GetR15B = _x64dbg.GetR15B

def SetR15B(value):
    return _x64dbg.SetR15B(value)
SetR15B = _x64dbg.SetR15B

def GetCAX():
    return _x64dbg.GetCAX()
GetCAX = _x64dbg.GetCAX

def SetCAX(value):
    return _x64dbg.SetCAX(value)
SetCAX = _x64dbg.SetCAX

def GetCBX():
    return _x64dbg.GetCBX()
GetCBX = _x64dbg.GetCBX

def SetCBX(value):
    return _x64dbg.SetCBX(value)
SetCBX = _x64dbg.SetCBX

def GetCCX():
    return _x64dbg.GetCCX()
GetCCX = _x64dbg.GetCCX

def SetCCX(value):
    return _x64dbg.SetCCX(value)
SetCCX = _x64dbg.SetCCX

def GetCDX():
    return _x64dbg.GetCDX()
GetCDX = _x64dbg.GetCDX

def SetCDX(value):
    return _x64dbg.SetCDX(value)
SetCDX = _x64dbg.SetCDX

def GetCDI():
    return _x64dbg.GetCDI()
GetCDI = _x64dbg.GetCDI

def SetCDI(value):
    return _x64dbg.SetCDI(value)
SetCDI = _x64dbg.SetCDI

def GetCSI():
    return _x64dbg.GetCSI()
GetCSI = _x64dbg.GetCSI

def SetCSI(value):
    return _x64dbg.SetCSI(value)
SetCSI = _x64dbg.SetCSI

def GetCBP():
    return _x64dbg.GetCBP()
GetCBP = _x64dbg.GetCBP

def SetCBP(value):
    return _x64dbg.SetCBP(value)
SetCBP = _x64dbg.SetCBP

def GetCSP():
    return _x64dbg.GetCSP()
GetCSP = _x64dbg.GetCSP

def SetCSP(value):
    return _x64dbg.SetCSP(value)
SetCSP = _x64dbg.SetCSP

def GetCIP():
    return _x64dbg.GetCIP()
GetCIP = _x64dbg.GetCIP

def SetCIP(value):
    return _x64dbg.SetCIP(value)
SetCIP = _x64dbg.SetCIP

def GetCFLAGS():
    return _x64dbg.GetCFLAGS()
GetCFLAGS = _x64dbg.GetCFLAGS

def SetCFLAGS(value):
    return _x64dbg.SetCFLAGS(value)
SetCFLAGS = _x64dbg.SetCFLAGS

def Find(data, pattern):
    return _x64dbg.Find(data, pattern)
Find = _x64dbg.Find

def FindMem(start, size, pattern):
    return _x64dbg.FindMem(start, size, pattern)
FindMem = _x64dbg.FindMem

def Pattern_Write(data, pattern):
    return _x64dbg.Pattern_Write(data, pattern)
Pattern_Write = _x64dbg.Pattern_Write

def Pattern_WriteMem(start, size, pattern):
    return _x64dbg.Pattern_WriteMem(start, size, pattern)
Pattern_WriteMem = _x64dbg.Pattern_WriteMem

def SearchAndReplace(data, searchpattern, replacepattern):
    return _x64dbg.SearchAndReplace(data, searchpattern, replacepattern)
SearchAndReplace = _x64dbg.SearchAndReplace

def SearchAndReplaceMem(start, size, searchpattern, replacepattern):
    return _x64dbg.SearchAndReplaceMem(start, size, searchpattern, replacepattern)
SearchAndReplaceMem = _x64dbg.SearchAndReplaceMem

def Disassembly_SelectionGet():
    return _x64dbg.Disassembly_SelectionGet()
Disassembly_SelectionGet = _x64dbg.Disassembly_SelectionGet

def Disassembly_SelectionSet(start, end):
    return _x64dbg.Disassembly_SelectionSet(start, end)
Disassembly_SelectionSet = _x64dbg.Disassembly_SelectionSet

def Disassembly_SelectionGetStart():
    return _x64dbg.Disassembly_SelectionGetStart()
Disassembly_SelectionGetStart = _x64dbg.Disassembly_SelectionGetStart

def Disassembly_SelectionGetEnd():
    return _x64dbg.Disassembly_SelectionGetEnd()
Disassembly_SelectionGetEnd = _x64dbg.Disassembly_SelectionGetEnd

def Dump_SelectionGet():
    return _x64dbg.Dump_SelectionGet()
Dump_SelectionGet = _x64dbg.Dump_SelectionGet

def Dump_SelectionSet(start, end):
    return _x64dbg.Dump_SelectionSet(start, end)
Dump_SelectionSet = _x64dbg.Dump_SelectionSet

def Dump_SelectionGetStart():
    return _x64dbg.Dump_SelectionGetStart()
Dump_SelectionGetStart = _x64dbg.Dump_SelectionGetStart

def Dump_SelectionGetEnd():
    return _x64dbg.Dump_SelectionGetEnd()
Dump_SelectionGetEnd = _x64dbg.Dump_SelectionGetEnd

def Stack_SelectionGet():
    return _x64dbg.Stack_SelectionGet()
Stack_SelectionGet = _x64dbg.Stack_SelectionGet

def Stack_SelectionSet(start, end):
    return _x64dbg.Stack_SelectionSet(start, end)
Stack_SelectionSet = _x64dbg.Stack_SelectionSet

def Stack_SelectionGetStart():
    return _x64dbg.Stack_SelectionGetStart()
Stack_SelectionGetStart = _x64dbg.Stack_SelectionGetStart

def Stack_SelectionGetEnd():
    return _x64dbg.Stack_SelectionGetEnd()
Stack_SelectionGetEnd = _x64dbg.Stack_SelectionGetEnd

def Graph_SelectionGetStart():
    return _x64dbg.Graph_SelectionGetStart()
Graph_SelectionGetStart = _x64dbg.Graph_SelectionGetStart

def MemMap_SelectionGetStart():
    return _x64dbg.MemMap_SelectionGetStart()
MemMap_SelectionGetStart = _x64dbg.MemMap_SelectionGetStart

def SymMod_SelectionGetStart():
    return _x64dbg.SymMod_SelectionGetStart()
SymMod_SelectionGetStart = _x64dbg.SymMod_SelectionGetStart
DisassemblyWindow = _x64dbg.DisassemblyWindow
DumpWindow = _x64dbg.DumpWindow
StackWindow = _x64dbg.StackWindow
GraphWindow = _x64dbg.GraphWindow
MemMapWindow = _x64dbg.MemMapWindow
SymModWindow = _x64dbg.SymModWindow

def Gui_SelectionGet(window):
    return _x64dbg.Gui_SelectionGet(window)
Gui_SelectionGet = _x64dbg.Gui_SelectionGet

def Gui_SelectionSet(window, start, end):
    return _x64dbg.Gui_SelectionSet(window, start, end)
Gui_SelectionSet = _x64dbg.Gui_SelectionSet

def Gui_SelectionGetStart(window):
    return _x64dbg.Gui_SelectionGetStart(window)
Gui_SelectionGetStart = _x64dbg.Gui_SelectionGetStart

def Gui_SelectionGetEnd(window):
    return _x64dbg.Gui_SelectionGetEnd(window)
Gui_SelectionGetEnd = _x64dbg.Gui_SelectionGetEnd

def Message(message):
    return _x64dbg.Message(message)
Message = _x64dbg.Message

def MessageYesNo(message):
    return _x64dbg.MessageYesNo(message)
MessageYesNo = _x64dbg.MessageYesNo

def InputLine(title, text):
    return _x64dbg.InputLine(title, text)
InputLine = _x64dbg.InputLine

def InputValue(title):
    return _x64dbg.InputValue(title)
InputValue = _x64dbg.InputValue

def Refresh():
    return _x64dbg.Refresh()
Refresh = _x64dbg.Refresh

def AddQWidgetTab(qWidget):
    return _x64dbg.AddQWidgetTab(qWidget)
AddQWidgetTab = _x64dbg.AddQWidgetTab

def ShowQWidgetTab(qWidget):
    return _x64dbg.ShowQWidgetTab(qWidget)
ShowQWidgetTab = _x64dbg.ShowQWidgetTab

def CloseQWidgetTab(qWidget):
    return _x64dbg.CloseQWidgetTab(qWidget)
CloseQWidgetTab = _x64dbg.CloseQWidgetTab

def ParseExpression(expression):
    return _x64dbg.ParseExpression(expression)
ParseExpression = _x64dbg.ParseExpression

def RemoteGetProcAddress(module, api):
    return _x64dbg.RemoteGetProcAddress(module, api)
RemoteGetProcAddress = _x64dbg.RemoteGetProcAddress

def ResolveLabel(label):
    return _x64dbg.ResolveLabel(label)
ResolveLabel = _x64dbg.ResolveLabel

def Alloc(size):
    return _x64dbg.Alloc(size)
Alloc = _x64dbg.Alloc

def Free(ptr):
    return _x64dbg.Free(ptr)
Free = _x64dbg.Free

def Pop():
    return _x64dbg.Pop()
Pop = _x64dbg.Pop

def Push(value):
    return _x64dbg.Push(value)
Push = _x64dbg.Push

def Peek(offset=0):
    return _x64dbg.Peek(offset)
Peek = _x64dbg.Peek

def Assemble(addr, dest, instruction):
    return _x64dbg.Assemble(addr, dest, instruction)
Assemble = _x64dbg.Assemble

def AssembleEx(addr, dest, instruction, error):
    return _x64dbg.AssembleEx(addr, dest, instruction, error)
AssembleEx = _x64dbg.AssembleEx

def AssembleMem(addr, instruction):
    return _x64dbg.AssembleMem(addr, instruction)
AssembleMem = _x64dbg.AssembleMem

def AssembleMemEx(addr, instruction, error, fillnop):
    return _x64dbg.AssembleMemEx(addr, instruction, error, fillnop)
AssembleMemEx = _x64dbg.AssembleMemEx
class vectorGetModuleInfoList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorGetModuleInfoList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorGetModuleInfoList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _x64dbg.vectorGetModuleInfoList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _x64dbg.vectorGetModuleInfoList___nonzero__(self)

    def __bool__(self):
        return _x64dbg.vectorGetModuleInfoList___bool__(self)

    def __len__(self):
        return _x64dbg.vectorGetModuleInfoList___len__(self)

    def __getslice__(self, i, j):
        return _x64dbg.vectorGetModuleInfoList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _x64dbg.vectorGetModuleInfoList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _x64dbg.vectorGetModuleInfoList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _x64dbg.vectorGetModuleInfoList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _x64dbg.vectorGetModuleInfoList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _x64dbg.vectorGetModuleInfoList___setitem__(self, *args)

    def pop(self):
        return _x64dbg.vectorGetModuleInfoList_pop(self)

    def append(self, x):
        return _x64dbg.vectorGetModuleInfoList_append(self, x)

    def empty(self):
        return _x64dbg.vectorGetModuleInfoList_empty(self)

    def size(self):
        return _x64dbg.vectorGetModuleInfoList_size(self)

    def swap(self, v):
        return _x64dbg.vectorGetModuleInfoList_swap(self, v)

    def begin(self):
        return _x64dbg.vectorGetModuleInfoList_begin(self)

    def end(self):
        return _x64dbg.vectorGetModuleInfoList_end(self)

    def rbegin(self):
        return _x64dbg.vectorGetModuleInfoList_rbegin(self)

    def rend(self):
        return _x64dbg.vectorGetModuleInfoList_rend(self)

    def clear(self):
        return _x64dbg.vectorGetModuleInfoList_clear(self)

    def get_allocator(self):
        return _x64dbg.vectorGetModuleInfoList_get_allocator(self)

    def pop_back(self):
        return _x64dbg.vectorGetModuleInfoList_pop_back(self)

    def erase(self, *args):
        return _x64dbg.vectorGetModuleInfoList_erase(self, *args)

    def __init__(self, *args):
        this = _x64dbg.new_vectorGetModuleInfoList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _x64dbg.vectorGetModuleInfoList_push_back(self, x)

    def front(self):
        return _x64dbg.vectorGetModuleInfoList_front(self)

    def back(self):
        return _x64dbg.vectorGetModuleInfoList_back(self)

    def assign(self, n, x):
        return _x64dbg.vectorGetModuleInfoList_assign(self, n, x)

    def resize(self, *args):
        return _x64dbg.vectorGetModuleInfoList_resize(self, *args)

    def insert(self, *args):
        return _x64dbg.vectorGetModuleInfoList_insert(self, *args)

    def reserve(self, n):
        return _x64dbg.vectorGetModuleInfoList_reserve(self, n)

    def capacity(self):
        return _x64dbg.vectorGetModuleInfoList_capacity(self)
    __swig_destroy__ = _x64dbg.delete_vectorGetModuleInfoList
    __del__ = lambda self: None
vectorGetModuleInfoList_swigregister = _x64dbg.vectorGetModuleInfoList_swigregister
vectorGetModuleInfoList_swigregister(vectorGetModuleInfoList)


def GetModuleInfoList(l):
    return _x64dbg.GetModuleInfoList(l)
GetModuleInfoList = _x64dbg.GetModuleInfoList
class vectorGetModuleSectionInfoList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorGetModuleSectionInfoList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorGetModuleSectionInfoList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _x64dbg.vectorGetModuleSectionInfoList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _x64dbg.vectorGetModuleSectionInfoList___nonzero__(self)

    def __bool__(self):
        return _x64dbg.vectorGetModuleSectionInfoList___bool__(self)

    def __len__(self):
        return _x64dbg.vectorGetModuleSectionInfoList___len__(self)

    def __getslice__(self, i, j):
        return _x64dbg.vectorGetModuleSectionInfoList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _x64dbg.vectorGetModuleSectionInfoList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _x64dbg.vectorGetModuleSectionInfoList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _x64dbg.vectorGetModuleSectionInfoList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _x64dbg.vectorGetModuleSectionInfoList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _x64dbg.vectorGetModuleSectionInfoList___setitem__(self, *args)

    def pop(self):
        return _x64dbg.vectorGetModuleSectionInfoList_pop(self)

    def append(self, x):
        return _x64dbg.vectorGetModuleSectionInfoList_append(self, x)

    def empty(self):
        return _x64dbg.vectorGetModuleSectionInfoList_empty(self)

    def size(self):
        return _x64dbg.vectorGetModuleSectionInfoList_size(self)

    def swap(self, v):
        return _x64dbg.vectorGetModuleSectionInfoList_swap(self, v)

    def begin(self):
        return _x64dbg.vectorGetModuleSectionInfoList_begin(self)

    def end(self):
        return _x64dbg.vectorGetModuleSectionInfoList_end(self)

    def rbegin(self):
        return _x64dbg.vectorGetModuleSectionInfoList_rbegin(self)

    def rend(self):
        return _x64dbg.vectorGetModuleSectionInfoList_rend(self)

    def clear(self):
        return _x64dbg.vectorGetModuleSectionInfoList_clear(self)

    def get_allocator(self):
        return _x64dbg.vectorGetModuleSectionInfoList_get_allocator(self)

    def pop_back(self):
        return _x64dbg.vectorGetModuleSectionInfoList_pop_back(self)

    def erase(self, *args):
        return _x64dbg.vectorGetModuleSectionInfoList_erase(self, *args)

    def __init__(self, *args):
        this = _x64dbg.new_vectorGetModuleSectionInfoList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _x64dbg.vectorGetModuleSectionInfoList_push_back(self, x)

    def front(self):
        return _x64dbg.vectorGetModuleSectionInfoList_front(self)

    def back(self):
        return _x64dbg.vectorGetModuleSectionInfoList_back(self)

    def assign(self, n, x):
        return _x64dbg.vectorGetModuleSectionInfoList_assign(self, n, x)

    def resize(self, *args):
        return _x64dbg.vectorGetModuleSectionInfoList_resize(self, *args)

    def insert(self, *args):
        return _x64dbg.vectorGetModuleSectionInfoList_insert(self, *args)

    def reserve(self, n):
        return _x64dbg.vectorGetModuleSectionInfoList_reserve(self, n)

    def capacity(self):
        return _x64dbg.vectorGetModuleSectionInfoList_capacity(self)
    __swig_destroy__ = _x64dbg.delete_vectorGetModuleSectionInfoList
    __del__ = lambda self: None
vectorGetModuleSectionInfoList_swigregister = _x64dbg.vectorGetModuleSectionInfoList_swigregister
vectorGetModuleSectionInfoList_swigregister(vectorGetModuleSectionInfoList)


def GetModuleSectionInfoList(l):
    return _x64dbg.GetModuleSectionInfoList(l)
GetModuleSectionInfoList = _x64dbg.GetModuleSectionInfoList
class ModuleInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["base"] = _x64dbg.ModuleInfo_base_set
    __swig_getmethods__["base"] = _x64dbg.ModuleInfo_base_get
    if _newclass:
        base = _swig_property(_x64dbg.ModuleInfo_base_get, _x64dbg.ModuleInfo_base_set)
    __swig_setmethods__["size"] = _x64dbg.ModuleInfo_size_set
    __swig_getmethods__["size"] = _x64dbg.ModuleInfo_size_get
    if _newclass:
        size = _swig_property(_x64dbg.ModuleInfo_size_get, _x64dbg.ModuleInfo_size_set)
    __swig_setmethods__["entry"] = _x64dbg.ModuleInfo_entry_set
    __swig_getmethods__["entry"] = _x64dbg.ModuleInfo_entry_get
    if _newclass:
        entry = _swig_property(_x64dbg.ModuleInfo_entry_get, _x64dbg.ModuleInfo_entry_set)
    __swig_setmethods__["sectionCount"] = _x64dbg.ModuleInfo_sectionCount_set
    __swig_getmethods__["sectionCount"] = _x64dbg.ModuleInfo_sectionCount_get
    if _newclass:
        sectionCount = _swig_property(_x64dbg.ModuleInfo_sectionCount_get, _x64dbg.ModuleInfo_sectionCount_set)
    __swig_setmethods__["name"] = _x64dbg.ModuleInfo_name_set
    __swig_getmethods__["name"] = _x64dbg.ModuleInfo_name_get
    if _newclass:
        name = _swig_property(_x64dbg.ModuleInfo_name_get, _x64dbg.ModuleInfo_name_set)
    __swig_setmethods__["path"] = _x64dbg.ModuleInfo_path_set
    __swig_getmethods__["path"] = _x64dbg.ModuleInfo_path_get
    if _newclass:
        path = _swig_property(_x64dbg.ModuleInfo_path_get, _x64dbg.ModuleInfo_path_set)

    def __init__(self):
        this = _x64dbg.new_ModuleInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_ModuleInfo
    __del__ = lambda self: None
ModuleInfo_swigregister = _x64dbg.ModuleInfo_swigregister
ModuleInfo_swigregister(ModuleInfo)

class ModuleSectionInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleSectionInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleSectionInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["addr"] = _x64dbg.ModuleSectionInfo_addr_set
    __swig_getmethods__["addr"] = _x64dbg.ModuleSectionInfo_addr_get
    if _newclass:
        addr = _swig_property(_x64dbg.ModuleSectionInfo_addr_get, _x64dbg.ModuleSectionInfo_addr_set)
    __swig_setmethods__["size"] = _x64dbg.ModuleSectionInfo_size_set
    __swig_getmethods__["size"] = _x64dbg.ModuleSectionInfo_size_get
    if _newclass:
        size = _swig_property(_x64dbg.ModuleSectionInfo_size_get, _x64dbg.ModuleSectionInfo_size_set)
    __swig_setmethods__["name"] = _x64dbg.ModuleSectionInfo_name_set
    __swig_getmethods__["name"] = _x64dbg.ModuleSectionInfo_name_get
    if _newclass:
        name = _swig_property(_x64dbg.ModuleSectionInfo_name_get, _x64dbg.ModuleSectionInfo_name_set)

    def __init__(self):
        this = _x64dbg.new_ModuleSectionInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _x64dbg.delete_ModuleSectionInfo
    __del__ = lambda self: None
ModuleSectionInfo_swigregister = _x64dbg.ModuleSectionInfo_swigregister
ModuleSectionInfo_swigregister(ModuleSectionInfo)


def InfoFromAddr(addr, info):
    return _x64dbg.InfoFromAddr(addr, info)
InfoFromAddr = _x64dbg.InfoFromAddr

def InfoFromName(name, info):
    return _x64dbg.InfoFromName(name, info)
InfoFromName = _x64dbg.InfoFromName

def BaseFromAddr(addr):
    return _x64dbg.BaseFromAddr(addr)
BaseFromAddr = _x64dbg.BaseFromAddr

def BaseFromName(name):
    return _x64dbg.BaseFromName(name)
BaseFromName = _x64dbg.BaseFromName

def SizeFromAddr(addr):
    return _x64dbg.SizeFromAddr(addr)
SizeFromAddr = _x64dbg.SizeFromAddr

def SizeFromName(name):
    return _x64dbg.SizeFromName(name)
SizeFromName = _x64dbg.SizeFromName

def NameFromAddr(addr, name):
    return _x64dbg.NameFromAddr(addr, name)
NameFromAddr = _x64dbg.NameFromAddr

def PathFromAddr(addr, path):
    return _x64dbg.PathFromAddr(addr, path)
PathFromAddr = _x64dbg.PathFromAddr

def PathFromName(name, path):
    return _x64dbg.PathFromName(name, path)
PathFromName = _x64dbg.PathFromName

def EntryFromAddr(addr):
    return _x64dbg.EntryFromAddr(addr)
EntryFromAddr = _x64dbg.EntryFromAddr

def EntryFromName(name):
    return _x64dbg.EntryFromName(name)
EntryFromName = _x64dbg.EntryFromName

def SectionCountFromAddr(addr):
    return _x64dbg.SectionCountFromAddr(addr)
SectionCountFromAddr = _x64dbg.SectionCountFromAddr

def SectionCountFromName(name):
    return _x64dbg.SectionCountFromName(name)
SectionCountFromName = _x64dbg.SectionCountFromName

def SectionFromAddr(addr, number, section):
    return _x64dbg.SectionFromAddr(addr, number, section)
SectionFromAddr = _x64dbg.SectionFromAddr

def SectionFromName(name, number, section):
    return _x64dbg.SectionFromName(name, number, section)
SectionFromName = _x64dbg.SectionFromName

def SectionListFromAddr(addr, list):
    return _x64dbg.SectionListFromAddr(addr, list)
SectionListFromAddr = _x64dbg.SectionListFromAddr

def SectionListFromName(name, list):
    return _x64dbg.SectionListFromName(name, list)
SectionListFromName = _x64dbg.SectionListFromName

def GetMainModuleInfo(info):
    return _x64dbg.GetMainModuleInfo(info)
GetMainModuleInfo = _x64dbg.GetMainModuleInfo

def GetMainModuleBase():
    return _x64dbg.GetMainModuleBase()
GetMainModuleBase = _x64dbg.GetMainModuleBase

def GetMainModuleSize():
    return _x64dbg.GetMainModuleSize()
GetMainModuleSize = _x64dbg.GetMainModuleSize

def GetMainModuleEntry():
    return _x64dbg.GetMainModuleEntry()
GetMainModuleEntry = _x64dbg.GetMainModuleEntry

def GetMainModuleSectionCount():
    return _x64dbg.GetMainModuleSectionCount()
GetMainModuleSectionCount = _x64dbg.GetMainModuleSectionCount

def GetMainModuleName(name):
    return _x64dbg.GetMainModuleName(name)
GetMainModuleName = _x64dbg.GetMainModuleName

def GetMainModulePath(path):
    return _x64dbg.GetMainModulePath(path)
GetMainModulePath = _x64dbg.GetMainModulePath

def GetMainModuleSectionList(list):
    return _x64dbg.GetMainModuleSectionList(list)
GetMainModuleSectionList = _x64dbg.GetMainModuleSectionList

def GetList(list):
    return _x64dbg.GetList(list)
GetList = _x64dbg.GetList
ZF = _x64dbg.ZF
OF = _x64dbg.OF
CF = _x64dbg.CF
PF = _x64dbg.PF
SF = _x64dbg.SF
TF = _x64dbg.TF
AF = _x64dbg.AF
DF = _x64dbg.DF
IF = _x64dbg.IF

def Flag_Get(flag):
    return _x64dbg.Flag_Get(flag)
Flag_Get = _x64dbg.Flag_Get

def Flag_Set(flag, value):
    return _x64dbg.Flag_Set(flag, value)
Flag_Set = _x64dbg.Flag_Set

def GetZF():
    return _x64dbg.GetZF()
GetZF = _x64dbg.GetZF

def SetZF(value):
    return _x64dbg.SetZF(value)
SetZF = _x64dbg.SetZF

def GetOF():
    return _x64dbg.GetOF()
GetOF = _x64dbg.GetOF

def SetOF(value):
    return _x64dbg.SetOF(value)
SetOF = _x64dbg.SetOF

def GetCF():
    return _x64dbg.GetCF()
GetCF = _x64dbg.GetCF

def SetCF(value):
    return _x64dbg.SetCF(value)
SetCF = _x64dbg.SetCF

def GetPF():
    return _x64dbg.GetPF()
GetPF = _x64dbg.GetPF

def SetPF(value):
    return _x64dbg.SetPF(value)
SetPF = _x64dbg.SetPF

def GetSF():
    return _x64dbg.GetSF()
GetSF = _x64dbg.GetSF

def SetSF(value):
    return _x64dbg.SetSF(value)
SetSF = _x64dbg.SetSF

def GetTF():
    return _x64dbg.GetTF()
GetTF = _x64dbg.GetTF

def SetTF(value):
    return _x64dbg.SetTF(value)
SetTF = _x64dbg.SetTF

def GetAF():
    return _x64dbg.GetAF()
GetAF = _x64dbg.GetAF

def SetAF(value):
    return _x64dbg.SetAF(value)
SetAF = _x64dbg.SetAF

def GetDF():
    return _x64dbg.GetDF()
GetDF = _x64dbg.GetDF

def SetDF(value):
    return _x64dbg.SetDF(value)
SetDF = _x64dbg.SetDF

def GetIF():
    return _x64dbg.GetIF()
GetIF = _x64dbg.GetIF

def SetIF(value):
    return _x64dbg.SetIF(value)
SetIF = _x64dbg.SetIF
# This file is compatible with both classic and new-style classes.


